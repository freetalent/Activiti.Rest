/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Activiti.Rest.Client;
using Activiti.Rest.Api;
using Activiti.Rest.Model;

namespace Activiti.Rest.Test
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TasksApiTests
    {
        private TasksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TasksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TasksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TasksApi
            //Assert.IsInstanceOfType(typeof(TasksApi), instance, "instance is a TasksApi");
        }

        
        /// <summary>
        /// Test CreateAttachment
        /// </summary>
        [Test]
        public void CreateAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.CreateAttachment(taskId);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
        
        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Test]
        public void CreateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskRequest body = null;
            //var response = instance.CreateTask(body);
            //Assert.IsInstanceOf<TaskResponse> (response, "response is TaskResponse");
        }
        
        /// <summary>
        /// Test CreateTaskComments
        /// </summary>
        [Test]
        public void CreateTaskCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //CommentRequest body = null;
            //var response = instance.CreateTaskComments(taskId, body);
            //Assert.IsInstanceOf<CommentResponse> (response, "response is CommentResponse");
        }
        
        /// <summary>
        /// Test CreateTaskInstanceIdentityLinks
        /// </summary>
        [Test]
        public void CreateTaskInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //RestIdentityLink body = null;
            //var response = instance.CreateTaskInstanceIdentityLinks(taskId, body);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test CreateTaskVariable
        /// </summary>
        [Test]
        public void CreateTaskVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.CreateTaskVariable(taskId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteAllLocalTaskVariables
        /// </summary>
        [Test]
        public void DeleteAllLocalTaskVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //instance.DeleteAllLocalTaskVariables(taskId);
            
        }
        
        /// <summary>
        /// Test DeleteAttachment
        /// </summary>
        [Test]
        public void DeleteAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string attachmentId = null;
            //instance.DeleteAttachment(taskId, attachmentId);
            
        }
        
        /// <summary>
        /// Test DeleteEvent
        /// </summary>
        [Test]
        public void DeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string eventId = null;
            //instance.DeleteEvent(taskId, eventId);
            
        }
        
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //instance.DeleteTask(taskId);
            
        }
        
        /// <summary>
        /// Test DeleteTaskComment
        /// </summary>
        [Test]
        public void DeleteTaskCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string commentId = null;
            //instance.DeleteTaskComment(taskId, commentId);
            
        }
        
        /// <summary>
        /// Test DeleteTaskInstanceIdentityLinks
        /// </summary>
        [Test]
        public void DeleteTaskInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string family = null;
            //string identityId = null;
            //string type = null;
            //instance.DeleteTaskInstanceIdentityLinks(taskId, family, identityId, type);
            
        }
        
        /// <summary>
        /// Test DeleteTaskInstanceVariable
        /// </summary>
        [Test]
        public void DeleteTaskInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string variableName = null;
            //instance.DeleteTaskInstanceVariable(taskId, variableName);
            
        }
        
        /// <summary>
        /// Test ExecuteTaskAction
        /// </summary>
        [Test]
        public void ExecuteTaskActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //TaskActionRequest body = null;
            //instance.ExecuteTaskAction(taskId, body);
            
        }
        
        /// <summary>
        /// Test GeTaskVariableData
        /// </summary>
        [Test]
        public void GeTaskVariableDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string variableName = null;
            //var response = instance.GeTaskVariableData(taskId, variableName);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetAttachment
        /// </summary>
        [Test]
        public void GetAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string attachmentId = null;
            //var response = instance.GetAttachment(taskId, attachmentId);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
        
        /// <summary>
        /// Test GetAttachmentContent
        /// </summary>
        [Test]
        public void GetAttachmentContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string attachmentId = null;
            //var response = instance.GetAttachmentContent(taskId, attachmentId);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetAttachments
        /// </summary>
        [Test]
        public void GetAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetAttachments(taskId);
            //Assert.IsInstanceOf<List<AttachmentResponse>> (response, "response is List<AttachmentResponse>");
        }
        
        /// <summary>
        /// Test GetEvent
        /// </summary>
        [Test]
        public void GetEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string eventId = null;
            //var response = instance.GetEvent(taskId, eventId);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetEvents(taskId);
            //Assert.IsInstanceOf<List<EventResponse>> (response, "response is List<EventResponse>");
        }
        
        /// <summary>
        /// Test GetIdentityLinksForFamily
        /// </summary>
        [Test]
        public void GetIdentityLinksForFamilyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string family = null;
            //var response = instance.GetIdentityLinksForFamily(taskId, family);
            //Assert.IsInstanceOf<List<RestIdentityLink>> (response, "response is List<RestIdentityLink>");
        }
        
        /// <summary>
        /// Test GetQueryResult
        /// </summary>
        [Test]
        public void GetQueryResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TaskQueryRequest body = null;
            //var response = instance.GetQueryResult(body);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
        /// <summary>
        /// Test GetSubTasks
        /// </summary>
        [Test]
        public void GetSubTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetSubTasks(taskId);
            //Assert.IsInstanceOf<List<TaskResponse>> (response, "response is List<TaskResponse>");
        }
        
        /// <summary>
        /// Test GetTask
        /// </summary>
        [Test]
        public void GetTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.GetTask(taskId);
            //Assert.IsInstanceOf<TaskResponse> (response, "response is TaskResponse");
        }
        
        /// <summary>
        /// Test GetTaskComment
        /// </summary>
        [Test]
        public void GetTaskCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string commentId = null;
            //var response = instance.GetTaskComment(taskId, commentId);
            //Assert.IsInstanceOf<CommentResponse> (response, "response is CommentResponse");
        }
        
        /// <summary>
        /// Test GetTaskInstanceIdentityLinks
        /// </summary>
        [Test]
        public void GetTaskInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string family = null;
            //string identityId = null;
            //string type = null;
            //var response = instance.GetTaskInstanceIdentityLinks(taskId, family, identityId, type);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test GetTaskInstanceVariable
        /// </summary>
        [Test]
        public void GetTaskInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string variableName = null;
            //string scope = null;
            //var response = instance.GetTaskInstanceVariable(taskId, variableName, scope);
            //Assert.IsInstanceOf<RestVariable> (response, "response is RestVariable");
        }
        
        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Test]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string nameLike = null;
            //string description = null;
            //string priority = null;
            //string minimumPriority = null;
            //string maximumPriority = null;
            //string assignee = null;
            //string assigneeLike = null;
            //string owner = null;
            //string ownerLike = null;
            //string unassigned = null;
            //string delegationState = null;
            //string candidateUser = null;
            //string candidateGroup = null;
            //string candidateGroups = null;
            //string involvedUser = null;
            //string taskDefinitionKey = null;
            //string taskDefinitionKeyLike = null;
            //string processInstanceId = null;
            //string processInstanceBusinessKey = null;
            //string processInstanceBusinessKeyLike = null;
            //string processDefinitionId = null;
            //string processDefinitionKey = null;
            //string processDefinitionKeyLike = null;
            //string processDefinitionName = null;
            //string processDefinitionNameLike = null;
            //string executionId = null;
            //string createdOn = null;
            //string createdBefore = null;
            //string createdAfter = null;
            //string dueOn = null;
            //string dueBefore = null;
            //string dueAfter = null;
            //bool? withoutDueDate = null;
            //bool? excludeSubTasks = null;
            //bool? active = null;
            //bool? includeTaskLocalVariables = null;
            //bool? includeProcessVariables = null;
            //string tenantId = null;
            //string tenantIdLike = null;
            //bool? withoutTenantId = null;
            //string candidateOrAssigned = null;
            //string category = null;
            //var response = instance.GetTasks(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyLike, processDefinitionId, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, executionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
        /// <summary>
        /// Test ListTaskComments
        /// </summary>
        [Test]
        public void ListTaskCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.ListTaskComments(taskId);
            //Assert.IsInstanceOf<List<CommentResponse>> (response, "response is List<CommentResponse>");
        }
        
        /// <summary>
        /// Test ListTaskVariables
        /// </summary>
        [Test]
        public void ListTaskVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.ListTaskVariables(taskId);
            //Assert.IsInstanceOf<List<RestVariable>> (response, "response is List<RestVariable>");
        }
        
        /// <summary>
        /// Test ListTasksInstanceIdentityLinks
        /// </summary>
        [Test]
        public void ListTasksInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //var response = instance.ListTasksInstanceIdentityLinks(taskId);
            //Assert.IsInstanceOf<List<RestIdentityLink>> (response, "response is List<RestIdentityLink>");
        }
        
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //TaskRequest body = null;
            //var response = instance.UpdateTask(taskId, body);
            //Assert.IsInstanceOf<TaskResponse> (response, "response is TaskResponse");
        }
        
        /// <summary>
        /// Test UpdateTaskInstanceVariable
        /// </summary>
        [Test]
        public void UpdateTaskInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string variableName = null;
            //var response = instance.UpdateTaskInstanceVariable(taskId, variableName);
            //Assert.IsInstanceOf<RestVariable> (response, "response is RestVariable");
        }
        
    }

}
