/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Activiti.Rest.Client;
using Activiti.Rest.Api;
using Activiti.Rest.Model;

namespace Activiti.Rest.Test
{
    /// <summary>
    ///  Class for testing ProcessDefinitionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProcessDefinitionsApiTests
    {
        private ProcessDefinitionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessDefinitionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessDefinitionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProcessDefinitionsApi
            //Assert.IsInstanceOfType(typeof(ProcessDefinitionsApi), instance, "instance is a ProcessDefinitionsApi");
        }

        
        /// <summary>
        /// Test CreateIdentityLink
        /// </summary>
        [Test]
        public void CreateIdentityLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //RestIdentityLink body = null;
            //var response = instance.CreateIdentityLink(processDefinitionId, body);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test DeleteIdentityLink
        /// </summary>
        [Test]
        public void DeleteIdentityLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //string family = null;
            //string identityId = null;
            //instance.DeleteIdentityLink(processDefinitionId, family, identityId);
            
        }
        
        /// <summary>
        /// Test ExecuteProcessDefinitionAction
        /// </summary>
        [Test]
        public void ExecuteProcessDefinitionActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //ProcessDefinitionActionRequest body = null;
            //var response = instance.ExecuteProcessDefinitionAction(processDefinitionId, body);
            //Assert.IsInstanceOf<ProcessDefinitionResponse> (response, "response is ProcessDefinitionResponse");
        }
        
        /// <summary>
        /// Test GetBpmnModelResource
        /// </summary>
        [Test]
        public void GetBpmnModelResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //var response = instance.GetBpmnModelResource(processDefinitionId);
            //Assert.IsInstanceOf<BpmnModel> (response, "response is BpmnModel");
        }
        
        /// <summary>
        /// Test GetIdentityLink
        /// </summary>
        [Test]
        public void GetIdentityLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //string family = null;
            //string identityId = null;
            //var response = instance.GetIdentityLink(processDefinitionId, family, identityId);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test GetIdentityLinks
        /// </summary>
        [Test]
        public void GetIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //var response = instance.GetIdentityLinks(processDefinitionId);
            //Assert.IsInstanceOf<List<RestIdentityLink>> (response, "response is List<RestIdentityLink>");
        }
        
        /// <summary>
        /// Test GetModelResource
        /// </summary>
        [Test]
        public void GetModelResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //var response = instance.GetModelResource(processDefinitionId);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetProcessDefinition
        /// </summary>
        [Test]
        public void GetProcessDefinitionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //var response = instance.GetProcessDefinition(processDefinitionId);
            //Assert.IsInstanceOf<ProcessDefinitionResponse> (response, "response is ProcessDefinitionResponse");
        }
        
        /// <summary>
        /// Test GetProcessDefinitionResource
        /// </summary>
        [Test]
        public void GetProcessDefinitionResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processDefinitionId = null;
            //var response = instance.GetProcessDefinitionResource(processDefinitionId);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetProcessDefinitions
        /// </summary>
        [Test]
        public void GetProcessDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? version = null;
            //string name = null;
            //string nameLike = null;
            //string key = null;
            //string keyLike = null;
            //string resourceName = null;
            //string resourceNameLike = null;
            //string category = null;
            //string categoryLike = null;
            //string categoryNotEquals = null;
            //string deploymentId = null;
            //string startableByUser = null;
            //bool? latest = null;
            //bool? suspended = null;
            //string sort = null;
            //var response = instance.GetProcessDefinitions(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
    }

}
