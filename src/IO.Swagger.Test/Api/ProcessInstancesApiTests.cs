/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Activiti.Rest.Client;
using Activiti.Rest.Api;
using Activiti.Rest.Model;

namespace Activiti.Rest.Test
{
    /// <summary>
    ///  Class for testing ProcessInstancesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProcessInstancesApiTests
    {
        private ProcessInstancesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessInstancesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessInstancesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProcessInstancesApi
            //Assert.IsInstanceOfType(typeof(ProcessInstancesApi), instance, "instance is a ProcessInstancesApi");
        }

        
        /// <summary>
        /// Test CreateOrUpdateProcessVariable
        /// </summary>
        [Test]
        public void CreateOrUpdateProcessVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //var response = instance.CreateOrUpdateProcessVariable(processInstanceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test CreateProcessInstance
        /// </summary>
        [Test]
        public void CreateProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessInstanceCreateRequest body = null;
            //var response = instance.CreateProcessInstance(body);
            //Assert.IsInstanceOf<ProcessInstanceResponse> (response, "response is ProcessInstanceResponse");
        }
        
        /// <summary>
        /// Test CreateProcessInstanceIdentityLinks
        /// </summary>
        [Test]
        public void CreateProcessInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //RestIdentityLink body = null;
            //var response = instance.CreateProcessInstanceIdentityLinks(processInstanceId, body);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test CreateProcessInstanceVariable
        /// </summary>
        [Test]
        public void CreateProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //var response = instance.CreateProcessInstanceVariable(processInstanceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteLocalProcessVariable
        /// </summary>
        [Test]
        public void DeleteLocalProcessVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //instance.DeleteLocalProcessVariable(processInstanceId);
            
        }
        
        /// <summary>
        /// Test DeleteProcessInstance
        /// </summary>
        [Test]
        public void DeleteProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string deleteReason = null;
            //instance.DeleteProcessInstance(processInstanceId, deleteReason);
            
        }
        
        /// <summary>
        /// Test DeleteProcessInstanceIdentityLinks
        /// </summary>
        [Test]
        public void DeleteProcessInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string identityId = null;
            //string type = null;
            //instance.DeleteProcessInstanceIdentityLinks(processInstanceId, identityId, type);
            
        }
        
        /// <summary>
        /// Test DeleteProcessInstanceVariable
        /// </summary>
        [Test]
        public void DeleteProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string variableName = null;
            //string scope = null;
            //instance.DeleteProcessInstanceVariable(processInstanceId, variableName, scope);
            
        }
        
        /// <summary>
        /// Test GetProcessInstance
        /// </summary>
        [Test]
        public void GetProcessInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //var response = instance.GetProcessInstance(processInstanceId);
            //Assert.IsInstanceOf<ProcessInstanceResponse> (response, "response is ProcessInstanceResponse");
        }
        
        /// <summary>
        /// Test GetProcessInstanceDiagram
        /// </summary>
        [Test]
        public void GetProcessInstanceDiagramTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //var response = instance.GetProcessInstanceDiagram(processInstanceId);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetProcessInstanceIdentityLinks
        /// </summary>
        [Test]
        public void GetProcessInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string identityId = null;
            //string type = null;
            //var response = instance.GetProcessInstanceIdentityLinks(processInstanceId, identityId, type);
            //Assert.IsInstanceOf<RestIdentityLink> (response, "response is RestIdentityLink");
        }
        
        /// <summary>
        /// Test GetProcessInstanceVariable
        /// </summary>
        [Test]
        public void GetProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string variableName = null;
            //string scope = null;
            //var response = instance.GetProcessInstanceVariable(processInstanceId, variableName, scope);
            //Assert.IsInstanceOf<RestVariable> (response, "response is RestVariable");
        }
        
        /// <summary>
        /// Test GetProcessInstanceVariableData
        /// </summary>
        [Test]
        public void GetProcessInstanceVariableDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string variableName = null;
            //string scope = null;
            //var response = instance.GetProcessInstanceVariableData(processInstanceId, variableName, scope);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetProcessInstances
        /// </summary>
        [Test]
        public void GetProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string processDefinitionKey = null;
            //string processDefinitionId = null;
            //string businessKey = null;
            //string involvedUser = null;
            //bool? suspended = null;
            //string superProcessInstanceId = null;
            //string subProcessInstanceId = null;
            //bool? excludeSubprocesses = null;
            //bool? includeProcessVariables = null;
            //string tenantId = null;
            //string tenantIdLike = null;
            //bool? withoutTenantId = null;
            //string sort = null;
            //var response = instance.GetProcessInstances(id, processDefinitionKey, processDefinitionId, businessKey, involvedUser, suspended, superProcessInstanceId, subProcessInstanceId, excludeSubprocesses, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, sort);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
        /// <summary>
        /// Test GetVariables
        /// </summary>
        [Test]
        public void GetVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string scope = null;
            //var response = instance.GetVariables(processInstanceId, scope);
            //Assert.IsInstanceOf<List<RestVariable>> (response, "response is List<RestVariable>");
        }
        
        /// <summary>
        /// Test ListProcessInstanceIdentityLinks
        /// </summary>
        [Test]
        public void ListProcessInstanceIdentityLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //var response = instance.ListProcessInstanceIdentityLinks(processInstanceId);
            //Assert.IsInstanceOf<List<RestIdentityLink>> (response, "response is List<RestIdentityLink>");
        }
        
        /// <summary>
        /// Test PerformProcessInstanceAction
        /// </summary>
        [Test]
        public void PerformProcessInstanceActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //ProcessInstanceActionRequest body = null;
            //var response = instance.PerformProcessInstanceAction(processInstanceId, body);
            //Assert.IsInstanceOf<ProcessInstanceResponse> (response, "response is ProcessInstanceResponse");
        }
        
        /// <summary>
        /// Test QueryProcessInstances
        /// </summary>
        [Test]
        public void QueryProcessInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessInstanceQueryRequest body = null;
            //var response = instance.QueryProcessInstances(body);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
        /// <summary>
        /// Test UpdateProcessInstanceVariable
        /// </summary>
        [Test]
        public void UpdateProcessInstanceVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processInstanceId = null;
            //string variableName = null;
            //var response = instance.UpdateProcessInstanceVariable(processInstanceId, variableName);
            //Assert.IsInstanceOf<RestVariable> (response, "response is RestVariable");
        }
        
    }

}
