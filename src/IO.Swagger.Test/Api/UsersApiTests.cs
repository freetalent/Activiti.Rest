/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Activiti.Rest.Client;
using Activiti.Rest.Api;
using Activiti.Rest.Model;

namespace Activiti.Rest.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRequest body = null;
            //var response = instance.CreateUser(body);
            //Assert.IsInstanceOf<UserResponse> (response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test CreateUserInfo
        /// </summary>
        [Test]
        public void CreateUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserInfoRequest body = null;
            //var response = instance.CreateUserInfo(userId, body);
            //Assert.IsInstanceOf<UserInfoResponse> (response, "response is UserInfoResponse");
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.DeleteUser(userId);
            
        }
        
        /// <summary>
        /// Test DeleteUserInfo
        /// </summary>
        [Test]
        public void DeleteUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string key = null;
            //instance.DeleteUserInfo(userId, key);
            
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsInstanceOf<UserResponse> (response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test GetUserInfo
        /// </summary>
        [Test]
        public void GetUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string key = null;
            //var response = instance.GetUserInfo(userId, key);
            //Assert.IsInstanceOf<UserInfoResponse> (response, "response is UserInfoResponse");
        }
        
        /// <summary>
        /// Test GetUserPicture
        /// </summary>
        [Test]
        public void GetUserPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetUserPicture(userId);
            //Assert.IsInstanceOf<List<byte[]>> (response, "response is List<byte[]>");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string firstName = null;
            //string lastName = null;
            //string email = null;
            //string firstNameLike = null;
            //string lastNameLike = null;
            //string emailLike = null;
            //string memberOfGroup = null;
            //string potentialStarter = null;
            //string sort = null;
            //var response = instance.GetUsers(id, firstName, lastName, email, firstNameLike, lastNameLike, emailLike, memberOfGroup, potentialStarter, sort);
            //Assert.IsInstanceOf<DataResponse> (response, "response is DataResponse");
        }
        
        /// <summary>
        /// Test ListUsersInfo
        /// </summary>
        [Test]
        public void ListUsersInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListUsersInfo(userId);
            //Assert.IsInstanceOf<List<UserInfoResponse>> (response, "response is List<UserInfoResponse>");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserRequest body = null;
            //var response = instance.UpdateUser(userId, body);
            //Assert.IsInstanceOf<UserResponse> (response, "response is UserResponse");
        }
        
        /// <summary>
        /// Test UpdateUserInfo
        /// </summary>
        [Test]
        public void UpdateUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string key = null;
            //UserInfoRequest body = null;
            //var response = instance.UpdateUserInfo(userId, key, body);
            //Assert.IsInstanceOf<UserInfoResponse> (response, "response is UserInfoResponse");
        }
        
        /// <summary>
        /// Test UpdateUserPicture
        /// </summary>
        [Test]
        public void UpdateUserPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UpdateUserPicture(userId);
            
        }
        
    }

}
