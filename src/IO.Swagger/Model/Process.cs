/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// Process
    /// </summary>
    [DataContract]
    public partial class Process :  IEquatable<Process>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Process" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="XmlRowNumber">XmlRowNumber.</param>
        /// <param name="XmlColumnNumber">XmlColumnNumber.</param>
        /// <param name="ExtensionElements">ExtensionElements.</param>
        /// <param name="Attributes">Attributes.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Executable">Executable (default to false).</param>
        /// <param name="Documentation">Documentation.</param>
        /// <param name="IoSpecification">IoSpecification.</param>
        /// <param name="ExecutionListeners">ExecutionListeners.</param>
        /// <param name="Lanes">Lanes.</param>
        /// <param name="DataObjects">DataObjects.</param>
        /// <param name="CandidateStarterUsers">CandidateStarterUsers.</param>
        /// <param name="CandidateStarterGroups">CandidateStarterGroups.</param>
        /// <param name="EventListeners">EventListeners.</param>
        /// <param name="FlowElementMap">FlowElementMap.</param>
        /// <param name="InitialFlowElement">InitialFlowElement.</param>
        /// <param name="Artifacts">Artifacts.</param>
        /// <param name="FlowElements">FlowElements.</param>
        public Process(string Id = default(string), int? XmlRowNumber = default(int?), int? XmlColumnNumber = default(int?), Dictionary<string, List<ExtensionElement>> ExtensionElements = default(Dictionary<string, List<ExtensionElement>>), Dictionary<string, List<ExtensionAttribute>> Attributes = default(Dictionary<string, List<ExtensionAttribute>>), string Name = default(string), bool? Executable = false, string Documentation = default(string), IOSpecification IoSpecification = default(IOSpecification), List<ActivitiListener> ExecutionListeners = default(List<ActivitiListener>), List<Lane> Lanes = default(List<Lane>), List<ValuedDataObject> DataObjects = default(List<ValuedDataObject>), List<string> CandidateStarterUsers = default(List<string>), List<string> CandidateStarterGroups = default(List<string>), List<EventListener> EventListeners = default(List<EventListener>), Dictionary<string, FlowElement> FlowElementMap = default(Dictionary<string, FlowElement>), FlowElement InitialFlowElement = default(FlowElement), List<Artifact> Artifacts = default(List<Artifact>), List<FlowElement> FlowElements = default(List<FlowElement>))
        {
            this.Id = Id;
            this.XmlRowNumber = XmlRowNumber;
            this.XmlColumnNumber = XmlColumnNumber;
            this.ExtensionElements = ExtensionElements;
            this.Attributes = Attributes;
            this.Name = Name;
            // use default value if no "Executable" provided
            if (Executable == null)
            {
                this.Executable = false;
            }
            else
            {
                this.Executable = Executable;
            }
            this.Documentation = Documentation;
            this.IoSpecification = IoSpecification;
            this.ExecutionListeners = ExecutionListeners;
            this.Lanes = Lanes;
            this.DataObjects = DataObjects;
            this.CandidateStarterUsers = CandidateStarterUsers;
            this.CandidateStarterGroups = CandidateStarterGroups;
            this.EventListeners = EventListeners;
            this.FlowElementMap = FlowElementMap;
            this.InitialFlowElement = InitialFlowElement;
            this.Artifacts = Artifacts;
            this.FlowElements = FlowElements;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets XmlRowNumber
        /// </summary>
        [DataMember(Name="xmlRowNumber", EmitDefaultValue=false)]
        public int? XmlRowNumber { get; set; }

        /// <summary>
        /// Gets or Sets XmlColumnNumber
        /// </summary>
        [DataMember(Name="xmlColumnNumber", EmitDefaultValue=false)]
        public int? XmlColumnNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionElements
        /// </summary>
        [DataMember(Name="extensionElements", EmitDefaultValue=false)]
        public Dictionary<string, List<ExtensionElement>> ExtensionElements { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, List<ExtensionAttribute>> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Executable
        /// </summary>
        [DataMember(Name="executable", EmitDefaultValue=false)]
        public bool? Executable { get; set; }

        /// <summary>
        /// Gets or Sets Documentation
        /// </summary>
        [DataMember(Name="documentation", EmitDefaultValue=false)]
        public string Documentation { get; set; }

        /// <summary>
        /// Gets or Sets IoSpecification
        /// </summary>
        [DataMember(Name="ioSpecification", EmitDefaultValue=false)]
        public IOSpecification IoSpecification { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionListeners
        /// </summary>
        [DataMember(Name="executionListeners", EmitDefaultValue=false)]
        public List<ActivitiListener> ExecutionListeners { get; set; }

        /// <summary>
        /// Gets or Sets Lanes
        /// </summary>
        [DataMember(Name="lanes", EmitDefaultValue=false)]
        public List<Lane> Lanes { get; set; }

        /// <summary>
        /// Gets or Sets DataObjects
        /// </summary>
        [DataMember(Name="dataObjects", EmitDefaultValue=false)]
        public List<ValuedDataObject> DataObjects { get; set; }

        /// <summary>
        /// Gets or Sets CandidateStarterUsers
        /// </summary>
        [DataMember(Name="candidateStarterUsers", EmitDefaultValue=false)]
        public List<string> CandidateStarterUsers { get; set; }

        /// <summary>
        /// Gets or Sets CandidateStarterGroups
        /// </summary>
        [DataMember(Name="candidateStarterGroups", EmitDefaultValue=false)]
        public List<string> CandidateStarterGroups { get; set; }

        /// <summary>
        /// Gets or Sets EventListeners
        /// </summary>
        [DataMember(Name="eventListeners", EmitDefaultValue=false)]
        public List<EventListener> EventListeners { get; set; }

        /// <summary>
        /// Gets or Sets FlowElementMap
        /// </summary>
        [DataMember(Name="flowElementMap", EmitDefaultValue=false)]
        public Dictionary<string, FlowElement> FlowElementMap { get; set; }

        /// <summary>
        /// Gets or Sets InitialFlowElement
        /// </summary>
        [DataMember(Name="initialFlowElement", EmitDefaultValue=false)]
        public FlowElement InitialFlowElement { get; set; }

        /// <summary>
        /// Gets or Sets Artifacts
        /// </summary>
        [DataMember(Name="artifacts", EmitDefaultValue=false)]
        public List<Artifact> Artifacts { get; set; }

        /// <summary>
        /// Gets or Sets FlowElements
        /// </summary>
        [DataMember(Name="flowElements", EmitDefaultValue=false)]
        public List<FlowElement> FlowElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Process {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  XmlRowNumber: ").Append(XmlRowNumber).Append("\n");
            sb.Append("  XmlColumnNumber: ").Append(XmlColumnNumber).Append("\n");
            sb.Append("  ExtensionElements: ").Append(ExtensionElements).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Executable: ").Append(Executable).Append("\n");
            sb.Append("  Documentation: ").Append(Documentation).Append("\n");
            sb.Append("  IoSpecification: ").Append(IoSpecification).Append("\n");
            sb.Append("  ExecutionListeners: ").Append(ExecutionListeners).Append("\n");
            sb.Append("  Lanes: ").Append(Lanes).Append("\n");
            sb.Append("  DataObjects: ").Append(DataObjects).Append("\n");
            sb.Append("  CandidateStarterUsers: ").Append(CandidateStarterUsers).Append("\n");
            sb.Append("  CandidateStarterGroups: ").Append(CandidateStarterGroups).Append("\n");
            sb.Append("  EventListeners: ").Append(EventListeners).Append("\n");
            sb.Append("  FlowElementMap: ").Append(FlowElementMap).Append("\n");
            sb.Append("  InitialFlowElement: ").Append(InitialFlowElement).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("  FlowElements: ").Append(FlowElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Process);
        }

        /// <summary>
        /// Returns true if Process instances are equal
        /// </summary>
        /// <param name="input">Instance of Process to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Process input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.XmlRowNumber == input.XmlRowNumber ||
                    (this.XmlRowNumber != null &&
                    this.XmlRowNumber.Equals(input.XmlRowNumber))
                ) && 
                (
                    this.XmlColumnNumber == input.XmlColumnNumber ||
                    (this.XmlColumnNumber != null &&
                    this.XmlColumnNumber.Equals(input.XmlColumnNumber))
                ) && 
                (
                    this.ExtensionElements == input.ExtensionElements ||
                    this.ExtensionElements != null &&
                    this.ExtensionElements.SequenceEqual(input.ExtensionElements)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Executable == input.Executable ||
                    (this.Executable != null &&
                    this.Executable.Equals(input.Executable))
                ) && 
                (
                    this.Documentation == input.Documentation ||
                    (this.Documentation != null &&
                    this.Documentation.Equals(input.Documentation))
                ) && 
                (
                    this.IoSpecification == input.IoSpecification ||
                    (this.IoSpecification != null &&
                    this.IoSpecification.Equals(input.IoSpecification))
                ) && 
                (
                    this.ExecutionListeners == input.ExecutionListeners ||
                    this.ExecutionListeners != null &&
                    this.ExecutionListeners.SequenceEqual(input.ExecutionListeners)
                ) && 
                (
                    this.Lanes == input.Lanes ||
                    this.Lanes != null &&
                    this.Lanes.SequenceEqual(input.Lanes)
                ) && 
                (
                    this.DataObjects == input.DataObjects ||
                    this.DataObjects != null &&
                    this.DataObjects.SequenceEqual(input.DataObjects)
                ) && 
                (
                    this.CandidateStarterUsers == input.CandidateStarterUsers ||
                    this.CandidateStarterUsers != null &&
                    this.CandidateStarterUsers.SequenceEqual(input.CandidateStarterUsers)
                ) && 
                (
                    this.CandidateStarterGroups == input.CandidateStarterGroups ||
                    this.CandidateStarterGroups != null &&
                    this.CandidateStarterGroups.SequenceEqual(input.CandidateStarterGroups)
                ) && 
                (
                    this.EventListeners == input.EventListeners ||
                    this.EventListeners != null &&
                    this.EventListeners.SequenceEqual(input.EventListeners)
                ) && 
                (
                    this.FlowElementMap == input.FlowElementMap ||
                    this.FlowElementMap != null &&
                    this.FlowElementMap.SequenceEqual(input.FlowElementMap)
                ) && 
                (
                    this.InitialFlowElement == input.InitialFlowElement ||
                    (this.InitialFlowElement != null &&
                    this.InitialFlowElement.Equals(input.InitialFlowElement))
                ) && 
                (
                    this.Artifacts == input.Artifacts ||
                    this.Artifacts != null &&
                    this.Artifacts.SequenceEqual(input.Artifacts)
                ) && 
                (
                    this.FlowElements == input.FlowElements ||
                    this.FlowElements != null &&
                    this.FlowElements.SequenceEqual(input.FlowElements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.XmlRowNumber != null)
                    hashCode = hashCode * 59 + this.XmlRowNumber.GetHashCode();
                if (this.XmlColumnNumber != null)
                    hashCode = hashCode * 59 + this.XmlColumnNumber.GetHashCode();
                if (this.ExtensionElements != null)
                    hashCode = hashCode * 59 + this.ExtensionElements.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Executable != null)
                    hashCode = hashCode * 59 + this.Executable.GetHashCode();
                if (this.Documentation != null)
                    hashCode = hashCode * 59 + this.Documentation.GetHashCode();
                if (this.IoSpecification != null)
                    hashCode = hashCode * 59 + this.IoSpecification.GetHashCode();
                if (this.ExecutionListeners != null)
                    hashCode = hashCode * 59 + this.ExecutionListeners.GetHashCode();
                if (this.Lanes != null)
                    hashCode = hashCode * 59 + this.Lanes.GetHashCode();
                if (this.DataObjects != null)
                    hashCode = hashCode * 59 + this.DataObjects.GetHashCode();
                if (this.CandidateStarterUsers != null)
                    hashCode = hashCode * 59 + this.CandidateStarterUsers.GetHashCode();
                if (this.CandidateStarterGroups != null)
                    hashCode = hashCode * 59 + this.CandidateStarterGroups.GetHashCode();
                if (this.EventListeners != null)
                    hashCode = hashCode * 59 + this.EventListeners.GetHashCode();
                if (this.FlowElementMap != null)
                    hashCode = hashCode * 59 + this.FlowElementMap.GetHashCode();
                if (this.InitialFlowElement != null)
                    hashCode = hashCode * 59 + this.InitialFlowElement.GetHashCode();
                if (this.Artifacts != null)
                    hashCode = hashCode * 59 + this.Artifacts.GetHashCode();
                if (this.FlowElements != null)
                    hashCode = hashCode * 59 + this.FlowElements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
