/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// ExecutionActionRequest
    /// </summary>
    [DataContract]
    public partial class ExecutionActionRequest :  IEquatable<ExecutionActionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionActionRequest" /> class.
        /// </summary>
        /// <param name="Action">Action.</param>
        /// <param name="SignalName">SignalName.</param>
        /// <param name="MessageName">MessageName.</param>
        /// <param name="Variables">Variables.</param>
        /// <param name="TransientVariables">TransientVariables.</param>
        public ExecutionActionRequest(string Action = default(string), string SignalName = default(string), string MessageName = default(string), List<RestVariable> Variables = default(List<RestVariable>), List<RestVariable> TransientVariables = default(List<RestVariable>))
        {
            this.Action = Action;
            this.SignalName = SignalName;
            this.MessageName = MessageName;
            this.Variables = Variables;
            this.TransientVariables = TransientVariables;
        }
        
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets SignalName
        /// </summary>
        [DataMember(Name="signalName", EmitDefaultValue=false)]
        public string SignalName { get; set; }

        /// <summary>
        /// Gets or Sets MessageName
        /// </summary>
        [DataMember(Name="messageName", EmitDefaultValue=false)]
        public string MessageName { get; set; }

        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<RestVariable> Variables { get; set; }

        /// <summary>
        /// Gets or Sets TransientVariables
        /// </summary>
        [DataMember(Name="transientVariables", EmitDefaultValue=false)]
        public List<RestVariable> TransientVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecutionActionRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  SignalName: ").Append(SignalName).Append("\n");
            sb.Append("  MessageName: ").Append(MessageName).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  TransientVariables: ").Append(TransientVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutionActionRequest);
        }

        /// <summary>
        /// Returns true if ExecutionActionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutionActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutionActionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.SignalName == input.SignalName ||
                    (this.SignalName != null &&
                    this.SignalName.Equals(input.SignalName))
                ) && 
                (
                    this.MessageName == input.MessageName ||
                    (this.MessageName != null &&
                    this.MessageName.Equals(input.MessageName))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.TransientVariables == input.TransientVariables ||
                    this.TransientVariables != null &&
                    this.TransientVariables.SequenceEqual(input.TransientVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.SignalName != null)
                    hashCode = hashCode * 59 + this.SignalName.GetHashCode();
                if (this.MessageName != null)
                    hashCode = hashCode * 59 + this.MessageName.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                if (this.TransientVariables != null)
                    hashCode = hashCode * 59 + this.TransientVariables.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
