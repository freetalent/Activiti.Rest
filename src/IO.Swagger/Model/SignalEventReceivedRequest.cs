/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// SignalEventReceivedRequest
    /// </summary>
    [DataContract]
    public partial class SignalEventReceivedRequest :  IEquatable<SignalEventReceivedRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalEventReceivedRequest" /> class.
        /// </summary>
        /// <param name="SignalName">Name of the signal.</param>
        /// <param name="Variables">Array of variables (in the general variables format) to use as payload to pass along with the signal. Cannot be used in case async is set to true, this will result in an error..</param>
        /// <param name="TenantId">ID of the tenant that the signal event should be processed in.</param>
        /// <param name="Async">If true, handling of the signal will happen asynchronously. Return code will be 202 - Accepted to indicate the request is accepted but not yet executed. If false,                     handling the signal will be done immediately and result (200 - OK) will only return after this completed successfully. Defaults to false if omitted. (default to false).</param>
        public SignalEventReceivedRequest(string SignalName = default(string), List<RestVariable> Variables = default(List<RestVariable>), string TenantId = default(string), bool? Async = false)
        {
            this.SignalName = SignalName;
            this.Variables = Variables;
            this.TenantId = TenantId;
            // use default value if no "Async" provided
            if (Async == null)
            {
                this.Async = false;
            }
            else
            {
                this.Async = Async;
            }
        }
        
        /// <summary>
        /// Name of the signal
        /// </summary>
        /// <value>Name of the signal</value>
        [DataMember(Name="signalName", EmitDefaultValue=false)]
        public string SignalName { get; set; }

        /// <summary>
        /// Array of variables (in the general variables format) to use as payload to pass along with the signal. Cannot be used in case async is set to true, this will result in an error.
        /// </summary>
        /// <value>Array of variables (in the general variables format) to use as payload to pass along with the signal. Cannot be used in case async is set to true, this will result in an error.</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<RestVariable> Variables { get; set; }

        /// <summary>
        /// ID of the tenant that the signal event should be processed in
        /// </summary>
        /// <value>ID of the tenant that the signal event should be processed in</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// If true, handling of the signal will happen asynchronously. Return code will be 202 - Accepted to indicate the request is accepted but not yet executed. If false,                     handling the signal will be done immediately and result (200 - OK) will only return after this completed successfully. Defaults to false if omitted.
        /// </summary>
        /// <value>If true, handling of the signal will happen asynchronously. Return code will be 202 - Accepted to indicate the request is accepted but not yet executed. If false,                     handling the signal will be done immediately and result (200 - OK) will only return after this completed successfully. Defaults to false if omitted.</value>
        [DataMember(Name="async", EmitDefaultValue=false)]
        public bool? Async { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignalEventReceivedRequest {\n");
            sb.Append("  SignalName: ").Append(SignalName).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Async: ").Append(Async).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalEventReceivedRequest);
        }

        /// <summary>
        /// Returns true if SignalEventReceivedRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalEventReceivedRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalEventReceivedRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignalName == input.SignalName ||
                    (this.SignalName != null &&
                    this.SignalName.Equals(input.SignalName))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Async == input.Async ||
                    (this.Async != null &&
                    this.Async.Equals(input.Async))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignalName != null)
                    hashCode = hashCode * 59 + this.SignalName.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Async != null)
                    hashCode = hashCode * 59 + this.Async.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
