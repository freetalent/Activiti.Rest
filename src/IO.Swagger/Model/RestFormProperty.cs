/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// RestFormProperty
    /// </summary>
    [DataContract]
    public partial class RestFormProperty :  IEquatable<RestFormProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestFormProperty" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Value">Value.</param>
        /// <param name="Readable">Readable (default to false).</param>
        /// <param name="Writable">Writable (default to false).</param>
        /// <param name="Required">Required (default to false).</param>
        /// <param name="DatePattern">DatePattern.</param>
        /// <param name="EnumValues">EnumValues.</param>
        public RestFormProperty(string Id = default(string), string Name = default(string), string Type = default(string), string Value = default(string), bool? Readable = false, bool? Writable = false, bool? Required = false, string DatePattern = default(string), List<RestEnumFormProperty> EnumValues = default(List<RestEnumFormProperty>))
        {
            this.Id = Id;
            this.Name = Name;
            this.Type = Type;
            this.Value = Value;
            // use default value if no "Readable" provided
            if (Readable == null)
            {
                this.Readable = false;
            }
            else
            {
                this.Readable = Readable;
            }
            // use default value if no "Writable" provided
            if (Writable == null)
            {
                this.Writable = false;
            }
            else
            {
                this.Writable = Writable;
            }
            // use default value if no "Required" provided
            if (Required == null)
            {
                this.Required = false;
            }
            else
            {
                this.Required = Required;
            }
            this.DatePattern = DatePattern;
            this.EnumValues = EnumValues;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Readable
        /// </summary>
        [DataMember(Name="readable", EmitDefaultValue=false)]
        public bool? Readable { get; set; }

        /// <summary>
        /// Gets or Sets Writable
        /// </summary>
        [DataMember(Name="writable", EmitDefaultValue=false)]
        public bool? Writable { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets DatePattern
        /// </summary>
        [DataMember(Name="datePattern", EmitDefaultValue=false)]
        public string DatePattern { get; set; }

        /// <summary>
        /// Gets or Sets EnumValues
        /// </summary>
        [DataMember(Name="enumValues", EmitDefaultValue=false)]
        public List<RestEnumFormProperty> EnumValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestFormProperty {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Readable: ").Append(Readable).Append("\n");
            sb.Append("  Writable: ").Append(Writable).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  DatePattern: ").Append(DatePattern).Append("\n");
            sb.Append("  EnumValues: ").Append(EnumValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestFormProperty);
        }

        /// <summary>
        /// Returns true if RestFormProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of RestFormProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestFormProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Readable == input.Readable ||
                    (this.Readable != null &&
                    this.Readable.Equals(input.Readable))
                ) && 
                (
                    this.Writable == input.Writable ||
                    (this.Writable != null &&
                    this.Writable.Equals(input.Writable))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.DatePattern == input.DatePattern ||
                    (this.DatePattern != null &&
                    this.DatePattern.Equals(input.DatePattern))
                ) && 
                (
                    this.EnumValues == input.EnumValues ||
                    this.EnumValues != null &&
                    this.EnumValues.SequenceEqual(input.EnumValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Readable != null)
                    hashCode = hashCode * 59 + this.Readable.GetHashCode();
                if (this.Writable != null)
                    hashCode = hashCode * 59 + this.Writable.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.DatePattern != null)
                    hashCode = hashCode * 59 + this.DatePattern.GetHashCode();
                if (this.EnumValues != null)
                    hashCode = hashCode * 59 + this.EnumValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
