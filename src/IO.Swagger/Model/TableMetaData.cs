/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// TableMetaData
    /// </summary>
    [DataContract]
    public partial class TableMetaData :  IEquatable<TableMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableMetaData" /> class.
        /// </summary>
        /// <param name="TableName">TableName.</param>
        /// <param name="ColumnNames">ColumnNames.</param>
        /// <param name="ColumnTypes">ColumnTypes.</param>
        public TableMetaData(string TableName = default(string), List<string> ColumnNames = default(List<string>), List<string> ColumnTypes = default(List<string>))
        {
            this.TableName = TableName;
            this.ColumnNames = ColumnNames;
            this.ColumnTypes = ColumnTypes;
        }
        
        /// <summary>
        /// Gets or Sets TableName
        /// </summary>
        [DataMember(Name="tableName", EmitDefaultValue=false)]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or Sets ColumnNames
        /// </summary>
        [DataMember(Name="columnNames", EmitDefaultValue=false)]
        public List<string> ColumnNames { get; set; }

        /// <summary>
        /// Gets or Sets ColumnTypes
        /// </summary>
        [DataMember(Name="columnTypes", EmitDefaultValue=false)]
        public List<string> ColumnTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableMetaData {\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("  ColumnNames: ").Append(ColumnNames).Append("\n");
            sb.Append("  ColumnTypes: ").Append(ColumnTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableMetaData);
        }

        /// <summary>
        /// Returns true if TableMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of TableMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableMetaData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TableName == input.TableName ||
                    (this.TableName != null &&
                    this.TableName.Equals(input.TableName))
                ) && 
                (
                    this.ColumnNames == input.ColumnNames ||
                    this.ColumnNames != null &&
                    this.ColumnNames.SequenceEqual(input.ColumnNames)
                ) && 
                (
                    this.ColumnTypes == input.ColumnTypes ||
                    this.ColumnTypes != null &&
                    this.ColumnTypes.SequenceEqual(input.ColumnTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TableName != null)
                    hashCode = hashCode * 59 + this.TableName.GetHashCode();
                if (this.ColumnNames != null)
                    hashCode = hashCode * 59 + this.ColumnNames.GetHashCode();
                if (this.ColumnTypes != null)
                    hashCode = hashCode * 59 + this.ColumnTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
