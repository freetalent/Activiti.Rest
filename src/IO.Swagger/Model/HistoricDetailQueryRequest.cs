/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// HistoricDetailQueryRequest
    /// </summary>
    [DataContract]
    public partial class HistoricDetailQueryRequest :  IEquatable<HistoricDetailQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricDetailQueryRequest" /> class.
        /// </summary>
        /// <param name="Start">Start.</param>
        /// <param name="Size">Size.</param>
        /// <param name="Sort">Sort.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="ExecutionId">ExecutionId.</param>
        /// <param name="ActivityInstanceId">ActivityInstanceId.</param>
        /// <param name="TaskId">TaskId.</param>
        /// <param name="SelectOnlyFormProperties">SelectOnlyFormProperties (default to false).</param>
        /// <param name="SelectOnlyVariableUpdates">SelectOnlyVariableUpdates (default to false).</param>
        public HistoricDetailQueryRequest(int? Start = default(int?), int? Size = default(int?), string Sort = default(string), string Order = default(string), string Id = default(string), string ProcessInstanceId = default(string), string ExecutionId = default(string), string ActivityInstanceId = default(string), string TaskId = default(string), bool? SelectOnlyFormProperties = false, bool? SelectOnlyVariableUpdates = false)
        {
            this.Start = Start;
            this.Size = Size;
            this.Sort = Sort;
            this.Order = Order;
            this.Id = Id;
            this.ProcessInstanceId = ProcessInstanceId;
            this.ExecutionId = ExecutionId;
            this.ActivityInstanceId = ActivityInstanceId;
            this.TaskId = TaskId;
            // use default value if no "SelectOnlyFormProperties" provided
            if (SelectOnlyFormProperties == null)
            {
                this.SelectOnlyFormProperties = false;
            }
            else
            {
                this.SelectOnlyFormProperties = SelectOnlyFormProperties;
            }
            // use default value if no "SelectOnlyVariableUpdates" provided
            if (SelectOnlyVariableUpdates == null)
            {
                this.SelectOnlyVariableUpdates = false;
            }
            else
            {
                this.SelectOnlyVariableUpdates = SelectOnlyVariableUpdates;
            }
        }
        
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionId
        /// </summary>
        [DataMember(Name="executionId", EmitDefaultValue=false)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets ActivityInstanceId
        /// </summary>
        [DataMember(Name="activityInstanceId", EmitDefaultValue=false)]
        public string ActivityInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets SelectOnlyFormProperties
        /// </summary>
        [DataMember(Name="selectOnlyFormProperties", EmitDefaultValue=false)]
        public bool? SelectOnlyFormProperties { get; set; }

        /// <summary>
        /// Gets or Sets SelectOnlyVariableUpdates
        /// </summary>
        [DataMember(Name="selectOnlyVariableUpdates", EmitDefaultValue=false)]
        public bool? SelectOnlyVariableUpdates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricDetailQueryRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  ActivityInstanceId: ").Append(ActivityInstanceId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  SelectOnlyFormProperties: ").Append(SelectOnlyFormProperties).Append("\n");
            sb.Append("  SelectOnlyVariableUpdates: ").Append(SelectOnlyVariableUpdates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricDetailQueryRequest);
        }

        /// <summary>
        /// Returns true if HistoricDetailQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricDetailQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricDetailQueryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.ActivityInstanceId == input.ActivityInstanceId ||
                    (this.ActivityInstanceId != null &&
                    this.ActivityInstanceId.Equals(input.ActivityInstanceId))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.SelectOnlyFormProperties == input.SelectOnlyFormProperties ||
                    (this.SelectOnlyFormProperties != null &&
                    this.SelectOnlyFormProperties.Equals(input.SelectOnlyFormProperties))
                ) && 
                (
                    this.SelectOnlyVariableUpdates == input.SelectOnlyVariableUpdates ||
                    (this.SelectOnlyVariableUpdates != null &&
                    this.SelectOnlyVariableUpdates.Equals(input.SelectOnlyVariableUpdates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.ActivityInstanceId != null)
                    hashCode = hashCode * 59 + this.ActivityInstanceId.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.SelectOnlyFormProperties != null)
                    hashCode = hashCode * 59 + this.SelectOnlyFormProperties.GetHashCode();
                if (this.SelectOnlyVariableUpdates != null)
                    hashCode = hashCode * 59 + this.SelectOnlyVariableUpdates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
