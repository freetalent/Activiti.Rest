/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// TaskQueryRequest
    /// </summary>
    [DataContract]
    public partial class TaskQueryRequest :  IEquatable<TaskQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskQueryRequest" /> class.
        /// </summary>
        /// <param name="Start">Start.</param>
        /// <param name="Size">Size.</param>
        /// <param name="Sort">Sort.</param>
        /// <param name="Order">Order.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NameLike">NameLike.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DescriptionLike">DescriptionLike.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="MinimumPriority">MinimumPriority.</param>
        /// <param name="MaximumPriority">MaximumPriority.</param>
        /// <param name="Assignee">Assignee.</param>
        /// <param name="AssigneeLike">AssigneeLike.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="OwnerLike">OwnerLike.</param>
        /// <param name="Unassigned">Unassigned (default to false).</param>
        /// <param name="DelegationState">DelegationState.</param>
        /// <param name="CandidateUser">CandidateUser.</param>
        /// <param name="CandidateGroup">CandidateGroup.</param>
        /// <param name="CandidateGroupIn">CandidateGroupIn.</param>
        /// <param name="InvolvedUser">InvolvedUser.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="ProcessInstanceBusinessKey">ProcessInstanceBusinessKey.</param>
        /// <param name="ProcessInstanceBusinessKeyLike">ProcessInstanceBusinessKeyLike.</param>
        /// <param name="ProcessInstanceIdIn">ProcessInstanceIdIn.</param>
        /// <param name="ProcessDefinitionId">ProcessDefinitionId.</param>
        /// <param name="ProcessDefinitionKey">ProcessDefinitionKey.</param>
        /// <param name="ProcessDefinitionName">ProcessDefinitionName.</param>
        /// <param name="ProcessDefinitionKeyLike">ProcessDefinitionKeyLike.</param>
        /// <param name="ProcessDefinitionNameLike">ProcessDefinitionNameLike.</param>
        /// <param name="ExecutionId">ExecutionId.</param>
        /// <param name="CreatedOn">CreatedOn.</param>
        /// <param name="CreatedBefore">CreatedBefore.</param>
        /// <param name="CreatedAfter">CreatedAfter.</param>
        /// <param name="ExcludeSubTasks">ExcludeSubTasks (default to false).</param>
        /// <param name="TaskDefinitionKey">TaskDefinitionKey.</param>
        /// <param name="TaskDefinitionKeyLike">TaskDefinitionKeyLike.</param>
        /// <param name="DueDate">DueDate.</param>
        /// <param name="DueBefore">DueBefore.</param>
        /// <param name="DueAfter">DueAfter.</param>
        /// <param name="WithoutDueDate">WithoutDueDate (default to false).</param>
        /// <param name="Active">Active (default to false).</param>
        /// <param name="IncludeTaskLocalVariables">IncludeTaskLocalVariables (default to false).</param>
        /// <param name="IncludeProcessVariables">IncludeProcessVariables (default to false).</param>
        /// <param name="TenantId">TenantId.</param>
        /// <param name="TenantIdLike">TenantIdLike.</param>
        /// <param name="WithoutTenantId">WithoutTenantId (default to false).</param>
        /// <param name="CandidateOrAssigned">CandidateOrAssigned.</param>
        /// <param name="Category">Category.</param>
        /// <param name="TaskVariables">TaskVariables.</param>
        /// <param name="ProcessInstanceVariables">ProcessInstanceVariables.</param>
        public TaskQueryRequest(int? Start = default(int?), int? Size = default(int?), string Sort = default(string), string Order = default(string), string Name = default(string), string NameLike = default(string), string Description = default(string), string DescriptionLike = default(string), int? Priority = default(int?), int? MinimumPriority = default(int?), int? MaximumPriority = default(int?), string Assignee = default(string), string AssigneeLike = default(string), string Owner = default(string), string OwnerLike = default(string), bool? Unassigned = false, string DelegationState = default(string), string CandidateUser = default(string), string CandidateGroup = default(string), List<string> CandidateGroupIn = default(List<string>), string InvolvedUser = default(string), string ProcessInstanceId = default(string), string ProcessInstanceBusinessKey = default(string), string ProcessInstanceBusinessKeyLike = default(string), List<string> ProcessInstanceIdIn = default(List<string>), string ProcessDefinitionId = default(string), string ProcessDefinitionKey = default(string), string ProcessDefinitionName = default(string), string ProcessDefinitionKeyLike = default(string), string ProcessDefinitionNameLike = default(string), string ExecutionId = default(string), DateTime? CreatedOn = default(DateTime?), DateTime? CreatedBefore = default(DateTime?), DateTime? CreatedAfter = default(DateTime?), bool? ExcludeSubTasks = false, string TaskDefinitionKey = default(string), string TaskDefinitionKeyLike = default(string), DateTime? DueDate = default(DateTime?), DateTime? DueBefore = default(DateTime?), DateTime? DueAfter = default(DateTime?), bool? WithoutDueDate = false, bool? Active = false, bool? IncludeTaskLocalVariables = false, bool? IncludeProcessVariables = false, string TenantId = default(string), string TenantIdLike = default(string), bool? WithoutTenantId = false, string CandidateOrAssigned = default(string), string Category = default(string), List<QueryVariable> TaskVariables = default(List<QueryVariable>), List<QueryVariable> ProcessInstanceVariables = default(List<QueryVariable>))
        {
            this.Start = Start;
            this.Size = Size;
            this.Sort = Sort;
            this.Order = Order;
            this.Name = Name;
            this.NameLike = NameLike;
            this.Description = Description;
            this.DescriptionLike = DescriptionLike;
            this.Priority = Priority;
            this.MinimumPriority = MinimumPriority;
            this.MaximumPriority = MaximumPriority;
            this.Assignee = Assignee;
            this.AssigneeLike = AssigneeLike;
            this.Owner = Owner;
            this.OwnerLike = OwnerLike;
            // use default value if no "Unassigned" provided
            if (Unassigned == null)
            {
                this.Unassigned = false;
            }
            else
            {
                this.Unassigned = Unassigned;
            }
            this.DelegationState = DelegationState;
            this.CandidateUser = CandidateUser;
            this.CandidateGroup = CandidateGroup;
            this.CandidateGroupIn = CandidateGroupIn;
            this.InvolvedUser = InvolvedUser;
            this.ProcessInstanceId = ProcessInstanceId;
            this.ProcessInstanceBusinessKey = ProcessInstanceBusinessKey;
            this.ProcessInstanceBusinessKeyLike = ProcessInstanceBusinessKeyLike;
            this.ProcessInstanceIdIn = ProcessInstanceIdIn;
            this.ProcessDefinitionId = ProcessDefinitionId;
            this.ProcessDefinitionKey = ProcessDefinitionKey;
            this.ProcessDefinitionName = ProcessDefinitionName;
            this.ProcessDefinitionKeyLike = ProcessDefinitionKeyLike;
            this.ProcessDefinitionNameLike = ProcessDefinitionNameLike;
            this.ExecutionId = ExecutionId;
            this.CreatedOn = CreatedOn;
            this.CreatedBefore = CreatedBefore;
            this.CreatedAfter = CreatedAfter;
            // use default value if no "ExcludeSubTasks" provided
            if (ExcludeSubTasks == null)
            {
                this.ExcludeSubTasks = false;
            }
            else
            {
                this.ExcludeSubTasks = ExcludeSubTasks;
            }
            this.TaskDefinitionKey = TaskDefinitionKey;
            this.TaskDefinitionKeyLike = TaskDefinitionKeyLike;
            this.DueDate = DueDate;
            this.DueBefore = DueBefore;
            this.DueAfter = DueAfter;
            // use default value if no "WithoutDueDate" provided
            if (WithoutDueDate == null)
            {
                this.WithoutDueDate = false;
            }
            else
            {
                this.WithoutDueDate = WithoutDueDate;
            }
            // use default value if no "Active" provided
            if (Active == null)
            {
                this.Active = false;
            }
            else
            {
                this.Active = Active;
            }
            // use default value if no "IncludeTaskLocalVariables" provided
            if (IncludeTaskLocalVariables == null)
            {
                this.IncludeTaskLocalVariables = false;
            }
            else
            {
                this.IncludeTaskLocalVariables = IncludeTaskLocalVariables;
            }
            // use default value if no "IncludeProcessVariables" provided
            if (IncludeProcessVariables == null)
            {
                this.IncludeProcessVariables = false;
            }
            else
            {
                this.IncludeProcessVariables = IncludeProcessVariables;
            }
            this.TenantId = TenantId;
            this.TenantIdLike = TenantIdLike;
            // use default value if no "WithoutTenantId" provided
            if (WithoutTenantId == null)
            {
                this.WithoutTenantId = false;
            }
            else
            {
                this.WithoutTenantId = WithoutTenantId;
            }
            this.CandidateOrAssigned = CandidateOrAssigned;
            this.Category = Category;
            this.TaskVariables = TaskVariables;
            this.ProcessInstanceVariables = ProcessInstanceVariables;
        }
        
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NameLike
        /// </summary>
        [DataMember(Name="nameLike", EmitDefaultValue=false)]
        public string NameLike { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionLike
        /// </summary>
        [DataMember(Name="descriptionLike", EmitDefaultValue=false)]
        public string DescriptionLike { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPriority
        /// </summary>
        [DataMember(Name="minimumPriority", EmitDefaultValue=false)]
        public int? MinimumPriority { get; set; }

        /// <summary>
        /// Gets or Sets MaximumPriority
        /// </summary>
        [DataMember(Name="maximumPriority", EmitDefaultValue=false)]
        public int? MaximumPriority { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public string Assignee { get; set; }

        /// <summary>
        /// Gets or Sets AssigneeLike
        /// </summary>
        [DataMember(Name="assigneeLike", EmitDefaultValue=false)]
        public string AssigneeLike { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerLike
        /// </summary>
        [DataMember(Name="ownerLike", EmitDefaultValue=false)]
        public string OwnerLike { get; set; }

        /// <summary>
        /// Gets or Sets Unassigned
        /// </summary>
        [DataMember(Name="unassigned", EmitDefaultValue=false)]
        public bool? Unassigned { get; set; }

        /// <summary>
        /// Gets or Sets DelegationState
        /// </summary>
        [DataMember(Name="delegationState", EmitDefaultValue=false)]
        public string DelegationState { get; set; }

        /// <summary>
        /// Gets or Sets CandidateUser
        /// </summary>
        [DataMember(Name="candidateUser", EmitDefaultValue=false)]
        public string CandidateUser { get; set; }

        /// <summary>
        /// Gets or Sets CandidateGroup
        /// </summary>
        [DataMember(Name="candidateGroup", EmitDefaultValue=false)]
        public string CandidateGroup { get; set; }

        /// <summary>
        /// Gets or Sets CandidateGroupIn
        /// </summary>
        [DataMember(Name="candidateGroupIn", EmitDefaultValue=false)]
        public List<string> CandidateGroupIn { get; set; }

        /// <summary>
        /// Gets or Sets InvolvedUser
        /// </summary>
        [DataMember(Name="involvedUser", EmitDefaultValue=false)]
        public string InvolvedUser { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceBusinessKey
        /// </summary>
        [DataMember(Name="processInstanceBusinessKey", EmitDefaultValue=false)]
        public string ProcessInstanceBusinessKey { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceBusinessKeyLike
        /// </summary>
        [DataMember(Name="processInstanceBusinessKeyLike", EmitDefaultValue=false)]
        public string ProcessInstanceBusinessKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceIdIn
        /// </summary>
        [DataMember(Name="processInstanceIdIn", EmitDefaultValue=false)]
        public List<string> ProcessInstanceIdIn { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionId
        /// </summary>
        [DataMember(Name="processDefinitionId", EmitDefaultValue=false)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionKey
        /// </summary>
        [DataMember(Name="processDefinitionKey", EmitDefaultValue=false)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionName
        /// </summary>
        [DataMember(Name="processDefinitionName", EmitDefaultValue=false)]
        public string ProcessDefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionKeyLike
        /// </summary>
        [DataMember(Name="processDefinitionKeyLike", EmitDefaultValue=false)]
        public string ProcessDefinitionKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionNameLike
        /// </summary>
        [DataMember(Name="processDefinitionNameLike", EmitDefaultValue=false)]
        public string ProcessDefinitionNameLike { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionId
        /// </summary>
        [DataMember(Name="executionId", EmitDefaultValue=false)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOn
        /// </summary>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBefore
        /// </summary>
        [DataMember(Name="createdBefore", EmitDefaultValue=false)]
        public DateTime? CreatedBefore { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAfter
        /// </summary>
        [DataMember(Name="createdAfter", EmitDefaultValue=false)]
        public DateTime? CreatedAfter { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeSubTasks
        /// </summary>
        [DataMember(Name="excludeSubTasks", EmitDefaultValue=false)]
        public bool? ExcludeSubTasks { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinitionKey
        /// </summary>
        [DataMember(Name="taskDefinitionKey", EmitDefaultValue=false)]
        public string TaskDefinitionKey { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinitionKeyLike
        /// </summary>
        [DataMember(Name="taskDefinitionKeyLike", EmitDefaultValue=false)]
        public string TaskDefinitionKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueBefore
        /// </summary>
        [DataMember(Name="dueBefore", EmitDefaultValue=false)]
        public DateTime? DueBefore { get; set; }

        /// <summary>
        /// Gets or Sets DueAfter
        /// </summary>
        [DataMember(Name="dueAfter", EmitDefaultValue=false)]
        public DateTime? DueAfter { get; set; }

        /// <summary>
        /// Gets or Sets WithoutDueDate
        /// </summary>
        [DataMember(Name="withoutDueDate", EmitDefaultValue=false)]
        public bool? WithoutDueDate { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTaskLocalVariables
        /// </summary>
        [DataMember(Name="includeTaskLocalVariables", EmitDefaultValue=false)]
        public bool? IncludeTaskLocalVariables { get; set; }

        /// <summary>
        /// Gets or Sets IncludeProcessVariables
        /// </summary>
        [DataMember(Name="includeProcessVariables", EmitDefaultValue=false)]
        public bool? IncludeProcessVariables { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets TenantIdLike
        /// </summary>
        [DataMember(Name="tenantIdLike", EmitDefaultValue=false)]
        public string TenantIdLike { get; set; }

        /// <summary>
        /// Gets or Sets WithoutTenantId
        /// </summary>
        [DataMember(Name="withoutTenantId", EmitDefaultValue=false)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Gets or Sets CandidateOrAssigned
        /// </summary>
        [DataMember(Name="candidateOrAssigned", EmitDefaultValue=false)]
        public string CandidateOrAssigned { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets TaskVariables
        /// </summary>
        [DataMember(Name="taskVariables", EmitDefaultValue=false)]
        public List<QueryVariable> TaskVariables { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceVariables
        /// </summary>
        [DataMember(Name="processInstanceVariables", EmitDefaultValue=false)]
        public List<QueryVariable> ProcessInstanceVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskQueryRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameLike: ").Append(NameLike).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionLike: ").Append(DescriptionLike).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  MinimumPriority: ").Append(MinimumPriority).Append("\n");
            sb.Append("  MaximumPriority: ").Append(MaximumPriority).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeLike: ").Append(AssigneeLike).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerLike: ").Append(OwnerLike).Append("\n");
            sb.Append("  Unassigned: ").Append(Unassigned).Append("\n");
            sb.Append("  DelegationState: ").Append(DelegationState).Append("\n");
            sb.Append("  CandidateUser: ").Append(CandidateUser).Append("\n");
            sb.Append("  CandidateGroup: ").Append(CandidateGroup).Append("\n");
            sb.Append("  CandidateGroupIn: ").Append(CandidateGroupIn).Append("\n");
            sb.Append("  InvolvedUser: ").Append(InvolvedUser).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessInstanceBusinessKey: ").Append(ProcessInstanceBusinessKey).Append("\n");
            sb.Append("  ProcessInstanceBusinessKeyLike: ").Append(ProcessInstanceBusinessKeyLike).Append("\n");
            sb.Append("  ProcessInstanceIdIn: ").Append(ProcessInstanceIdIn).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessDefinitionName: ").Append(ProcessDefinitionName).Append("\n");
            sb.Append("  ProcessDefinitionKeyLike: ").Append(ProcessDefinitionKeyLike).Append("\n");
            sb.Append("  ProcessDefinitionNameLike: ").Append(ProcessDefinitionNameLike).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CreatedBefore: ").Append(CreatedBefore).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  ExcludeSubTasks: ").Append(ExcludeSubTasks).Append("\n");
            sb.Append("  TaskDefinitionKey: ").Append(TaskDefinitionKey).Append("\n");
            sb.Append("  TaskDefinitionKeyLike: ").Append(TaskDefinitionKeyLike).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueBefore: ").Append(DueBefore).Append("\n");
            sb.Append("  DueAfter: ").Append(DueAfter).Append("\n");
            sb.Append("  WithoutDueDate: ").Append(WithoutDueDate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  IncludeTaskLocalVariables: ").Append(IncludeTaskLocalVariables).Append("\n");
            sb.Append("  IncludeProcessVariables: ").Append(IncludeProcessVariables).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenantIdLike: ").Append(TenantIdLike).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  CandidateOrAssigned: ").Append(CandidateOrAssigned).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  TaskVariables: ").Append(TaskVariables).Append("\n");
            sb.Append("  ProcessInstanceVariables: ").Append(ProcessInstanceVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskQueryRequest);
        }

        /// <summary>
        /// Returns true if TaskQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskQueryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameLike == input.NameLike ||
                    (this.NameLike != null &&
                    this.NameLike.Equals(input.NameLike))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DescriptionLike == input.DescriptionLike ||
                    (this.DescriptionLike != null &&
                    this.DescriptionLike.Equals(input.DescriptionLike))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.MinimumPriority == input.MinimumPriority ||
                    (this.MinimumPriority != null &&
                    this.MinimumPriority.Equals(input.MinimumPriority))
                ) && 
                (
                    this.MaximumPriority == input.MaximumPriority ||
                    (this.MaximumPriority != null &&
                    this.MaximumPriority.Equals(input.MaximumPriority))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.AssigneeLike == input.AssigneeLike ||
                    (this.AssigneeLike != null &&
                    this.AssigneeLike.Equals(input.AssigneeLike))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.OwnerLike == input.OwnerLike ||
                    (this.OwnerLike != null &&
                    this.OwnerLike.Equals(input.OwnerLike))
                ) && 
                (
                    this.Unassigned == input.Unassigned ||
                    (this.Unassigned != null &&
                    this.Unassigned.Equals(input.Unassigned))
                ) && 
                (
                    this.DelegationState == input.DelegationState ||
                    (this.DelegationState != null &&
                    this.DelegationState.Equals(input.DelegationState))
                ) && 
                (
                    this.CandidateUser == input.CandidateUser ||
                    (this.CandidateUser != null &&
                    this.CandidateUser.Equals(input.CandidateUser))
                ) && 
                (
                    this.CandidateGroup == input.CandidateGroup ||
                    (this.CandidateGroup != null &&
                    this.CandidateGroup.Equals(input.CandidateGroup))
                ) && 
                (
                    this.CandidateGroupIn == input.CandidateGroupIn ||
                    this.CandidateGroupIn != null &&
                    this.CandidateGroupIn.SequenceEqual(input.CandidateGroupIn)
                ) && 
                (
                    this.InvolvedUser == input.InvolvedUser ||
                    (this.InvolvedUser != null &&
                    this.InvolvedUser.Equals(input.InvolvedUser))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessInstanceBusinessKey == input.ProcessInstanceBusinessKey ||
                    (this.ProcessInstanceBusinessKey != null &&
                    this.ProcessInstanceBusinessKey.Equals(input.ProcessInstanceBusinessKey))
                ) && 
                (
                    this.ProcessInstanceBusinessKeyLike == input.ProcessInstanceBusinessKeyLike ||
                    (this.ProcessInstanceBusinessKeyLike != null &&
                    this.ProcessInstanceBusinessKeyLike.Equals(input.ProcessInstanceBusinessKeyLike))
                ) && 
                (
                    this.ProcessInstanceIdIn == input.ProcessInstanceIdIn ||
                    this.ProcessInstanceIdIn != null &&
                    this.ProcessInstanceIdIn.SequenceEqual(input.ProcessInstanceIdIn)
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.ProcessDefinitionName == input.ProcessDefinitionName ||
                    (this.ProcessDefinitionName != null &&
                    this.ProcessDefinitionName.Equals(input.ProcessDefinitionName))
                ) && 
                (
                    this.ProcessDefinitionKeyLike == input.ProcessDefinitionKeyLike ||
                    (this.ProcessDefinitionKeyLike != null &&
                    this.ProcessDefinitionKeyLike.Equals(input.ProcessDefinitionKeyLike))
                ) && 
                (
                    this.ProcessDefinitionNameLike == input.ProcessDefinitionNameLike ||
                    (this.ProcessDefinitionNameLike != null &&
                    this.ProcessDefinitionNameLike.Equals(input.ProcessDefinitionNameLike))
                ) && 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.CreatedBefore == input.CreatedBefore ||
                    (this.CreatedBefore != null &&
                    this.CreatedBefore.Equals(input.CreatedBefore))
                ) && 
                (
                    this.CreatedAfter == input.CreatedAfter ||
                    (this.CreatedAfter != null &&
                    this.CreatedAfter.Equals(input.CreatedAfter))
                ) && 
                (
                    this.ExcludeSubTasks == input.ExcludeSubTasks ||
                    (this.ExcludeSubTasks != null &&
                    this.ExcludeSubTasks.Equals(input.ExcludeSubTasks))
                ) && 
                (
                    this.TaskDefinitionKey == input.TaskDefinitionKey ||
                    (this.TaskDefinitionKey != null &&
                    this.TaskDefinitionKey.Equals(input.TaskDefinitionKey))
                ) && 
                (
                    this.TaskDefinitionKeyLike == input.TaskDefinitionKeyLike ||
                    (this.TaskDefinitionKeyLike != null &&
                    this.TaskDefinitionKeyLike.Equals(input.TaskDefinitionKeyLike))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueBefore == input.DueBefore ||
                    (this.DueBefore != null &&
                    this.DueBefore.Equals(input.DueBefore))
                ) && 
                (
                    this.DueAfter == input.DueAfter ||
                    (this.DueAfter != null &&
                    this.DueAfter.Equals(input.DueAfter))
                ) && 
                (
                    this.WithoutDueDate == input.WithoutDueDate ||
                    (this.WithoutDueDate != null &&
                    this.WithoutDueDate.Equals(input.WithoutDueDate))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.IncludeTaskLocalVariables == input.IncludeTaskLocalVariables ||
                    (this.IncludeTaskLocalVariables != null &&
                    this.IncludeTaskLocalVariables.Equals(input.IncludeTaskLocalVariables))
                ) && 
                (
                    this.IncludeProcessVariables == input.IncludeProcessVariables ||
                    (this.IncludeProcessVariables != null &&
                    this.IncludeProcessVariables.Equals(input.IncludeProcessVariables))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TenantIdLike == input.TenantIdLike ||
                    (this.TenantIdLike != null &&
                    this.TenantIdLike.Equals(input.TenantIdLike))
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.CandidateOrAssigned == input.CandidateOrAssigned ||
                    (this.CandidateOrAssigned != null &&
                    this.CandidateOrAssigned.Equals(input.CandidateOrAssigned))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.TaskVariables == input.TaskVariables ||
                    this.TaskVariables != null &&
                    this.TaskVariables.SequenceEqual(input.TaskVariables)
                ) && 
                (
                    this.ProcessInstanceVariables == input.ProcessInstanceVariables ||
                    this.ProcessInstanceVariables != null &&
                    this.ProcessInstanceVariables.SequenceEqual(input.ProcessInstanceVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NameLike != null)
                    hashCode = hashCode * 59 + this.NameLike.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DescriptionLike != null)
                    hashCode = hashCode * 59 + this.DescriptionLike.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.MinimumPriority != null)
                    hashCode = hashCode * 59 + this.MinimumPriority.GetHashCode();
                if (this.MaximumPriority != null)
                    hashCode = hashCode * 59 + this.MaximumPriority.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.AssigneeLike != null)
                    hashCode = hashCode * 59 + this.AssigneeLike.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.OwnerLike != null)
                    hashCode = hashCode * 59 + this.OwnerLike.GetHashCode();
                if (this.Unassigned != null)
                    hashCode = hashCode * 59 + this.Unassigned.GetHashCode();
                if (this.DelegationState != null)
                    hashCode = hashCode * 59 + this.DelegationState.GetHashCode();
                if (this.CandidateUser != null)
                    hashCode = hashCode * 59 + this.CandidateUser.GetHashCode();
                if (this.CandidateGroup != null)
                    hashCode = hashCode * 59 + this.CandidateGroup.GetHashCode();
                if (this.CandidateGroupIn != null)
                    hashCode = hashCode * 59 + this.CandidateGroupIn.GetHashCode();
                if (this.InvolvedUser != null)
                    hashCode = hashCode * 59 + this.InvolvedUser.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessInstanceBusinessKey != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceBusinessKey.GetHashCode();
                if (this.ProcessInstanceBusinessKeyLike != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceBusinessKeyLike.GetHashCode();
                if (this.ProcessInstanceIdIn != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceIdIn.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.ProcessDefinitionName != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionName.GetHashCode();
                if (this.ProcessDefinitionKeyLike != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKeyLike.GetHashCode();
                if (this.ProcessDefinitionNameLike != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionNameLike.GetHashCode();
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.CreatedBefore != null)
                    hashCode = hashCode * 59 + this.CreatedBefore.GetHashCode();
                if (this.CreatedAfter != null)
                    hashCode = hashCode * 59 + this.CreatedAfter.GetHashCode();
                if (this.ExcludeSubTasks != null)
                    hashCode = hashCode * 59 + this.ExcludeSubTasks.GetHashCode();
                if (this.TaskDefinitionKey != null)
                    hashCode = hashCode * 59 + this.TaskDefinitionKey.GetHashCode();
                if (this.TaskDefinitionKeyLike != null)
                    hashCode = hashCode * 59 + this.TaskDefinitionKeyLike.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.DueBefore != null)
                    hashCode = hashCode * 59 + this.DueBefore.GetHashCode();
                if (this.DueAfter != null)
                    hashCode = hashCode * 59 + this.DueAfter.GetHashCode();
                if (this.WithoutDueDate != null)
                    hashCode = hashCode * 59 + this.WithoutDueDate.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.IncludeTaskLocalVariables != null)
                    hashCode = hashCode * 59 + this.IncludeTaskLocalVariables.GetHashCode();
                if (this.IncludeProcessVariables != null)
                    hashCode = hashCode * 59 + this.IncludeProcessVariables.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenantIdLike != null)
                    hashCode = hashCode * 59 + this.TenantIdLike.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.CandidateOrAssigned != null)
                    hashCode = hashCode * 59 + this.CandidateOrAssigned.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.TaskVariables != null)
                    hashCode = hashCode * 59 + this.TaskVariables.GetHashCode();
                if (this.ProcessInstanceVariables != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceVariables.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
