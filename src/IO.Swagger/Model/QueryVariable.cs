/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// QueryVariable
    /// </summary>
    [DataContract]
    public partial class QueryVariable :  IEquatable<QueryVariable>, IValidatableObject
    {
        /// <summary>
        /// Defines VariableOperation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariableOperationEnum
        {
            
            /// <summary>
            /// Enum EQUALS for value: EQUALS
            /// </summary>
            [EnumMember(Value = "EQUALS")]
            EQUALS = 1,
            
            /// <summary>
            /// Enum NOTEQUALS for value: NOT_EQUALS
            /// </summary>
            [EnumMember(Value = "NOT_EQUALS")]
            NOTEQUALS = 2,
            
            /// <summary>
            /// Enum EQUALSIGNORECASE for value: EQUALS_IGNORE_CASE
            /// </summary>
            [EnumMember(Value = "EQUALS_IGNORE_CASE")]
            EQUALSIGNORECASE = 3,
            
            /// <summary>
            /// Enum NOTEQUALSIGNORECASE for value: NOT_EQUALS_IGNORE_CASE
            /// </summary>
            [EnumMember(Value = "NOT_EQUALS_IGNORE_CASE")]
            NOTEQUALSIGNORECASE = 4,
            
            /// <summary>
            /// Enum LIKE for value: LIKE
            /// </summary>
            [EnumMember(Value = "LIKE")]
            LIKE = 5,
            
            /// <summary>
            /// Enum LIKEIGNORECASE for value: LIKE_IGNORE_CASE
            /// </summary>
            [EnumMember(Value = "LIKE_IGNORE_CASE")]
            LIKEIGNORECASE = 6,
            
            /// <summary>
            /// Enum GREATERTHAN for value: GREATER_THAN
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHAN = 7,
            
            /// <summary>
            /// Enum GREATERTHANOREQUALS for value: GREATER_THAN_OR_EQUALS
            /// </summary>
            [EnumMember(Value = "GREATER_THAN_OR_EQUALS")]
            GREATERTHANOREQUALS = 8,
            
            /// <summary>
            /// Enum LESSTHAN for value: LESS_THAN
            /// </summary>
            [EnumMember(Value = "LESS_THAN")]
            LESSTHAN = 9,
            
            /// <summary>
            /// Enum LESSTHANOREQUALS for value: LESS_THAN_OR_EQUALS
            /// </summary>
            [EnumMember(Value = "LESS_THAN_OR_EQUALS")]
            LESSTHANOREQUALS = 10
        }

        /// <summary>
        /// Gets or Sets VariableOperation
        /// </summary>
        [DataMember(Name="variableOperation", EmitDefaultValue=false)]
        public VariableOperationEnum? VariableOperation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryVariable" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Operation">Operation.</param>
        /// <param name="Value">Value.</param>
        /// <param name="Type">Type.</param>
        /// <param name="VariableOperation">VariableOperation.</param>
        public QueryVariable(string Name = default(string), string Operation = default(string), Object Value = default(Object), string Type = default(string), VariableOperationEnum? VariableOperation = default(VariableOperationEnum?))
        {
            this.Name = Name;
            this.Operation = Operation;
            this.Value = Value;
            this.Type = Type;
            this.VariableOperation = VariableOperation;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryVariable {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VariableOperation: ").Append(VariableOperation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryVariable);
        }

        /// <summary>
        /// Returns true if QueryVariable instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryVariable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryVariable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.VariableOperation == input.VariableOperation ||
                    (this.VariableOperation != null &&
                    this.VariableOperation.Equals(input.VariableOperation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VariableOperation != null)
                    hashCode = hashCode * 59 + this.VariableOperation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
