/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// HistoricTaskInstanceQueryRequest
    /// </summary>
    [DataContract]
    public partial class HistoricTaskInstanceQueryRequest :  IEquatable<HistoricTaskInstanceQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoricTaskInstanceQueryRequest" /> class.
        /// </summary>
        /// <param name="Start">Start.</param>
        /// <param name="Size">Size.</param>
        /// <param name="Sort">Sort.</param>
        /// <param name="Order">Order.</param>
        /// <param name="TaskId">TaskId.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="ProcessBusinessKey">ProcessBusinessKey.</param>
        /// <param name="ProcessBusinessKeyLike">ProcessBusinessKeyLike.</param>
        /// <param name="ProcessDefinitionId">ProcessDefinitionId.</param>
        /// <param name="ProcessDefinitionKey">ProcessDefinitionKey.</param>
        /// <param name="ProcessDefinitionKeyLike">ProcessDefinitionKeyLike.</param>
        /// <param name="ProcessDefinitionName">ProcessDefinitionName.</param>
        /// <param name="ProcessDefinitionNameLike">ProcessDefinitionNameLike.</param>
        /// <param name="ExecutionId">ExecutionId.</param>
        /// <param name="TaskName">TaskName.</param>
        /// <param name="TaskNameLike">TaskNameLike.</param>
        /// <param name="TaskDescription">TaskDescription.</param>
        /// <param name="TaskDescriptionLike">TaskDescriptionLike.</param>
        /// <param name="TaskDefinitionKey">TaskDefinitionKey.</param>
        /// <param name="TaskDefinitionKeyLike">TaskDefinitionKeyLike.</param>
        /// <param name="TaskCategory">TaskCategory.</param>
        /// <param name="TaskDeleteReason">TaskDeleteReason.</param>
        /// <param name="TaskDeleteReasonLike">TaskDeleteReasonLike.</param>
        /// <param name="TaskAssignee">TaskAssignee.</param>
        /// <param name="TaskAssigneeLike">TaskAssigneeLike.</param>
        /// <param name="TaskOwner">TaskOwner.</param>
        /// <param name="TaskOwnerLike">TaskOwnerLike.</param>
        /// <param name="TaskInvolvedUser">TaskInvolvedUser.</param>
        /// <param name="TaskPriority">TaskPriority.</param>
        /// <param name="TaskMinPriority">TaskMinPriority.</param>
        /// <param name="TaskMaxPriority">TaskMaxPriority.</param>
        /// <param name="Finished">Finished (default to false).</param>
        /// <param name="ProcessFinished">ProcessFinished (default to false).</param>
        /// <param name="ParentTaskId">ParentTaskId.</param>
        /// <param name="DueDate">DueDate.</param>
        /// <param name="DueDateAfter">DueDateAfter.</param>
        /// <param name="DueDateBefore">DueDateBefore.</param>
        /// <param name="WithoutDueDate">WithoutDueDate (default to false).</param>
        /// <param name="TaskCreatedOn">TaskCreatedOn.</param>
        /// <param name="TaskCreatedBefore">TaskCreatedBefore.</param>
        /// <param name="TaskCreatedAfter">TaskCreatedAfter.</param>
        /// <param name="TaskCompletedOn">TaskCompletedOn.</param>
        /// <param name="TaskCompletedBefore">TaskCompletedBefore.</param>
        /// <param name="TaskCompletedAfter">TaskCompletedAfter.</param>
        /// <param name="IncludeTaskLocalVariables">IncludeTaskLocalVariables (default to false).</param>
        /// <param name="IncludeProcessVariables">IncludeProcessVariables (default to false).</param>
        /// <param name="TaskVariables">TaskVariables.</param>
        /// <param name="ProcessVariables">ProcessVariables.</param>
        /// <param name="TenantId">TenantId.</param>
        /// <param name="TenantIdLike">TenantIdLike.</param>
        /// <param name="WithoutTenantId">WithoutTenantId (default to false).</param>
        /// <param name="TaskCandidateGroup">TaskCandidateGroup.</param>
        public HistoricTaskInstanceQueryRequest(int? Start = default(int?), int? Size = default(int?), string Sort = default(string), string Order = default(string), string TaskId = default(string), string ProcessInstanceId = default(string), string ProcessBusinessKey = default(string), string ProcessBusinessKeyLike = default(string), string ProcessDefinitionId = default(string), string ProcessDefinitionKey = default(string), string ProcessDefinitionKeyLike = default(string), string ProcessDefinitionName = default(string), string ProcessDefinitionNameLike = default(string), string ExecutionId = default(string), string TaskName = default(string), string TaskNameLike = default(string), string TaskDescription = default(string), string TaskDescriptionLike = default(string), string TaskDefinitionKey = default(string), string TaskDefinitionKeyLike = default(string), string TaskCategory = default(string), string TaskDeleteReason = default(string), string TaskDeleteReasonLike = default(string), string TaskAssignee = default(string), string TaskAssigneeLike = default(string), string TaskOwner = default(string), string TaskOwnerLike = default(string), string TaskInvolvedUser = default(string), int? TaskPriority = default(int?), int? TaskMinPriority = default(int?), int? TaskMaxPriority = default(int?), bool? Finished = false, bool? ProcessFinished = false, string ParentTaskId = default(string), DateTime? DueDate = default(DateTime?), DateTime? DueDateAfter = default(DateTime?), DateTime? DueDateBefore = default(DateTime?), bool? WithoutDueDate = false, DateTime? TaskCreatedOn = default(DateTime?), DateTime? TaskCreatedBefore = default(DateTime?), DateTime? TaskCreatedAfter = default(DateTime?), DateTime? TaskCompletedOn = default(DateTime?), DateTime? TaskCompletedBefore = default(DateTime?), DateTime? TaskCompletedAfter = default(DateTime?), bool? IncludeTaskLocalVariables = false, bool? IncludeProcessVariables = false, List<QueryVariable> TaskVariables = default(List<QueryVariable>), List<QueryVariable> ProcessVariables = default(List<QueryVariable>), string TenantId = default(string), string TenantIdLike = default(string), bool? WithoutTenantId = false, string TaskCandidateGroup = default(string))
        {
            this.Start = Start;
            this.Size = Size;
            this.Sort = Sort;
            this.Order = Order;
            this.TaskId = TaskId;
            this.ProcessInstanceId = ProcessInstanceId;
            this.ProcessBusinessKey = ProcessBusinessKey;
            this.ProcessBusinessKeyLike = ProcessBusinessKeyLike;
            this.ProcessDefinitionId = ProcessDefinitionId;
            this.ProcessDefinitionKey = ProcessDefinitionKey;
            this.ProcessDefinitionKeyLike = ProcessDefinitionKeyLike;
            this.ProcessDefinitionName = ProcessDefinitionName;
            this.ProcessDefinitionNameLike = ProcessDefinitionNameLike;
            this.ExecutionId = ExecutionId;
            this.TaskName = TaskName;
            this.TaskNameLike = TaskNameLike;
            this.TaskDescription = TaskDescription;
            this.TaskDescriptionLike = TaskDescriptionLike;
            this.TaskDefinitionKey = TaskDefinitionKey;
            this.TaskDefinitionKeyLike = TaskDefinitionKeyLike;
            this.TaskCategory = TaskCategory;
            this.TaskDeleteReason = TaskDeleteReason;
            this.TaskDeleteReasonLike = TaskDeleteReasonLike;
            this.TaskAssignee = TaskAssignee;
            this.TaskAssigneeLike = TaskAssigneeLike;
            this.TaskOwner = TaskOwner;
            this.TaskOwnerLike = TaskOwnerLike;
            this.TaskInvolvedUser = TaskInvolvedUser;
            this.TaskPriority = TaskPriority;
            this.TaskMinPriority = TaskMinPriority;
            this.TaskMaxPriority = TaskMaxPriority;
            // use default value if no "Finished" provided
            if (Finished == null)
            {
                this.Finished = false;
            }
            else
            {
                this.Finished = Finished;
            }
            // use default value if no "ProcessFinished" provided
            if (ProcessFinished == null)
            {
                this.ProcessFinished = false;
            }
            else
            {
                this.ProcessFinished = ProcessFinished;
            }
            this.ParentTaskId = ParentTaskId;
            this.DueDate = DueDate;
            this.DueDateAfter = DueDateAfter;
            this.DueDateBefore = DueDateBefore;
            // use default value if no "WithoutDueDate" provided
            if (WithoutDueDate == null)
            {
                this.WithoutDueDate = false;
            }
            else
            {
                this.WithoutDueDate = WithoutDueDate;
            }
            this.TaskCreatedOn = TaskCreatedOn;
            this.TaskCreatedBefore = TaskCreatedBefore;
            this.TaskCreatedAfter = TaskCreatedAfter;
            this.TaskCompletedOn = TaskCompletedOn;
            this.TaskCompletedBefore = TaskCompletedBefore;
            this.TaskCompletedAfter = TaskCompletedAfter;
            // use default value if no "IncludeTaskLocalVariables" provided
            if (IncludeTaskLocalVariables == null)
            {
                this.IncludeTaskLocalVariables = false;
            }
            else
            {
                this.IncludeTaskLocalVariables = IncludeTaskLocalVariables;
            }
            // use default value if no "IncludeProcessVariables" provided
            if (IncludeProcessVariables == null)
            {
                this.IncludeProcessVariables = false;
            }
            else
            {
                this.IncludeProcessVariables = IncludeProcessVariables;
            }
            this.TaskVariables = TaskVariables;
            this.ProcessVariables = ProcessVariables;
            this.TenantId = TenantId;
            this.TenantIdLike = TenantIdLike;
            // use default value if no "WithoutTenantId" provided
            if (WithoutTenantId == null)
            {
                this.WithoutTenantId = false;
            }
            else
            {
                this.WithoutTenantId = WithoutTenantId;
            }
            this.TaskCandidateGroup = TaskCandidateGroup;
        }
        
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name="processInstanceId", EmitDefaultValue=false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessBusinessKey
        /// </summary>
        [DataMember(Name="processBusinessKey", EmitDefaultValue=false)]
        public string ProcessBusinessKey { get; set; }

        /// <summary>
        /// Gets or Sets ProcessBusinessKeyLike
        /// </summary>
        [DataMember(Name="processBusinessKeyLike", EmitDefaultValue=false)]
        public string ProcessBusinessKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionId
        /// </summary>
        [DataMember(Name="processDefinitionId", EmitDefaultValue=false)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionKey
        /// </summary>
        [DataMember(Name="processDefinitionKey", EmitDefaultValue=false)]
        public string ProcessDefinitionKey { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionKeyLike
        /// </summary>
        [DataMember(Name="processDefinitionKeyLike", EmitDefaultValue=false)]
        public string ProcessDefinitionKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionName
        /// </summary>
        [DataMember(Name="processDefinitionName", EmitDefaultValue=false)]
        public string ProcessDefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDefinitionNameLike
        /// </summary>
        [DataMember(Name="processDefinitionNameLike", EmitDefaultValue=false)]
        public string ProcessDefinitionNameLike { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionId
        /// </summary>
        [DataMember(Name="executionId", EmitDefaultValue=false)]
        public string ExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name="taskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or Sets TaskNameLike
        /// </summary>
        [DataMember(Name="taskNameLike", EmitDefaultValue=false)]
        public string TaskNameLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskDescription
        /// </summary>
        [DataMember(Name="taskDescription", EmitDefaultValue=false)]
        public string TaskDescription { get; set; }

        /// <summary>
        /// Gets or Sets TaskDescriptionLike
        /// </summary>
        [DataMember(Name="taskDescriptionLike", EmitDefaultValue=false)]
        public string TaskDescriptionLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinitionKey
        /// </summary>
        [DataMember(Name="taskDefinitionKey", EmitDefaultValue=false)]
        public string TaskDefinitionKey { get; set; }

        /// <summary>
        /// Gets or Sets TaskDefinitionKeyLike
        /// </summary>
        [DataMember(Name="taskDefinitionKeyLike", EmitDefaultValue=false)]
        public string TaskDefinitionKeyLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskCategory
        /// </summary>
        [DataMember(Name="taskCategory", EmitDefaultValue=false)]
        public string TaskCategory { get; set; }

        /// <summary>
        /// Gets or Sets TaskDeleteReason
        /// </summary>
        [DataMember(Name="taskDeleteReason", EmitDefaultValue=false)]
        public string TaskDeleteReason { get; set; }

        /// <summary>
        /// Gets or Sets TaskDeleteReasonLike
        /// </summary>
        [DataMember(Name="taskDeleteReasonLike", EmitDefaultValue=false)]
        public string TaskDeleteReasonLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskAssignee
        /// </summary>
        [DataMember(Name="taskAssignee", EmitDefaultValue=false)]
        public string TaskAssignee { get; set; }

        /// <summary>
        /// Gets or Sets TaskAssigneeLike
        /// </summary>
        [DataMember(Name="taskAssigneeLike", EmitDefaultValue=false)]
        public string TaskAssigneeLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskOwner
        /// </summary>
        [DataMember(Name="taskOwner", EmitDefaultValue=false)]
        public string TaskOwner { get; set; }

        /// <summary>
        /// Gets or Sets TaskOwnerLike
        /// </summary>
        [DataMember(Name="taskOwnerLike", EmitDefaultValue=false)]
        public string TaskOwnerLike { get; set; }

        /// <summary>
        /// Gets or Sets TaskInvolvedUser
        /// </summary>
        [DataMember(Name="taskInvolvedUser", EmitDefaultValue=false)]
        public string TaskInvolvedUser { get; set; }

        /// <summary>
        /// Gets or Sets TaskPriority
        /// </summary>
        [DataMember(Name="taskPriority", EmitDefaultValue=false)]
        public int? TaskPriority { get; set; }

        /// <summary>
        /// Gets or Sets TaskMinPriority
        /// </summary>
        [DataMember(Name="taskMinPriority", EmitDefaultValue=false)]
        public int? TaskMinPriority { get; set; }

        /// <summary>
        /// Gets or Sets TaskMaxPriority
        /// </summary>
        [DataMember(Name="taskMaxPriority", EmitDefaultValue=false)]
        public int? TaskMaxPriority { get; set; }

        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Gets or Sets ProcessFinished
        /// </summary>
        [DataMember(Name="processFinished", EmitDefaultValue=false)]
        public bool? ProcessFinished { get; set; }

        /// <summary>
        /// Gets or Sets ParentTaskId
        /// </summary>
        [DataMember(Name="parentTaskId", EmitDefaultValue=false)]
        public string ParentTaskId { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDateAfter
        /// </summary>
        [DataMember(Name="dueDateAfter", EmitDefaultValue=false)]
        public DateTime? DueDateAfter { get; set; }

        /// <summary>
        /// Gets or Sets DueDateBefore
        /// </summary>
        [DataMember(Name="dueDateBefore", EmitDefaultValue=false)]
        public DateTime? DueDateBefore { get; set; }

        /// <summary>
        /// Gets or Sets WithoutDueDate
        /// </summary>
        [DataMember(Name="withoutDueDate", EmitDefaultValue=false)]
        public bool? WithoutDueDate { get; set; }

        /// <summary>
        /// Gets or Sets TaskCreatedOn
        /// </summary>
        [DataMember(Name="taskCreatedOn", EmitDefaultValue=false)]
        public DateTime? TaskCreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets TaskCreatedBefore
        /// </summary>
        [DataMember(Name="taskCreatedBefore", EmitDefaultValue=false)]
        public DateTime? TaskCreatedBefore { get; set; }

        /// <summary>
        /// Gets or Sets TaskCreatedAfter
        /// </summary>
        [DataMember(Name="taskCreatedAfter", EmitDefaultValue=false)]
        public DateTime? TaskCreatedAfter { get; set; }

        /// <summary>
        /// Gets or Sets TaskCompletedOn
        /// </summary>
        [DataMember(Name="taskCompletedOn", EmitDefaultValue=false)]
        public DateTime? TaskCompletedOn { get; set; }

        /// <summary>
        /// Gets or Sets TaskCompletedBefore
        /// </summary>
        [DataMember(Name="taskCompletedBefore", EmitDefaultValue=false)]
        public DateTime? TaskCompletedBefore { get; set; }

        /// <summary>
        /// Gets or Sets TaskCompletedAfter
        /// </summary>
        [DataMember(Name="taskCompletedAfter", EmitDefaultValue=false)]
        public DateTime? TaskCompletedAfter { get; set; }

        /// <summary>
        /// Gets or Sets IncludeTaskLocalVariables
        /// </summary>
        [DataMember(Name="includeTaskLocalVariables", EmitDefaultValue=false)]
        public bool? IncludeTaskLocalVariables { get; set; }

        /// <summary>
        /// Gets or Sets IncludeProcessVariables
        /// </summary>
        [DataMember(Name="includeProcessVariables", EmitDefaultValue=false)]
        public bool? IncludeProcessVariables { get; set; }

        /// <summary>
        /// Gets or Sets TaskVariables
        /// </summary>
        [DataMember(Name="taskVariables", EmitDefaultValue=false)]
        public List<QueryVariable> TaskVariables { get; set; }

        /// <summary>
        /// Gets or Sets ProcessVariables
        /// </summary>
        [DataMember(Name="processVariables", EmitDefaultValue=false)]
        public List<QueryVariable> ProcessVariables { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets TenantIdLike
        /// </summary>
        [DataMember(Name="tenantIdLike", EmitDefaultValue=false)]
        public string TenantIdLike { get; set; }

        /// <summary>
        /// Gets or Sets WithoutTenantId
        /// </summary>
        [DataMember(Name="withoutTenantId", EmitDefaultValue=false)]
        public bool? WithoutTenantId { get; set; }

        /// <summary>
        /// Gets or Sets TaskCandidateGroup
        /// </summary>
        [DataMember(Name="taskCandidateGroup", EmitDefaultValue=false)]
        public string TaskCandidateGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoricTaskInstanceQueryRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessBusinessKey: ").Append(ProcessBusinessKey).Append("\n");
            sb.Append("  ProcessBusinessKeyLike: ").Append(ProcessBusinessKeyLike).Append("\n");
            sb.Append("  ProcessDefinitionId: ").Append(ProcessDefinitionId).Append("\n");
            sb.Append("  ProcessDefinitionKey: ").Append(ProcessDefinitionKey).Append("\n");
            sb.Append("  ProcessDefinitionKeyLike: ").Append(ProcessDefinitionKeyLike).Append("\n");
            sb.Append("  ProcessDefinitionName: ").Append(ProcessDefinitionName).Append("\n");
            sb.Append("  ProcessDefinitionNameLike: ").Append(ProcessDefinitionNameLike).Append("\n");
            sb.Append("  ExecutionId: ").Append(ExecutionId).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskNameLike: ").Append(TaskNameLike).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  TaskDescriptionLike: ").Append(TaskDescriptionLike).Append("\n");
            sb.Append("  TaskDefinitionKey: ").Append(TaskDefinitionKey).Append("\n");
            sb.Append("  TaskDefinitionKeyLike: ").Append(TaskDefinitionKeyLike).Append("\n");
            sb.Append("  TaskCategory: ").Append(TaskCategory).Append("\n");
            sb.Append("  TaskDeleteReason: ").Append(TaskDeleteReason).Append("\n");
            sb.Append("  TaskDeleteReasonLike: ").Append(TaskDeleteReasonLike).Append("\n");
            sb.Append("  TaskAssignee: ").Append(TaskAssignee).Append("\n");
            sb.Append("  TaskAssigneeLike: ").Append(TaskAssigneeLike).Append("\n");
            sb.Append("  TaskOwner: ").Append(TaskOwner).Append("\n");
            sb.Append("  TaskOwnerLike: ").Append(TaskOwnerLike).Append("\n");
            sb.Append("  TaskInvolvedUser: ").Append(TaskInvolvedUser).Append("\n");
            sb.Append("  TaskPriority: ").Append(TaskPriority).Append("\n");
            sb.Append("  TaskMinPriority: ").Append(TaskMinPriority).Append("\n");
            sb.Append("  TaskMaxPriority: ").Append(TaskMaxPriority).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  ProcessFinished: ").Append(ProcessFinished).Append("\n");
            sb.Append("  ParentTaskId: ").Append(ParentTaskId).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateAfter: ").Append(DueDateAfter).Append("\n");
            sb.Append("  DueDateBefore: ").Append(DueDateBefore).Append("\n");
            sb.Append("  WithoutDueDate: ").Append(WithoutDueDate).Append("\n");
            sb.Append("  TaskCreatedOn: ").Append(TaskCreatedOn).Append("\n");
            sb.Append("  TaskCreatedBefore: ").Append(TaskCreatedBefore).Append("\n");
            sb.Append("  TaskCreatedAfter: ").Append(TaskCreatedAfter).Append("\n");
            sb.Append("  TaskCompletedOn: ").Append(TaskCompletedOn).Append("\n");
            sb.Append("  TaskCompletedBefore: ").Append(TaskCompletedBefore).Append("\n");
            sb.Append("  TaskCompletedAfter: ").Append(TaskCompletedAfter).Append("\n");
            sb.Append("  IncludeTaskLocalVariables: ").Append(IncludeTaskLocalVariables).Append("\n");
            sb.Append("  IncludeProcessVariables: ").Append(IncludeProcessVariables).Append("\n");
            sb.Append("  TaskVariables: ").Append(TaskVariables).Append("\n");
            sb.Append("  ProcessVariables: ").Append(ProcessVariables).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TenantIdLike: ").Append(TenantIdLike).Append("\n");
            sb.Append("  WithoutTenantId: ").Append(WithoutTenantId).Append("\n");
            sb.Append("  TaskCandidateGroup: ").Append(TaskCandidateGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoricTaskInstanceQueryRequest);
        }

        /// <summary>
        /// Returns true if HistoricTaskInstanceQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoricTaskInstanceQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoricTaskInstanceQueryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) && 
                (
                    this.ProcessBusinessKey == input.ProcessBusinessKey ||
                    (this.ProcessBusinessKey != null &&
                    this.ProcessBusinessKey.Equals(input.ProcessBusinessKey))
                ) && 
                (
                    this.ProcessBusinessKeyLike == input.ProcessBusinessKeyLike ||
                    (this.ProcessBusinessKeyLike != null &&
                    this.ProcessBusinessKeyLike.Equals(input.ProcessBusinessKeyLike))
                ) && 
                (
                    this.ProcessDefinitionId == input.ProcessDefinitionId ||
                    (this.ProcessDefinitionId != null &&
                    this.ProcessDefinitionId.Equals(input.ProcessDefinitionId))
                ) && 
                (
                    this.ProcessDefinitionKey == input.ProcessDefinitionKey ||
                    (this.ProcessDefinitionKey != null &&
                    this.ProcessDefinitionKey.Equals(input.ProcessDefinitionKey))
                ) && 
                (
                    this.ProcessDefinitionKeyLike == input.ProcessDefinitionKeyLike ||
                    (this.ProcessDefinitionKeyLike != null &&
                    this.ProcessDefinitionKeyLike.Equals(input.ProcessDefinitionKeyLike))
                ) && 
                (
                    this.ProcessDefinitionName == input.ProcessDefinitionName ||
                    (this.ProcessDefinitionName != null &&
                    this.ProcessDefinitionName.Equals(input.ProcessDefinitionName))
                ) && 
                (
                    this.ProcessDefinitionNameLike == input.ProcessDefinitionNameLike ||
                    (this.ProcessDefinitionNameLike != null &&
                    this.ProcessDefinitionNameLike.Equals(input.ProcessDefinitionNameLike))
                ) && 
                (
                    this.ExecutionId == input.ExecutionId ||
                    (this.ExecutionId != null &&
                    this.ExecutionId.Equals(input.ExecutionId))
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TaskNameLike == input.TaskNameLike ||
                    (this.TaskNameLike != null &&
                    this.TaskNameLike.Equals(input.TaskNameLike))
                ) && 
                (
                    this.TaskDescription == input.TaskDescription ||
                    (this.TaskDescription != null &&
                    this.TaskDescription.Equals(input.TaskDescription))
                ) && 
                (
                    this.TaskDescriptionLike == input.TaskDescriptionLike ||
                    (this.TaskDescriptionLike != null &&
                    this.TaskDescriptionLike.Equals(input.TaskDescriptionLike))
                ) && 
                (
                    this.TaskDefinitionKey == input.TaskDefinitionKey ||
                    (this.TaskDefinitionKey != null &&
                    this.TaskDefinitionKey.Equals(input.TaskDefinitionKey))
                ) && 
                (
                    this.TaskDefinitionKeyLike == input.TaskDefinitionKeyLike ||
                    (this.TaskDefinitionKeyLike != null &&
                    this.TaskDefinitionKeyLike.Equals(input.TaskDefinitionKeyLike))
                ) && 
                (
                    this.TaskCategory == input.TaskCategory ||
                    (this.TaskCategory != null &&
                    this.TaskCategory.Equals(input.TaskCategory))
                ) && 
                (
                    this.TaskDeleteReason == input.TaskDeleteReason ||
                    (this.TaskDeleteReason != null &&
                    this.TaskDeleteReason.Equals(input.TaskDeleteReason))
                ) && 
                (
                    this.TaskDeleteReasonLike == input.TaskDeleteReasonLike ||
                    (this.TaskDeleteReasonLike != null &&
                    this.TaskDeleteReasonLike.Equals(input.TaskDeleteReasonLike))
                ) && 
                (
                    this.TaskAssignee == input.TaskAssignee ||
                    (this.TaskAssignee != null &&
                    this.TaskAssignee.Equals(input.TaskAssignee))
                ) && 
                (
                    this.TaskAssigneeLike == input.TaskAssigneeLike ||
                    (this.TaskAssigneeLike != null &&
                    this.TaskAssigneeLike.Equals(input.TaskAssigneeLike))
                ) && 
                (
                    this.TaskOwner == input.TaskOwner ||
                    (this.TaskOwner != null &&
                    this.TaskOwner.Equals(input.TaskOwner))
                ) && 
                (
                    this.TaskOwnerLike == input.TaskOwnerLike ||
                    (this.TaskOwnerLike != null &&
                    this.TaskOwnerLike.Equals(input.TaskOwnerLike))
                ) && 
                (
                    this.TaskInvolvedUser == input.TaskInvolvedUser ||
                    (this.TaskInvolvedUser != null &&
                    this.TaskInvolvedUser.Equals(input.TaskInvolvedUser))
                ) && 
                (
                    this.TaskPriority == input.TaskPriority ||
                    (this.TaskPriority != null &&
                    this.TaskPriority.Equals(input.TaskPriority))
                ) && 
                (
                    this.TaskMinPriority == input.TaskMinPriority ||
                    (this.TaskMinPriority != null &&
                    this.TaskMinPriority.Equals(input.TaskMinPriority))
                ) && 
                (
                    this.TaskMaxPriority == input.TaskMaxPriority ||
                    (this.TaskMaxPriority != null &&
                    this.TaskMaxPriority.Equals(input.TaskMaxPriority))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.ProcessFinished == input.ProcessFinished ||
                    (this.ProcessFinished != null &&
                    this.ProcessFinished.Equals(input.ProcessFinished))
                ) && 
                (
                    this.ParentTaskId == input.ParentTaskId ||
                    (this.ParentTaskId != null &&
                    this.ParentTaskId.Equals(input.ParentTaskId))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DueDateAfter == input.DueDateAfter ||
                    (this.DueDateAfter != null &&
                    this.DueDateAfter.Equals(input.DueDateAfter))
                ) && 
                (
                    this.DueDateBefore == input.DueDateBefore ||
                    (this.DueDateBefore != null &&
                    this.DueDateBefore.Equals(input.DueDateBefore))
                ) && 
                (
                    this.WithoutDueDate == input.WithoutDueDate ||
                    (this.WithoutDueDate != null &&
                    this.WithoutDueDate.Equals(input.WithoutDueDate))
                ) && 
                (
                    this.TaskCreatedOn == input.TaskCreatedOn ||
                    (this.TaskCreatedOn != null &&
                    this.TaskCreatedOn.Equals(input.TaskCreatedOn))
                ) && 
                (
                    this.TaskCreatedBefore == input.TaskCreatedBefore ||
                    (this.TaskCreatedBefore != null &&
                    this.TaskCreatedBefore.Equals(input.TaskCreatedBefore))
                ) && 
                (
                    this.TaskCreatedAfter == input.TaskCreatedAfter ||
                    (this.TaskCreatedAfter != null &&
                    this.TaskCreatedAfter.Equals(input.TaskCreatedAfter))
                ) && 
                (
                    this.TaskCompletedOn == input.TaskCompletedOn ||
                    (this.TaskCompletedOn != null &&
                    this.TaskCompletedOn.Equals(input.TaskCompletedOn))
                ) && 
                (
                    this.TaskCompletedBefore == input.TaskCompletedBefore ||
                    (this.TaskCompletedBefore != null &&
                    this.TaskCompletedBefore.Equals(input.TaskCompletedBefore))
                ) && 
                (
                    this.TaskCompletedAfter == input.TaskCompletedAfter ||
                    (this.TaskCompletedAfter != null &&
                    this.TaskCompletedAfter.Equals(input.TaskCompletedAfter))
                ) && 
                (
                    this.IncludeTaskLocalVariables == input.IncludeTaskLocalVariables ||
                    (this.IncludeTaskLocalVariables != null &&
                    this.IncludeTaskLocalVariables.Equals(input.IncludeTaskLocalVariables))
                ) && 
                (
                    this.IncludeProcessVariables == input.IncludeProcessVariables ||
                    (this.IncludeProcessVariables != null &&
                    this.IncludeProcessVariables.Equals(input.IncludeProcessVariables))
                ) && 
                (
                    this.TaskVariables == input.TaskVariables ||
                    this.TaskVariables != null &&
                    this.TaskVariables.SequenceEqual(input.TaskVariables)
                ) && 
                (
                    this.ProcessVariables == input.ProcessVariables ||
                    this.ProcessVariables != null &&
                    this.ProcessVariables.SequenceEqual(input.ProcessVariables)
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TenantIdLike == input.TenantIdLike ||
                    (this.TenantIdLike != null &&
                    this.TenantIdLike.Equals(input.TenantIdLike))
                ) && 
                (
                    this.WithoutTenantId == input.WithoutTenantId ||
                    (this.WithoutTenantId != null &&
                    this.WithoutTenantId.Equals(input.WithoutTenantId))
                ) && 
                (
                    this.TaskCandidateGroup == input.TaskCandidateGroup ||
                    (this.TaskCandidateGroup != null &&
                    this.TaskCandidateGroup.Equals(input.TaskCandidateGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessBusinessKey != null)
                    hashCode = hashCode * 59 + this.ProcessBusinessKey.GetHashCode();
                if (this.ProcessBusinessKeyLike != null)
                    hashCode = hashCode * 59 + this.ProcessBusinessKeyLike.GetHashCode();
                if (this.ProcessDefinitionId != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionId.GetHashCode();
                if (this.ProcessDefinitionKey != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKey.GetHashCode();
                if (this.ProcessDefinitionKeyLike != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionKeyLike.GetHashCode();
                if (this.ProcessDefinitionName != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionName.GetHashCode();
                if (this.ProcessDefinitionNameLike != null)
                    hashCode = hashCode * 59 + this.ProcessDefinitionNameLike.GetHashCode();
                if (this.ExecutionId != null)
                    hashCode = hashCode * 59 + this.ExecutionId.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.TaskNameLike != null)
                    hashCode = hashCode * 59 + this.TaskNameLike.GetHashCode();
                if (this.TaskDescription != null)
                    hashCode = hashCode * 59 + this.TaskDescription.GetHashCode();
                if (this.TaskDescriptionLike != null)
                    hashCode = hashCode * 59 + this.TaskDescriptionLike.GetHashCode();
                if (this.TaskDefinitionKey != null)
                    hashCode = hashCode * 59 + this.TaskDefinitionKey.GetHashCode();
                if (this.TaskDefinitionKeyLike != null)
                    hashCode = hashCode * 59 + this.TaskDefinitionKeyLike.GetHashCode();
                if (this.TaskCategory != null)
                    hashCode = hashCode * 59 + this.TaskCategory.GetHashCode();
                if (this.TaskDeleteReason != null)
                    hashCode = hashCode * 59 + this.TaskDeleteReason.GetHashCode();
                if (this.TaskDeleteReasonLike != null)
                    hashCode = hashCode * 59 + this.TaskDeleteReasonLike.GetHashCode();
                if (this.TaskAssignee != null)
                    hashCode = hashCode * 59 + this.TaskAssignee.GetHashCode();
                if (this.TaskAssigneeLike != null)
                    hashCode = hashCode * 59 + this.TaskAssigneeLike.GetHashCode();
                if (this.TaskOwner != null)
                    hashCode = hashCode * 59 + this.TaskOwner.GetHashCode();
                if (this.TaskOwnerLike != null)
                    hashCode = hashCode * 59 + this.TaskOwnerLike.GetHashCode();
                if (this.TaskInvolvedUser != null)
                    hashCode = hashCode * 59 + this.TaskInvolvedUser.GetHashCode();
                if (this.TaskPriority != null)
                    hashCode = hashCode * 59 + this.TaskPriority.GetHashCode();
                if (this.TaskMinPriority != null)
                    hashCode = hashCode * 59 + this.TaskMinPriority.GetHashCode();
                if (this.TaskMaxPriority != null)
                    hashCode = hashCode * 59 + this.TaskMaxPriority.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.ProcessFinished != null)
                    hashCode = hashCode * 59 + this.ProcessFinished.GetHashCode();
                if (this.ParentTaskId != null)
                    hashCode = hashCode * 59 + this.ParentTaskId.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.DueDateAfter != null)
                    hashCode = hashCode * 59 + this.DueDateAfter.GetHashCode();
                if (this.DueDateBefore != null)
                    hashCode = hashCode * 59 + this.DueDateBefore.GetHashCode();
                if (this.WithoutDueDate != null)
                    hashCode = hashCode * 59 + this.WithoutDueDate.GetHashCode();
                if (this.TaskCreatedOn != null)
                    hashCode = hashCode * 59 + this.TaskCreatedOn.GetHashCode();
                if (this.TaskCreatedBefore != null)
                    hashCode = hashCode * 59 + this.TaskCreatedBefore.GetHashCode();
                if (this.TaskCreatedAfter != null)
                    hashCode = hashCode * 59 + this.TaskCreatedAfter.GetHashCode();
                if (this.TaskCompletedOn != null)
                    hashCode = hashCode * 59 + this.TaskCompletedOn.GetHashCode();
                if (this.TaskCompletedBefore != null)
                    hashCode = hashCode * 59 + this.TaskCompletedBefore.GetHashCode();
                if (this.TaskCompletedAfter != null)
                    hashCode = hashCode * 59 + this.TaskCompletedAfter.GetHashCode();
                if (this.IncludeTaskLocalVariables != null)
                    hashCode = hashCode * 59 + this.IncludeTaskLocalVariables.GetHashCode();
                if (this.IncludeProcessVariables != null)
                    hashCode = hashCode * 59 + this.IncludeProcessVariables.GetHashCode();
                if (this.TaskVariables != null)
                    hashCode = hashCode * 59 + this.TaskVariables.GetHashCode();
                if (this.ProcessVariables != null)
                    hashCode = hashCode * 59 + this.ProcessVariables.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.TenantIdLike != null)
                    hashCode = hashCode * 59 + this.TenantIdLike.GetHashCode();
                if (this.WithoutTenantId != null)
                    hashCode = hashCode * 59 + this.WithoutTenantId.GetHashCode();
                if (this.TaskCandidateGroup != null)
                    hashCode = hashCode * 59 + this.TaskCandidateGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
