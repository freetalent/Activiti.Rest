/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Activiti.Rest.Client.SwaggerDateConverter;

namespace Activiti.Rest.Model
{
    /// <summary>
    /// BpmnModel
    /// </summary>
    [DataContract]
    public partial class BpmnModel :  IEquatable<BpmnModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BpmnModel" /> class.
        /// </summary>
        /// <param name="DefinitionsAttributes">DefinitionsAttributes.</param>
        /// <param name="Processes">Processes.</param>
        /// <param name="LocationMap">LocationMap.</param>
        /// <param name="LabelLocationMap">LabelLocationMap.</param>
        /// <param name="FlowLocationMap">FlowLocationMap.</param>
        /// <param name="Signals">Signals.</param>
        /// <param name="Pools">Pools.</param>
        /// <param name="Imports">Imports.</param>
        /// <param name="Interfaces">Interfaces.</param>
        /// <param name="GlobalArtifacts">GlobalArtifacts.</param>
        /// <param name="Resources">Resources.</param>
        /// <param name="TargetNamespace">TargetNamespace.</param>
        /// <param name="SourceSystemId">SourceSystemId.</param>
        /// <param name="UserTaskFormTypes">UserTaskFormTypes.</param>
        /// <param name="StartEventFormTypes">StartEventFormTypes.</param>
        /// <param name="Errors">Errors.</param>
        /// <param name="Messages">Messages.</param>
        /// <param name="ItemDefinitions">ItemDefinitions.</param>
        /// <param name="MainProcess">MainProcess.</param>
        /// <param name="MessageFlows">MessageFlows.</param>
        /// <param name="DataStores">DataStores.</param>
        /// <param name="Namespaces">Namespaces.</param>
        public BpmnModel(Dictionary<string, List<ExtensionAttribute>> DefinitionsAttributes = default(Dictionary<string, List<ExtensionAttribute>>), List<Process> Processes = default(List<Process>), Dictionary<string, GraphicInfo> LocationMap = default(Dictionary<string, GraphicInfo>), Dictionary<string, GraphicInfo> LabelLocationMap = default(Dictionary<string, GraphicInfo>), Dictionary<string, List<GraphicInfo>> FlowLocationMap = default(Dictionary<string, List<GraphicInfo>>), List<Signal> Signals = default(List<Signal>), List<Pool> Pools = default(List<Pool>), List<Import> Imports = default(List<Import>), List<ModelInterface> Interfaces = default(List<ModelInterface>), List<Artifact> GlobalArtifacts = default(List<Artifact>), List<Resource> Resources = default(List<Resource>), string TargetNamespace = default(string), string SourceSystemId = default(string), List<string> UserTaskFormTypes = default(List<string>), List<string> StartEventFormTypes = default(List<string>), Dictionary<string, string> Errors = default(Dictionary<string, string>), List<Message> Messages = default(List<Message>), Dictionary<string, ItemDefinition> ItemDefinitions = default(Dictionary<string, ItemDefinition>), Process MainProcess = default(Process), Dictionary<string, MessageFlow> MessageFlows = default(Dictionary<string, MessageFlow>), Dictionary<string, DataStore> DataStores = default(Dictionary<string, DataStore>), Dictionary<string, string> Namespaces = default(Dictionary<string, string>))
        {
            this.DefinitionsAttributes = DefinitionsAttributes;
            this.Processes = Processes;
            this.LocationMap = LocationMap;
            this.LabelLocationMap = LabelLocationMap;
            this.FlowLocationMap = FlowLocationMap;
            this.Signals = Signals;
            this.Pools = Pools;
            this.Imports = Imports;
            this.Interfaces = Interfaces;
            this.GlobalArtifacts = GlobalArtifacts;
            this.Resources = Resources;
            this.TargetNamespace = TargetNamespace;
            this.SourceSystemId = SourceSystemId;
            this.UserTaskFormTypes = UserTaskFormTypes;
            this.StartEventFormTypes = StartEventFormTypes;
            this.Errors = Errors;
            this.Messages = Messages;
            this.ItemDefinitions = ItemDefinitions;
            this.MainProcess = MainProcess;
            this.MessageFlows = MessageFlows;
            this.DataStores = DataStores;
            this.Namespaces = Namespaces;
        }
        
        /// <summary>
        /// Gets or Sets DefinitionsAttributes
        /// </summary>
        [DataMember(Name="definitionsAttributes", EmitDefaultValue=false)]
        public Dictionary<string, List<ExtensionAttribute>> DefinitionsAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Processes
        /// </summary>
        [DataMember(Name="processes", EmitDefaultValue=false)]
        public List<Process> Processes { get; set; }

        /// <summary>
        /// Gets or Sets LocationMap
        /// </summary>
        [DataMember(Name="locationMap", EmitDefaultValue=false)]
        public Dictionary<string, GraphicInfo> LocationMap { get; set; }

        /// <summary>
        /// Gets or Sets LabelLocationMap
        /// </summary>
        [DataMember(Name="labelLocationMap", EmitDefaultValue=false)]
        public Dictionary<string, GraphicInfo> LabelLocationMap { get; set; }

        /// <summary>
        /// Gets or Sets FlowLocationMap
        /// </summary>
        [DataMember(Name="flowLocationMap", EmitDefaultValue=false)]
        public Dictionary<string, List<GraphicInfo>> FlowLocationMap { get; set; }

        /// <summary>
        /// Gets or Sets Signals
        /// </summary>
        [DataMember(Name="signals", EmitDefaultValue=false)]
        public List<Signal> Signals { get; set; }

        /// <summary>
        /// Gets or Sets Pools
        /// </summary>
        [DataMember(Name="pools", EmitDefaultValue=false)]
        public List<Pool> Pools { get; set; }

        /// <summary>
        /// Gets or Sets Imports
        /// </summary>
        [DataMember(Name="imports", EmitDefaultValue=false)]
        public List<Import> Imports { get; set; }

        /// <summary>
        /// Gets or Sets Interfaces
        /// </summary>
        [DataMember(Name="interfaces", EmitDefaultValue=false)]
        public List<ModelInterface> Interfaces { get; set; }

        /// <summary>
        /// Gets or Sets GlobalArtifacts
        /// </summary>
        [DataMember(Name="globalArtifacts", EmitDefaultValue=false)]
        public List<Artifact> GlobalArtifacts { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<Resource> Resources { get; set; }

        /// <summary>
        /// Gets or Sets TargetNamespace
        /// </summary>
        [DataMember(Name="targetNamespace", EmitDefaultValue=false)]
        public string TargetNamespace { get; set; }

        /// <summary>
        /// Gets or Sets SourceSystemId
        /// </summary>
        [DataMember(Name="sourceSystemId", EmitDefaultValue=false)]
        public string SourceSystemId { get; set; }

        /// <summary>
        /// Gets or Sets UserTaskFormTypes
        /// </summary>
        [DataMember(Name="userTaskFormTypes", EmitDefaultValue=false)]
        public List<string> UserTaskFormTypes { get; set; }

        /// <summary>
        /// Gets or Sets StartEventFormTypes
        /// </summary>
        [DataMember(Name="startEventFormTypes", EmitDefaultValue=false)]
        public List<string> StartEventFormTypes { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, string> Errors { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Gets or Sets ItemDefinitions
        /// </summary>
        [DataMember(Name="itemDefinitions", EmitDefaultValue=false)]
        public Dictionary<string, ItemDefinition> ItemDefinitions { get; set; }

        /// <summary>
        /// Gets or Sets MainProcess
        /// </summary>
        [DataMember(Name="mainProcess", EmitDefaultValue=false)]
        public Process MainProcess { get; set; }

        /// <summary>
        /// Gets or Sets MessageFlows
        /// </summary>
        [DataMember(Name="messageFlows", EmitDefaultValue=false)]
        public Dictionary<string, MessageFlow> MessageFlows { get; set; }

        /// <summary>
        /// Gets or Sets DataStores
        /// </summary>
        [DataMember(Name="dataStores", EmitDefaultValue=false)]
        public Dictionary<string, DataStore> DataStores { get; set; }

        /// <summary>
        /// Gets or Sets Namespaces
        /// </summary>
        [DataMember(Name="namespaces", EmitDefaultValue=false)]
        public Dictionary<string, string> Namespaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BpmnModel {\n");
            sb.Append("  DefinitionsAttributes: ").Append(DefinitionsAttributes).Append("\n");
            sb.Append("  Processes: ").Append(Processes).Append("\n");
            sb.Append("  LocationMap: ").Append(LocationMap).Append("\n");
            sb.Append("  LabelLocationMap: ").Append(LabelLocationMap).Append("\n");
            sb.Append("  FlowLocationMap: ").Append(FlowLocationMap).Append("\n");
            sb.Append("  Signals: ").Append(Signals).Append("\n");
            sb.Append("  Pools: ").Append(Pools).Append("\n");
            sb.Append("  Imports: ").Append(Imports).Append("\n");
            sb.Append("  Interfaces: ").Append(Interfaces).Append("\n");
            sb.Append("  GlobalArtifacts: ").Append(GlobalArtifacts).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  TargetNamespace: ").Append(TargetNamespace).Append("\n");
            sb.Append("  SourceSystemId: ").Append(SourceSystemId).Append("\n");
            sb.Append("  UserTaskFormTypes: ").Append(UserTaskFormTypes).Append("\n");
            sb.Append("  StartEventFormTypes: ").Append(StartEventFormTypes).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  ItemDefinitions: ").Append(ItemDefinitions).Append("\n");
            sb.Append("  MainProcess: ").Append(MainProcess).Append("\n");
            sb.Append("  MessageFlows: ").Append(MessageFlows).Append("\n");
            sb.Append("  DataStores: ").Append(DataStores).Append("\n");
            sb.Append("  Namespaces: ").Append(Namespaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BpmnModel);
        }

        /// <summary>
        /// Returns true if BpmnModel instances are equal
        /// </summary>
        /// <param name="input">Instance of BpmnModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BpmnModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefinitionsAttributes == input.DefinitionsAttributes ||
                    this.DefinitionsAttributes != null &&
                    this.DefinitionsAttributes.SequenceEqual(input.DefinitionsAttributes)
                ) && 
                (
                    this.Processes == input.Processes ||
                    this.Processes != null &&
                    this.Processes.SequenceEqual(input.Processes)
                ) && 
                (
                    this.LocationMap == input.LocationMap ||
                    this.LocationMap != null &&
                    this.LocationMap.SequenceEqual(input.LocationMap)
                ) && 
                (
                    this.LabelLocationMap == input.LabelLocationMap ||
                    this.LabelLocationMap != null &&
                    this.LabelLocationMap.SequenceEqual(input.LabelLocationMap)
                ) && 
                (
                    this.FlowLocationMap == input.FlowLocationMap ||
                    this.FlowLocationMap != null &&
                    this.FlowLocationMap.SequenceEqual(input.FlowLocationMap)
                ) && 
                (
                    this.Signals == input.Signals ||
                    this.Signals != null &&
                    this.Signals.SequenceEqual(input.Signals)
                ) && 
                (
                    this.Pools == input.Pools ||
                    this.Pools != null &&
                    this.Pools.SequenceEqual(input.Pools)
                ) && 
                (
                    this.Imports == input.Imports ||
                    this.Imports != null &&
                    this.Imports.SequenceEqual(input.Imports)
                ) && 
                (
                    this.Interfaces == input.Interfaces ||
                    this.Interfaces != null &&
                    this.Interfaces.SequenceEqual(input.Interfaces)
                ) && 
                (
                    this.GlobalArtifacts == input.GlobalArtifacts ||
                    this.GlobalArtifacts != null &&
                    this.GlobalArtifacts.SequenceEqual(input.GlobalArtifacts)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.TargetNamespace == input.TargetNamespace ||
                    (this.TargetNamespace != null &&
                    this.TargetNamespace.Equals(input.TargetNamespace))
                ) && 
                (
                    this.SourceSystemId == input.SourceSystemId ||
                    (this.SourceSystemId != null &&
                    this.SourceSystemId.Equals(input.SourceSystemId))
                ) && 
                (
                    this.UserTaskFormTypes == input.UserTaskFormTypes ||
                    this.UserTaskFormTypes != null &&
                    this.UserTaskFormTypes.SequenceEqual(input.UserTaskFormTypes)
                ) && 
                (
                    this.StartEventFormTypes == input.StartEventFormTypes ||
                    this.StartEventFormTypes != null &&
                    this.StartEventFormTypes.SequenceEqual(input.StartEventFormTypes)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.ItemDefinitions == input.ItemDefinitions ||
                    this.ItemDefinitions != null &&
                    this.ItemDefinitions.SequenceEqual(input.ItemDefinitions)
                ) && 
                (
                    this.MainProcess == input.MainProcess ||
                    (this.MainProcess != null &&
                    this.MainProcess.Equals(input.MainProcess))
                ) && 
                (
                    this.MessageFlows == input.MessageFlows ||
                    this.MessageFlows != null &&
                    this.MessageFlows.SequenceEqual(input.MessageFlows)
                ) && 
                (
                    this.DataStores == input.DataStores ||
                    this.DataStores != null &&
                    this.DataStores.SequenceEqual(input.DataStores)
                ) && 
                (
                    this.Namespaces == input.Namespaces ||
                    this.Namespaces != null &&
                    this.Namespaces.SequenceEqual(input.Namespaces)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionsAttributes != null)
                    hashCode = hashCode * 59 + this.DefinitionsAttributes.GetHashCode();
                if (this.Processes != null)
                    hashCode = hashCode * 59 + this.Processes.GetHashCode();
                if (this.LocationMap != null)
                    hashCode = hashCode * 59 + this.LocationMap.GetHashCode();
                if (this.LabelLocationMap != null)
                    hashCode = hashCode * 59 + this.LabelLocationMap.GetHashCode();
                if (this.FlowLocationMap != null)
                    hashCode = hashCode * 59 + this.FlowLocationMap.GetHashCode();
                if (this.Signals != null)
                    hashCode = hashCode * 59 + this.Signals.GetHashCode();
                if (this.Pools != null)
                    hashCode = hashCode * 59 + this.Pools.GetHashCode();
                if (this.Imports != null)
                    hashCode = hashCode * 59 + this.Imports.GetHashCode();
                if (this.Interfaces != null)
                    hashCode = hashCode * 59 + this.Interfaces.GetHashCode();
                if (this.GlobalArtifacts != null)
                    hashCode = hashCode * 59 + this.GlobalArtifacts.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.TargetNamespace != null)
                    hashCode = hashCode * 59 + this.TargetNamespace.GetHashCode();
                if (this.SourceSystemId != null)
                    hashCode = hashCode * 59 + this.SourceSystemId.GetHashCode();
                if (this.UserTaskFormTypes != null)
                    hashCode = hashCode * 59 + this.UserTaskFormTypes.GetHashCode();
                if (this.StartEventFormTypes != null)
                    hashCode = hashCode * 59 + this.StartEventFormTypes.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.ItemDefinitions != null)
                    hashCode = hashCode * 59 + this.ItemDefinitions.GetHashCode();
                if (this.MainProcess != null)
                    hashCode = hashCode * 59 + this.MainProcess.GetHashCode();
                if (this.MessageFlows != null)
                    hashCode = hashCode * 59 + this.MessageFlows.GetHashCode();
                if (this.DataStores != null)
                    hashCode = hashCode * 59 + this.DataStores.GetHashCode();
                if (this.Namespaces != null)
                    hashCode = hashCode * 59 + this.Namespaces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
