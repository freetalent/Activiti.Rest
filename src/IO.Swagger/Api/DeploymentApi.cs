/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns></returns>
        void DeleteDeployment (string deploymentId, bool? cascade = null);

        /// <summary>
        /// Delete a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeploymentWithHttpInfo (string deploymentId, bool? cascade = null);
        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse GetDeployment (string deploymentId);

        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> GetDeploymentWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment resource
        /// </summary>
        /// <remarks>
        /// Replace ** by ResourceId
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>DeploymentResourceResponse</returns>
        DeploymentResourceResponse GetDeploymentResource (string deploymentId);

        /// <summary>
        /// Get a deployment resource
        /// </summary>
        /// <remarks>
        /// Replace ** by ResourceId
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>ApiResponse of DeploymentResourceResponse</returns>
        ApiResponse<DeploymentResourceResponse> GetDeploymentResourceWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment resource content
        /// </summary>
        /// <remarks>
        /// The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetDeploymentResourceData (string deploymentId, string resourceId);

        /// <summary>
        /// Get a deployment resource content
        /// </summary>
        /// <remarks>
        /// The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetDeploymentResourceDataWithHttpInfo (string deploymentId, string resourceId);
        /// <summary>
        /// List resources in a deployment
        /// </summary>
        /// <remarks>
        /// The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>List&lt;DeploymentResourceResponse&gt;</returns>
        List<DeploymentResourceResponse> GetDeploymentResources (string deploymentId);

        /// <summary>
        /// List resources in a deployment
        /// </summary>
        /// <remarks>
        /// The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceResponse&gt;</returns>
        ApiResponse<List<DeploymentResourceResponse>> GetDeploymentResourcesWithHttpInfo (string deploymentId);
        /// <summary>
        /// List of Deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetDeployments (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of Deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetDeploymentsWithHttpInfo (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null);
        /// <summary>
        /// Create a new deployment
        /// </summary>
        /// <remarks>
        /// The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse UploadDeployment (string tenantId = null);

        /// <summary>
        /// Create a new deployment
        /// </summary>
        /// <remarks>
        /// The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> UploadDeploymentWithHttpInfo (string tenantId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeploymentAsync (string deploymentId, bool? cascade = null);

        /// <summary>
        /// Delete a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (string deploymentId, bool? cascade = null);
        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> GetDeploymentAsync (string deploymentId);

        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> GetDeploymentAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment resource
        /// </summary>
        /// <remarks>
        /// Replace ** by ResourceId
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>Task of DeploymentResourceResponse</returns>
        System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync (string deploymentId);

        /// <summary>
        /// Get a deployment resource
        /// </summary>
        /// <remarks>
        /// Replace ** by ResourceId
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>Task of ApiResponse (DeploymentResourceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResourceResponse>> GetDeploymentResourceAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment resource content
        /// </summary>
        /// <remarks>
        /// The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetDeploymentResourceDataAsync (string deploymentId, string resourceId);

        /// <summary>
        /// Get a deployment resource content
        /// </summary>
        /// <remarks>
        /// The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetDeploymentResourceDataAsyncWithHttpInfo (string deploymentId, string resourceId);
        /// <summary>
        /// List resources in a deployment
        /// </summary>
        /// <remarks>
        /// The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>Task of List&lt;DeploymentResourceResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResourceResponse>> GetDeploymentResourcesAsync (string deploymentId);

        /// <summary>
        /// List resources in a deployment
        /// </summary>
        /// <remarks>
        /// The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResourceResponse>>> GetDeploymentResourcesAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// List of Deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetDeploymentsAsync (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of Deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetDeploymentsAsyncWithHttpInfo (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null);
        /// <summary>
        /// Create a new deployment
        /// </summary>
        /// <remarks>
        /// The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> UploadDeploymentAsync (string tenantId = null);

        /// <summary>
        /// Create a new deployment
        /// </summary>
        /// <remarks>
        /// The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> UploadDeploymentAsyncWithHttpInfo (string tenantId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeploymentApi : IDeploymentApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeploymentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeploymentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns></returns>
        public void DeleteDeployment (string deploymentId, bool? cascade = null)
        {
             DeleteDeploymentWithHttpInfo(deploymentId, cascade);
        }

        /// <summary>
        /// Delete a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeploymentWithHttpInfo (string deploymentId, bool? cascade = null)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeleteDeployment");

            var localVarPath = "/repository/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync (string deploymentId, bool? cascade = null)
        {
             await DeleteDeploymentAsyncWithHttpInfo(deploymentId, cascade);

        }

        /// <summary>
        /// Delete a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to delete.</param>
        /// <param name="cascade"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentAsyncWithHttpInfo (string deploymentId, bool? cascade = null)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeleteDeployment");

            var localVarPath = "/repository/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (cascade != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cascade", cascade)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse GetDeployment (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = GetDeploymentWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > GetDeploymentWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeployment");

            var localVarPath = "/repository/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> GetDeploymentAsync (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await GetDeploymentAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a deployment 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> GetDeploymentAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeployment");

            var localVarPath = "/repository/deployments/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a deployment resource Replace ** by ResourceId
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>DeploymentResourceResponse</returns>
        public DeploymentResourceResponse GetDeploymentResource (string deploymentId)
        {
             ApiResponse<DeploymentResourceResponse> localVarResponse = GetDeploymentResourceWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a deployment resource Replace ** by ResourceId
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>ApiResponse of DeploymentResourceResponse</returns>
        public ApiResponse< DeploymentResourceResponse > GetDeploymentResourceWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResource");

            var localVarPath = "/repository/deployments/{deploymentId}/resources/**";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResourceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResourceResponse)));
        }

        /// <summary>
        /// Get a deployment resource Replace ** by ResourceId
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>Task of DeploymentResourceResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync (string deploymentId)
        {
             ApiResponse<DeploymentResourceResponse> localVarResponse = await GetDeploymentResourceAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a deployment resource Replace ** by ResourceId
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <returns>Task of ApiResponse (DeploymentResourceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResourceResponse>> GetDeploymentResourceAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResource");

            var localVarPath = "/repository/deployments/{deploymentId}/resources/**";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResourceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResourceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResourceResponse)));
        }

        /// <summary>
        /// Get a deployment resource content The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetDeploymentResourceData (string deploymentId, string resourceId)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetDeploymentResourceDataWithHttpInfo(deploymentId, resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a deployment resource content The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetDeploymentResourceDataWithHttpInfo (string deploymentId, string resourceId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResourceData");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");

            var localVarPath = "/repository/deployments/{deploymentId}/resourcedata/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get a deployment resource content The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetDeploymentResourceDataAsync (string deploymentId, string resourceId)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetDeploymentResourceDataAsyncWithHttpInfo(deploymentId, resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a deployment resource content The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment the requested resource is part of.</param>
        /// <param name="resourceId">The id of the resource to get the data for. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetDeploymentResourceDataAsyncWithHttpInfo (string deploymentId, string resourceId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResourceData");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DeploymentApi->GetDeploymentResourceData");

            var localVarPath = "/repository/deployments/{deploymentId}/resourcedata/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResourceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// List resources in a deployment The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>List&lt;DeploymentResourceResponse&gt;</returns>
        public List<DeploymentResourceResponse> GetDeploymentResources (string deploymentId)
        {
             ApiResponse<List<DeploymentResourceResponse>> localVarResponse = GetDeploymentResourcesWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List resources in a deployment The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>ApiResponse of List&lt;DeploymentResourceResponse&gt;</returns>
        public ApiResponse< List<DeploymentResourceResponse> > GetDeploymentResourcesWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResources");

            var localVarPath = "/repository/deployments/{deploymentId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResourceResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeploymentResourceResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResourceResponse>)));
        }

        /// <summary>
        /// List resources in a deployment The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>Task of List&lt;DeploymentResourceResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResourceResponse>> GetDeploymentResourcesAsync (string deploymentId)
        {
             ApiResponse<List<DeploymentResourceResponse>> localVarResponse = await GetDeploymentResourcesAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List resources in a deployment The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">The id of the deployment to get the resources for.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResourceResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentResourceResponse>>> GetDeploymentResourcesAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->GetDeploymentResources");

            var localVarPath = "/repository/deployments/{deploymentId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeploymentResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResourceResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeploymentResourceResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResourceResponse>)));
        }

        /// <summary>
        /// List of Deployments 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetDeployments (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetDeploymentsWithHttpInfo(name, nameLike, category, categoryNotEquals, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of Deployments 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetDeploymentsWithHttpInfo (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/repository/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of Deployments 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetDeploymentsAsync (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetDeploymentsAsyncWithHttpInfo(name, nameLike, category, categoryNotEquals, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of Deployments 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return deployments with the given name. (optional)</param>
        /// <param name="nameLike">Only return deployments with a name like the given name. (optional)</param>
        /// <param name="category">Only return deployments with the given category. (optional)</param>
        /// <param name="categoryNotEquals">Only return deployments which don�t have the given category. (optional)</param>
        /// <param name="tenantId">Only return deployments with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetDeploymentsAsyncWithHttpInfo (string name = null, string nameLike = null, string category = null, string categoryNotEquals = null, string tenantId = null, string tenantIdLike = null, string withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/repository/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Create a new deployment The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse UploadDeployment (string tenantId = null)
        {
             ApiResponse<DeploymentResponse> localVarResponse = UploadDeploymentWithHttpInfo(tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new deployment The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > UploadDeploymentWithHttpInfo (string tenantId = null)
        {

            var localVarPath = "/repository/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Create a new deployment The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> UploadDeploymentAsync (string tenantId = null)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await UploadDeploymentAsyncWithHttpInfo(tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new deployment The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.  An additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"> (optional)</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> UploadDeploymentAsyncWithHttpInfo (string tenantId = null)
        {

            var localVarPath = "/repository/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

    }
}
