/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExecutionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Object</returns>
        Object CreateExecutionVariable (string executionId);

        /// <summary>
        /// Create variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateExecutionVariableWithHttpInfo (string executionId);
        /// <summary>
        /// Update variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Object</returns>
        Object CreateOrUpdateExecutionVariable (string executionId);

        /// <summary>
        /// Update variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateOrUpdateExecutionVariableWithHttpInfo (string executionId);
        /// <summary>
        /// Delete all variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns></returns>
        void DeleteLocalVariables (string executionId);

        /// <summary>
        /// Delete all variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocalVariablesWithHttpInfo (string executionId);
        /// <summary>
        /// Delete a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        void DeletedExecutionVariable (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Delete a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletedExecutionVariableWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// Signal event received
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ExecuteExecutionAction (ExecutionActionRequest body = null);

        /// <summary>
        /// Signal event received
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteExecutionActionWithHttpInfo (ExecutionActionRequest body = null);
        /// <summary>
        /// Get active activities in an execution
        /// </summary>
        /// <remarks>
        /// Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetActiveActivities (string executionId);

        /// <summary>
        /// Get active activities in an execution
        /// </summary>
        /// <remarks>
        /// Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetActiveActivitiesWithHttpInfo (string executionId);
        /// <summary>
        /// Get an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>ExecutionResponse</returns>
        ExecutionResponse GetExecution (string executionId);

        /// <summary>
        /// Get an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>ApiResponse of ExecutionResponse</returns>
        ApiResponse<ExecutionResponse> GetExecutionWithHttpInfo (string executionId);
        /// <summary>
        /// Get a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>RestVariable</returns>
        RestVariable GetExecutionVariable (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> GetExecutionVariableWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// Get the binary data for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetExecutionVariableData (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Get the binary data for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetExecutionVariableDataWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// List of executions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetExecutions (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of executions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetExecutionsWithHttpInfo (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// List of variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        List<RestVariable> ListExecutionVariables (string executionId, string scope = null);

        /// <summary>
        /// List of variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        ApiResponse<List<RestVariable>> ListExecutionVariablesWithHttpInfo (string executionId, string scope = null);
        /// <summary>
        /// Execute an action on an execution
        /// </summary>
        /// <remarks>
        /// ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ExecutionResponse</returns>
        ExecutionResponse PerformExecutionAction (string executionId, ExecutionActionRequest body = null);

        /// <summary>
        /// Execute an action on an execution
        /// </summary>
        /// <remarks>
        /// ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ExecutionResponse</returns>
        ApiResponse<ExecutionResponse> PerformExecutionActionWithHttpInfo (string executionId, ExecutionActionRequest body = null);
        /// <summary>
        /// Query executions
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse QueryExecutions (ExecutionQueryRequest body = null);

        /// <summary>
        /// Query executions
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> QueryExecutionsWithHttpInfo (ExecutionQueryRequest body = null);
        /// <summary>
        /// Update a variable on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>RestVariable</returns>
        RestVariable UpdateExecutionVariable (string executionId, string variableName);

        /// <summary>
        /// Update a variable on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> UpdateExecutionVariableWithHttpInfo (string executionId, string variableName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateExecutionVariableAsync (string executionId);

        /// <summary>
        /// Create variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateExecutionVariableAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Update variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateOrUpdateExecutionVariableAsync (string executionId);

        /// <summary>
        /// Update variables on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateExecutionVariableAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Delete all variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocalVariablesAsync (string executionId);

        /// <summary>
        /// Delete all variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocalVariablesAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Delete a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletedExecutionVariableAsync (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Delete a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletedExecutionVariableAsyncWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// Signal event received
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteExecutionActionAsync (ExecutionActionRequest body = null);

        /// <summary>
        /// Signal event received
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteExecutionActionAsyncWithHttpInfo (ExecutionActionRequest body = null);
        /// <summary>
        /// Get active activities in an execution
        /// </summary>
        /// <remarks>
        /// Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetActiveActivitiesAsync (string executionId);

        /// <summary>
        /// Get active activities in an execution
        /// </summary>
        /// <remarks>
        /// Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetActiveActivitiesAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Get an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>Task of ExecutionResponse</returns>
        System.Threading.Tasks.Task<ExecutionResponse> GetExecutionAsync (string executionId);

        /// <summary>
        /// Get an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>Task of ApiResponse (ExecutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutionResponse>> GetExecutionAsyncWithHttpInfo (string executionId);
        /// <summary>
        /// Get a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> GetExecutionVariableAsync (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetExecutionVariableAsyncWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// Get the binary data for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetExecutionVariableDataAsync (string executionId, string variableName, string scope = null);

        /// <summary>
        /// Get the binary data for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetExecutionVariableDataAsyncWithHttpInfo (string executionId, string variableName, string scope = null);
        /// <summary>
        /// List of executions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetExecutionsAsync (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of executions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetExecutionsAsyncWithHttpInfo (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// List of variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        System.Threading.Tasks.Task<List<RestVariable>> ListExecutionVariablesAsync (string executionId, string scope = null);

        /// <summary>
        /// List of variables for an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> ListExecutionVariablesAsyncWithHttpInfo (string executionId, string scope = null);
        /// <summary>
        /// Execute an action on an execution
        /// </summary>
        /// <remarks>
        /// ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ExecutionResponse</returns>
        System.Threading.Tasks.Task<ExecutionResponse> PerformExecutionActionAsync (string executionId, ExecutionActionRequest body = null);

        /// <summary>
        /// Execute an action on an execution
        /// </summary>
        /// <remarks>
        /// ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ExecutionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutionResponse>> PerformExecutionActionAsyncWithHttpInfo (string executionId, ExecutionActionRequest body = null);
        /// <summary>
        /// Query executions
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> QueryExecutionsAsync (ExecutionQueryRequest body = null);

        /// <summary>
        /// Query executions
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryExecutionsAsyncWithHttpInfo (ExecutionQueryRequest body = null);
        /// <summary>
        /// Update a variable on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> UpdateExecutionVariableAsync (string executionId, string variableName);

        /// <summary>
        /// Update a variable on an execution
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateExecutionVariableAsyncWithHttpInfo (string executionId, string variableName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExecutionsApi : IExecutionsApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExecutionsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExecutionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Object</returns>
        public Object CreateExecutionVariable (string executionId)
        {
             ApiResponse<Object> localVarResponse = CreateExecutionVariableWithHttpInfo(executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateExecutionVariableWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->CreateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateExecutionVariableAsync (string executionId)
        {
             ApiResponse<Object> localVarResponse = await CreateExecutionVariableAsyncWithHttpInfo(executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateExecutionVariableAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->CreateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Object</returns>
        public Object CreateOrUpdateExecutionVariable (string executionId)
        {
             ApiResponse<Object> localVarResponse = CreateOrUpdateExecutionVariableWithHttpInfo(executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateOrUpdateExecutionVariableWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->CreateOrUpdateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateOrUpdateExecutionVariableAsync (string executionId)
        {
             ApiResponse<Object> localVarResponse = await CreateOrUpdateExecutionVariableAsyncWithHttpInfo(executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update variables on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateExecutionVariableAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->CreateOrUpdateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete all variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns></returns>
        public void DeleteLocalVariables (string executionId)
        {
             DeleteLocalVariablesWithHttpInfo(executionId);
        }

        /// <summary>
        /// Delete all variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLocalVariablesWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->DeleteLocalVariables");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocalVariablesAsync (string executionId)
        {
             await DeleteLocalVariablesAsyncWithHttpInfo(executionId);

        }

        /// <summary>
        /// Delete all variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocalVariablesAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->DeleteLocalVariables");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        public void DeletedExecutionVariable (string executionId, string variableName, string scope = null)
        {
             DeletedExecutionVariableWithHttpInfo(executionId, variableName, scope);
        }

        /// <summary>
        /// Delete a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletedExecutionVariableWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->DeletedExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->DeletedExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletedExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletedExecutionVariableAsync (string executionId, string variableName, string scope = null)
        {
             await DeletedExecutionVariableAsyncWithHttpInfo(executionId, variableName, scope);

        }

        /// <summary>
        /// Delete a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletedExecutionVariableAsyncWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->DeletedExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->DeletedExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletedExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Signal event received 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ExecuteExecutionAction (ExecutionActionRequest body = null)
        {
             ExecuteExecutionActionWithHttpInfo(body);
        }

        /// <summary>
        /// Signal event received 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteExecutionActionWithHttpInfo (ExecutionActionRequest body = null)
        {

            var localVarPath = "/runtime/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteExecutionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Signal event received 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteExecutionActionAsync (ExecutionActionRequest body = null)
        {
             await ExecuteExecutionActionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Signal event received 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteExecutionActionAsyncWithHttpInfo (ExecutionActionRequest body = null)
        {

            var localVarPath = "/runtime/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteExecutionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get active activities in an execution Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetActiveActivities (string executionId)
        {
             ApiResponse<List<string>> localVarResponse = GetActiveActivitiesWithHttpInfo(executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get active activities in an execution Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetActiveActivitiesWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetActiveActivities");

            var localVarPath = "/runtime/executions/{executionId}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get active activities in an execution Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetActiveActivitiesAsync (string executionId)
        {
             ApiResponse<List<string>> localVarResponse = await GetActiveActivitiesAsyncWithHttpInfo(executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get active activities in an execution Returns all activities which are active in the execution and in all child-executions (and their children, recursively), if any.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get activities for.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetActiveActivitiesAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetActiveActivities");

            var localVarPath = "/runtime/executions/{executionId}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>ExecutionResponse</returns>
        public ExecutionResponse GetExecution (string executionId)
        {
             ApiResponse<ExecutionResponse> localVarResponse = GetExecutionWithHttpInfo(executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>ApiResponse of ExecutionResponse</returns>
        public ApiResponse< ExecutionResponse > GetExecutionWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecution");

            var localVarPath = "/runtime/executions/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionResponse)));
        }

        /// <summary>
        /// Get an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>Task of ExecutionResponse</returns>
        public async System.Threading.Tasks.Task<ExecutionResponse> GetExecutionAsync (string executionId)
        {
             ApiResponse<ExecutionResponse> localVarResponse = await GetExecutionAsyncWithHttpInfo(executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to get.</param>
        /// <returns>Task of ApiResponse (ExecutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutionResponse>> GetExecutionAsyncWithHttpInfo (string executionId)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecution");

            var localVarPath = "/runtime/executions/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionResponse)));
        }

        /// <summary>
        /// Get a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>RestVariable</returns>
        public RestVariable GetExecutionVariable (string executionId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = GetExecutionVariableWithHttpInfo(executionId, variableName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > GetExecutionVariableWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->GetExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Get a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> GetExecutionVariableAsync (string executionId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = await GetExecutionVariableAsyncWithHttpInfo(executionId, variableName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a variable for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope">Either local or global. If omitted, local variable is returned (if exists). If not, a global variable is returned (if exists). (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetExecutionVariableAsyncWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->GetExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Get the binary data for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetExecutionVariableData (string executionId, string variableName, string scope = null)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetExecutionVariableDataWithHttpInfo(executionId, variableName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the binary data for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetExecutionVariableDataWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecutionVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->GetExecutionVariableData");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get the binary data for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetExecutionVariableDataAsync (string executionId, string variableName, string scope = null)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetExecutionVariableDataAsyncWithHttpInfo(executionId, variableName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the binary data for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetExecutionVariableDataAsyncWithHttpInfo (string executionId, string variableName, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->GetExecutionVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->GetExecutionVariableData");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// List of executions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetExecutions (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetExecutionsWithHttpInfo(id, activityId, processDefinitionKey, processDefinitionId, processInstanceId, messageEventSubscriptionName, signalEventSubscriptionName, parentId, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of executions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetExecutionsWithHttpInfo (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/runtime/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (messageEventSubscriptionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messageEventSubscriptionName", messageEventSubscriptionName)); // query parameter
            if (signalEventSubscriptionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "signalEventSubscriptionName", signalEventSubscriptionName)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of executions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetExecutionsAsync (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetExecutionsAsyncWithHttpInfo(id, activityId, processDefinitionKey, processDefinitionId, processInstanceId, messageEventSubscriptionName, signalEventSubscriptionName, parentId, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of executions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="activityId">Only return executions with the given activity id. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="processInstanceId">Only return executions which are part of the process instance with the given id. (optional)</param>
        /// <param name="messageEventSubscriptionName">Only return executions which are subscribed to a message with the given name. (optional)</param>
        /// <param name="signalEventSubscriptionName">Only return executions which are subscribed to a signal with the given name. (optional)</param>
        /// <param name="parentId">Only return executions which are a direct child of the given execution. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetExecutionsAsyncWithHttpInfo (string id = null, string activityId = null, string processDefinitionKey = null, string processDefinitionId = null, string processInstanceId = null, string messageEventSubscriptionName = null, string signalEventSubscriptionName = null, string parentId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/runtime/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (activityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (messageEventSubscriptionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messageEventSubscriptionName", messageEventSubscriptionName)); // query parameter
            if (signalEventSubscriptionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "signalEventSubscriptionName", signalEventSubscriptionName)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        public List<RestVariable> ListExecutionVariables (string executionId, string scope = null)
        {
             ApiResponse<List<RestVariable>> localVarResponse = ListExecutionVariablesWithHttpInfo(executionId, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        public ApiResponse< List<RestVariable> > ListExecutionVariablesWithHttpInfo (string executionId, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->ListExecutionVariables");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExecutionVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// List of variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestVariable>> ListExecutionVariablesAsync (string executionId, string scope = null)
        {
             ApiResponse<List<RestVariable>> localVarResponse = await ListExecutionVariablesAsyncWithHttpInfo(executionId, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of variables for an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to the variables for.</param>
        /// <param name="scope">Either local or global. If omitted, both local and global scoped variables are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> ListExecutionVariablesAsyncWithHttpInfo (string executionId, string scope = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->ListExecutionVariables");

            var localVarPath = "/runtime/executions/{executionId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListExecutionVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// Execute an action on an execution ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ExecutionResponse</returns>
        public ExecutionResponse PerformExecutionAction (string executionId, ExecutionActionRequest body = null)
        {
             ApiResponse<ExecutionResponse> localVarResponse = PerformExecutionActionWithHttpInfo(executionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute an action on an execution ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ExecutionResponse</returns>
        public ApiResponse< ExecutionResponse > PerformExecutionActionWithHttpInfo (string executionId, ExecutionActionRequest body = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->PerformExecutionAction");

            var localVarPath = "/runtime/executions/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformExecutionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionResponse)));
        }

        /// <summary>
        /// Execute an action on an execution ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ExecutionResponse</returns>
        public async System.Threading.Tasks.Task<ExecutionResponse> PerformExecutionActionAsync (string executionId, ExecutionActionRequest body = null)
        {
             ApiResponse<ExecutionResponse> localVarResponse = await PerformExecutionActionAsyncWithHttpInfo(executionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute an action on an execution ## Request body (signal an execution):   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Both a variables and transientVariables property is accepted with following structure &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot;,   \&quot;variables\&quot; : [     {       \&quot;name\&quot;: \&quot;myVar\&quot;,       \&quot;value\&quot;: \&quot;someValue\&quot;     }   ] }&#x60;&#x60;&#x60;   ## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;signal\&quot; } &#x60;&#x60;&#x60;   Notifies the execution that a signal event has been received, requires a signalName parameter. Optional variables can be passed that are set on the execution before the action is executed.## Request body (signal event received for execution)   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot;:\&quot;messageEventReceived\&quot;,   \&quot;messageName\&quot;:\&quot;myMessage\&quot;   \&quot;variables\&quot;: [  ] } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to execute action on.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ExecutionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutionResponse>> PerformExecutionActionAsyncWithHttpInfo (string executionId, ExecutionActionRequest body = null)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->PerformExecutionAction");

            var localVarPath = "/runtime/executions/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformExecutionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionResponse)));
        }

        /// <summary>
        /// Query executions The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse QueryExecutions (ExecutionQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = QueryExecutionsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query executions The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > QueryExecutionsWithHttpInfo (ExecutionQueryRequest body = null)
        {

            var localVarPath = "/query/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Query executions The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> QueryExecutionsAsync (ExecutionQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = await QueryExecutionsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query executions The request body can contain all possible filters that can be used in the List executions URL query. On top of these, it�s possible to provide an array of variables and processInstanceVariables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryExecutionsAsyncWithHttpInfo (ExecutionQueryRequest body = null)
        {

            var localVarPath = "/query/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Update a variable on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>RestVariable</returns>
        public RestVariable UpdateExecutionVariable (string executionId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = UpdateExecutionVariableWithHttpInfo(executionId, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a variable on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > UpdateExecutionVariableWithHttpInfo (string executionId, string variableName)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->UpdateExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->UpdateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Update a variable on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> UpdateExecutionVariableAsync (string executionId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = await UpdateExecutionVariableAsyncWithHttpInfo(executionId, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a variable on an execution 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="executionId">The id of the execution to create the new variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateExecutionVariableAsyncWithHttpInfo (string executionId, string variableName)
        {
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling ExecutionsApi->UpdateExecutionVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ExecutionsApi->UpdateExecutionVariable");

            var localVarPath = "/runtime/executions/{executionId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExecutionVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

    }
}
