/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessDefinitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a candidate starter to a process definition
        /// </summary>
        /// <remarks>
        /// ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink CreateIdentityLink (string processDefinitionId, RestIdentityLink body = null);

        /// <summary>
        /// Add a candidate starter to a process definition
        /// </summary>
        /// <remarks>
        /// ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> CreateIdentityLinkWithHttpInfo (string processDefinitionId, RestIdentityLink body = null);
        /// <summary>
        /// Delete a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns></returns>
        void DeleteIdentityLink (string processDefinitionId, string family, string identityId);

        /// <summary>
        /// Delete a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityLinkWithHttpInfo (string processDefinitionId, string family, string identityId);
        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate)
        /// </summary>
        /// <remarks>
        /// ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>ProcessDefinitionResponse</returns>
        ProcessDefinitionResponse ExecuteProcessDefinitionAction (string processDefinitionId, ProcessDefinitionActionRequest body);

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate)
        /// </summary>
        /// <remarks>
        /// ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProcessDefinitionResponse</returns>
        ApiResponse<ProcessDefinitionResponse> ExecuteProcessDefinitionActionWithHttpInfo (string processDefinitionId, ProcessDefinitionActionRequest body);
        /// <summary>
        /// Get a process definition BPMN model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>BpmnModel</returns>
        BpmnModel GetBpmnModelResource (string processDefinitionId);

        /// <summary>
        /// Get a process definition BPMN model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>ApiResponse of BpmnModel</returns>
        ApiResponse<BpmnModel> GetBpmnModelResourceWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink GetIdentityLink (string processDefinitionId, string family, string identityId);

        /// <summary>
        /// Get a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> GetIdentityLinkWithHttpInfo (string processDefinitionId, string family, string identityId);
        /// <summary>
        /// Get all candidate starters for a process-definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        List<RestIdentityLink> GetIdentityLinks (string processDefinitionId);

        /// <summary>
        /// Get all candidate starters for a process-definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        ApiResponse<List<RestIdentityLink>> GetIdentityLinksWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetModelResource (string processDefinitionId);

        /// <summary>
        /// Get a process definition image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetModelResourceWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>ProcessDefinitionResponse</returns>
        ProcessDefinitionResponse GetProcessDefinition (string processDefinitionId);

        /// <summary>
        /// Get a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>ApiResponse of ProcessDefinitionResponse</returns>
        ApiResponse<ProcessDefinitionResponse> GetProcessDefinitionWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition resource content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetProcessDefinitionResource (string processDefinitionId);

        /// <summary>
        /// Get a process definition resource content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetProcessDefinitionResourceWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// List of process definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetProcessDefinitions (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null);

        /// <summary>
        /// List of process definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetProcessDefinitionsWithHttpInfo (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a candidate starter to a process definition
        /// </summary>
        /// <remarks>
        /// ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync (string processDefinitionId, RestIdentityLink body = null);

        /// <summary>
        /// Add a candidate starter to a process definition
        /// </summary>
        /// <remarks>
        /// ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateIdentityLinkAsyncWithHttpInfo (string processDefinitionId, RestIdentityLink body = null);
        /// <summary>
        /// Delete a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIdentityLinkAsync (string processDefinitionId, string family, string identityId);

        /// <summary>
        /// Delete a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityLinkAsyncWithHttpInfo (string processDefinitionId, string family, string identityId);
        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate)
        /// </summary>
        /// <remarks>
        /// ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ProcessDefinitionResponse</returns>
        System.Threading.Tasks.Task<ProcessDefinitionResponse> ExecuteProcessDefinitionActionAsync (string processDefinitionId, ProcessDefinitionActionRequest body);

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate)
        /// </summary>
        /// <remarks>
        /// ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProcessDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionResponse>> ExecuteProcessDefinitionActionAsyncWithHttpInfo (string processDefinitionId, ProcessDefinitionActionRequest body);
        /// <summary>
        /// Get a process definition BPMN model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>Task of BpmnModel</returns>
        System.Threading.Tasks.Task<BpmnModel> GetBpmnModelResourceAsync (string processDefinitionId);

        /// <summary>
        /// Get a process definition BPMN model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>Task of ApiResponse (BpmnModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BpmnModel>> GetBpmnModelResourceAsyncWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync (string processDefinitionId, string family, string identityId);

        /// <summary>
        /// Get a candidate starter from a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetIdentityLinkAsyncWithHttpInfo (string processDefinitionId, string family, string identityId);
        /// <summary>
        /// Get all candidate starters for a process-definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        System.Threading.Tasks.Task<List<RestIdentityLink>> GetIdentityLinksAsync (string processDefinitionId);

        /// <summary>
        /// Get all candidate starters for a process-definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> GetIdentityLinksAsyncWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetModelResourceAsync (string processDefinitionId);

        /// <summary>
        /// Get a process definition image
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetModelResourceAsyncWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>Task of ProcessDefinitionResponse</returns>
        System.Threading.Tasks.Task<ProcessDefinitionResponse> GetProcessDefinitionAsync (string processDefinitionId);

        /// <summary>
        /// Get a process definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionResponse>> GetProcessDefinitionAsyncWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// Get a process definition resource content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetProcessDefinitionResourceAsync (string processDefinitionId);

        /// <summary>
        /// Get a process definition resource content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessDefinitionResourceAsyncWithHttpInfo (string processDefinitionId);
        /// <summary>
        /// List of process definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetProcessDefinitionsAsync (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null);

        /// <summary>
        /// List of process definitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetProcessDefinitionsAsyncWithHttpInfo (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessDefinitionsApi : IProcessDefinitionsApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessDefinitionsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessDefinitionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a candidate starter to a process definition ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink CreateIdentityLink (string processDefinitionId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = CreateIdentityLinkWithHttpInfo(processDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a candidate starter to a process definition ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > CreateIdentityLinkWithHttpInfo (string processDefinitionId, RestIdentityLink body = null)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->CreateIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Add a candidate starter to a process definition ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync (string processDefinitionId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await CreateIdentityLinkAsyncWithHttpInfo(processDefinitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a candidate starter to a process definition ## For a User   &#x60;&#x60;&#x60;JSON {   \&quot;user\&quot; : \&quot;kermit\&quot; } &#x60;&#x60;&#x60;  ## For a Group   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateIdentityLinkAsyncWithHttpInfo (string processDefinitionId, RestIdentityLink body = null)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->CreateIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Delete a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns></returns>
        public void DeleteIdentityLink (string processDefinitionId, string family, string identityId)
        {
             DeleteIdentityLinkWithHttpInfo(processDefinitionId, family, identityId);
        }

        /// <summary>
        /// Delete a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIdentityLinkWithHttpInfo (string processDefinitionId, string family, string identityId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->DeleteIdentityLink");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling ProcessDefinitionsApi->DeleteIdentityLink");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessDefinitionsApi->DeleteIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIdentityLinkAsync (string processDefinitionId, string family, string identityId)
        {
             await DeleteIdentityLinkAsyncWithHttpInfo(processDefinitionId, family, identityId);

        }

        /// <summary>
        /// Delete a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to remove as candidate starter.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityLinkAsyncWithHttpInfo (string processDefinitionId, string family, string identityId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->DeleteIdentityLink");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling ProcessDefinitionsApi->DeleteIdentityLink");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessDefinitionsApi->DeleteIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate) ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>ProcessDefinitionResponse</returns>
        public ProcessDefinitionResponse ExecuteProcessDefinitionAction (string processDefinitionId, ProcessDefinitionActionRequest body)
        {
             ApiResponse<ProcessDefinitionResponse> localVarResponse = ExecuteProcessDefinitionActionWithHttpInfo(processDefinitionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate) ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProcessDefinitionResponse</returns>
        public ApiResponse< ProcessDefinitionResponse > ExecuteProcessDefinitionActionWithHttpInfo (string processDefinitionId, ProcessDefinitionActionRequest body)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->ExecuteProcessDefinitionAction");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessDefinitionsApi->ExecuteProcessDefinitionAction");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteProcessDefinitionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessDefinitionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionResponse)));
        }

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate) ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ProcessDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionResponse> ExecuteProcessDefinitionActionAsync (string processDefinitionId, ProcessDefinitionActionRequest body)
        {
             ApiResponse<ProcessDefinitionResponse> localVarResponse = await ExecuteProcessDefinitionActionAsyncWithHttpInfo(processDefinitionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend or Activate) ## Update category for a process definition   &#x60;&#x60;&#x60;JSON {   \&quot;category\&quot; : \&quot;updatedcategory\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;suspend\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;false\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;   ## Activate a process definition  &#x60;&#x60;&#x60;JSON  {   \&quot;action\&quot; : \&quot;activate\&quot;,   \&quot;includeProcessInstances\&quot; : \&quot;true\&quot;,   \&quot;date\&quot; : \&quot;2013-04-15T00:42:12Z\&quot; } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ProcessDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionResponse>> ExecuteProcessDefinitionActionAsyncWithHttpInfo (string processDefinitionId, ProcessDefinitionActionRequest body)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->ExecuteProcessDefinitionAction");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessDefinitionsApi->ExecuteProcessDefinitionAction");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteProcessDefinitionAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessDefinitionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionResponse)));
        }

        /// <summary>
        /// Get a process definition BPMN model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>BpmnModel</returns>
        public BpmnModel GetBpmnModelResource (string processDefinitionId)
        {
             ApiResponse<BpmnModel> localVarResponse = GetBpmnModelResourceWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a process definition BPMN model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>ApiResponse of BpmnModel</returns>
        public ApiResponse< BpmnModel > GetBpmnModelResourceWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetBpmnModelResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBpmnModelResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BpmnModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BpmnModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BpmnModel)));
        }

        /// <summary>
        /// Get a process definition BPMN model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>Task of BpmnModel</returns>
        public async System.Threading.Tasks.Task<BpmnModel> GetBpmnModelResourceAsync (string processDefinitionId)
        {
             ApiResponse<BpmnModel> localVarResponse = await GetBpmnModelResourceAsyncWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a process definition BPMN model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the model for.</param>
        /// <returns>Task of ApiResponse (BpmnModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BpmnModel>> GetBpmnModelResourceAsyncWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetBpmnModelResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBpmnModelResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BpmnModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BpmnModel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BpmnModel)));
        }

        /// <summary>
        /// Get a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink GetIdentityLink (string processDefinitionId, string family, string identityId)
        {
             ApiResponse<RestIdentityLink> localVarResponse = GetIdentityLinkWithHttpInfo(processDefinitionId, family, identityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > GetIdentityLinkWithHttpInfo (string processDefinitionId, string family, string identityId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetIdentityLink");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling ProcessDefinitionsApi->GetIdentityLink");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessDefinitionsApi->GetIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync (string processDefinitionId, string family, string identityId)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await GetIdentityLinkAsyncWithHttpInfo(processDefinitionId, family, identityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a candidate starter from a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition.</param>
        /// <param name="family">Either users or groups, depending on the type of identity link.</param>
        /// <param name="identityId">Either the user or group of the identity to get as candidate starter.</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetIdentityLinkAsyncWithHttpInfo (string processDefinitionId, string family, string identityId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetIdentityLink");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling ProcessDefinitionsApi->GetIdentityLink");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessDefinitionsApi->GetIdentityLink");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get all candidate starters for a process-definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        public List<RestIdentityLink> GetIdentityLinks (string processDefinitionId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = GetIdentityLinksWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all candidate starters for a process-definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        public ApiResponse< List<RestIdentityLink> > GetIdentityLinksWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetIdentityLinks");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Get all candidate starters for a process-definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestIdentityLink>> GetIdentityLinksAsync (string processDefinitionId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = await GetIdentityLinksAsyncWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all candidate starters for a process-definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the identity links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> GetIdentityLinksAsyncWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetIdentityLinks");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Get a process definition image 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetModelResource (string processDefinitionId)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetModelResourceWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a process definition image 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetModelResourceWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetModelResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get a process definition image 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetModelResourceAsync (string processDefinitionId)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetModelResourceAsyncWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a process definition image 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId"></param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetModelResourceAsyncWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetModelResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>ProcessDefinitionResponse</returns>
        public ProcessDefinitionResponse GetProcessDefinition (string processDefinitionId)
        {
             ApiResponse<ProcessDefinitionResponse> localVarResponse = GetProcessDefinitionWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>ApiResponse of ProcessDefinitionResponse</returns>
        public ApiResponse< ProcessDefinitionResponse > GetProcessDefinitionWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetProcessDefinition");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessDefinitionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionResponse)));
        }

        /// <summary>
        /// Get a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>Task of ProcessDefinitionResponse</returns>
        public async System.Threading.Tasks.Task<ProcessDefinitionResponse> GetProcessDefinitionAsync (string processDefinitionId)
        {
             ApiResponse<ProcessDefinitionResponse> localVarResponse = await GetProcessDefinitionAsyncWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a process definition 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get.</param>
        /// <returns>Task of ApiResponse (ProcessDefinitionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessDefinitionResponse>> GetProcessDefinitionAsyncWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetProcessDefinition");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessDefinitionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessDefinitionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessDefinitionResponse)));
        }

        /// <summary>
        /// Get a process definition resource content 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetProcessDefinitionResource (string processDefinitionId)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetProcessDefinitionResourceWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a process definition resource content 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetProcessDefinitionResourceWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetProcessDefinitionResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/resourcedata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get a process definition resource content 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetProcessDefinitionResourceAsync (string processDefinitionId)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetProcessDefinitionResourceAsyncWithHttpInfo(processDefinitionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a process definition resource content 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processDefinitionId">The id of the process definition to get the resource data for.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessDefinitionResourceAsyncWithHttpInfo (string processDefinitionId)
        {
            // verify the required parameter 'processDefinitionId' is set
            if (processDefinitionId == null)
                throw new ApiException(400, "Missing required parameter 'processDefinitionId' when calling ProcessDefinitionsApi->GetProcessDefinitionResource");

            var localVarPath = "/repository/process-definitions/{processDefinitionId}/resourcedata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processDefinitionId != null) localVarPathParams.Add("processDefinitionId", Configuration.ApiClient.ParameterToString(processDefinitionId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitionResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// List of process definitions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetProcessDefinitions (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetProcessDefinitionsWithHttpInfo(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of process definitions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetProcessDefinitionsWithHttpInfo (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null)
        {

            var localVarPath = "/repository/process-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (startableByUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startableByUser", startableByUser)); // query parameter
            if (latest != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "latest", latest)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of process definitions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetProcessDefinitionsAsync (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetProcessDefinitionsAsyncWithHttpInfo(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of process definitions 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Only return process definitions with the given version. (optional)</param>
        /// <param name="name">Only return process definitions with the given name. (optional)</param>
        /// <param name="nameLike">Only return process definitions with a name like the given name. (optional)</param>
        /// <param name="key">Only return process definitions with the given key. (optional)</param>
        /// <param name="keyLike">Only return process definitions with a name like the given key. (optional)</param>
        /// <param name="resourceName">Only return process definitions with the given resource name. (optional)</param>
        /// <param name="resourceNameLike">Only return process definitions with a name like the given resource name. (optional)</param>
        /// <param name="category">Only return process definitions with the given category. (optional)</param>
        /// <param name="categoryLike">Only return process definitions with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return process definitions which don�t have the given category. (optional)</param>
        /// <param name="deploymentId">Only return process definitions with the given category. (optional)</param>
        /// <param name="startableByUser">Only return process definitions which are part of a deployment with the given id. (optional)</param>
        /// <param name="latest">Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)</param>
        /// <param name="suspended">If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetProcessDefinitionsAsyncWithHttpInfo (int? version = null, string name = null, string nameLike = null, string key = null, string keyLike = null, string resourceName = null, string resourceNameLike = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string deploymentId = null, string startableByUser = null, bool? latest = null, bool? suspended = null, string sort = null)
        {

            var localVarPath = "/repository/process-definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keyLike", keyLike)); // query parameter
            if (resourceName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceName", resourceName)); // query parameter
            if (resourceNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceNameLike", resourceNameLike)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (startableByUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startableByUser", startableByUser)); // query parameter
            if (latest != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "latest", latest)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

    }
}
