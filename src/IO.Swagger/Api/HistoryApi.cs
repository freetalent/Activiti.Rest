///* 
// * Activiti REST API
// *
// * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
// *
// * OpenAPI spec version: v1
// * 
// * Generated by: https://github.com/swagger-api/swagger-codegen.git
// */

//using System;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.Linq;
//using RestSharp;
//using IO.Swagger.Client;
//using IO.Swagger.Model;

//namespace IO.Swagger.Api
//{
//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//    public interface IHistoryApi : IApiAccessor
//    {
//        #region Synchronous Operations
//        /// <summary>
//        /// Create a new comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>CommentResponse</returns>
//        CommentResponse CreateComment (string , CommentResponse body = null);

//        /// <summary>
//        /// Create a new comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of CommentResponse</returns>
//        ApiResponse<CommentResponse> CreateCommentWithHttpInfo (string , CommentResponse body = null);
//        /// <summary>
//        /// Delete a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns></returns>
//        void DeleteComment (string processInstanceId, string commentId);

//        /// <summary>
//        /// Delete a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        ApiResponse<Object> DeleteCommentWithHttpInfo (string processInstanceId, string commentId);
//        /// <summary>
//        ///  Delete a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns></returns>
//        void DeleteHitoricProcessInstance (string processInstanceId);

//        /// <summary>
//        ///  Delete a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        ApiResponse<Object> DeleteHitoricProcessInstanceWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Delete a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns></returns>
//        void DeleteTaskInstance (string taskId);

//        /// <summary>
//        /// Delete a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        ApiResponse<Object> DeleteTaskInstanceWithHttpInfo (string taskId);
//        /// <summary>
//        /// Get a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>CommentResponse</returns>
//        CommentResponse GetComment (string processInstanceId, string commentId);

//        /// <summary>
//        /// Get a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>ApiResponse of CommentResponse</returns>
//        ApiResponse<CommentResponse> GetCommentWithHttpInfo (string processInstanceId, string commentId);
//        /// <summary>
//        /// Get all comments on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>List&lt;CommentResponse&gt;</returns>
//        List<CommentResponse> GetComments (string processInstanceId);

//        /// <summary>
//        /// Get all comments on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>ApiResponse of List&lt;CommentResponse&gt;</returns>
//        ApiResponse<List<CommentResponse>> GetCommentsWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse GetHistoricActivityInstances (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// Get historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> GetHistoricActivityInstancesWithHttpInfo (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Get historic detail
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse GetHistoricDetailInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null);

//        /// <summary>
//        /// Get historic detail
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> GetHistoricDetailInfoWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null);
//        /// <summary>
//        /// Get the binary data for a historic detail variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        List<byte[]> GetHistoricDetailVariableData (string detailId);

//        /// <summary>
//        /// Get the binary data for a historic detail variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        ApiResponse<List<byte[]>> GetHistoricDetailVariableDataWithHttpInfo (string detailId);
//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        List<byte[]> GetHistoricInstanceVariableData (string varInstanceId);

//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        ApiResponse<List<byte[]>> GetHistoricInstanceVariableDataWithHttpInfo (string varInstanceId);
//        /// <summary>
//        /// Get a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>HistoricProcessInstanceResponse</returns>
//        HistoricProcessInstanceResponse GetHistoricProcessInstance (string processInstanceId);

//        /// <summary>
//        /// Get a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of HistoricProcessInstanceResponse</returns>
//        ApiResponse<HistoricProcessInstanceResponse> GetHistoricProcessInstanceWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get the binary data for a historic process instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        List<byte[]> GetHistoricProcessInstanceVariableData (string processInstanceId, string variableName);

//        /// <summary>
//        /// Get the binary data for a historic process instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        ApiResponse<List<byte[]>> GetHistoricProcessInstanceVariableDataWithHttpInfo (string processInstanceId, string variableName);
//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        List<byte[]> GetHistoricTaskInstanceVariableData (string taskId, string variableName, string scope = null);

//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        ApiResponse<List<byte[]>> GetHistoricTaskInstanceVariableDataWithHttpInfo (string taskId, string variableName, string scope = null);
//        /// <summary>
//        /// List of historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse GetHistoricVariableInstances (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null);

//        /// <summary>
//        /// List of historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> GetHistoricVariableInstancesWithHttpInfo (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null);
//        /// <summary>
//        /// Get the identity links of a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        List<HistoricIdentityLinkResponse> GetProcessIdentityLinks (string processInstanceId);

//        /// <summary>
//        /// Get the identity links of a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        ApiResponse<List<HistoricIdentityLinkResponse>> GetProcessIdentityLinksWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get the identity links of a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        List<HistoricIdentityLinkResponse> GetTaskIdentityLinks (string taskId);

//        /// <summary>
//        /// Get the identity links of a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        ApiResponse<List<HistoricIdentityLinkResponse>> GetTaskIdentityLinksWithHttpInfo (string taskId);
//        /// <summary>
//        /// Get a single historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>HistoricTaskInstanceResponse</returns>
//        HistoricTaskInstanceResponse GetTaskInstance (string taskId);

//        /// <summary>
//        /// Get a single historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of HistoricTaskInstanceResponse</returns>
//        ApiResponse<HistoricTaskInstanceResponse> GetTaskInstanceWithHttpInfo (string taskId);
//        /// <summary>
//        /// List of historic process instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse ListHistoricProcessInstances (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// List of historic process instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> ListHistoricProcessInstancesWithHttpInfo (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Get historic task instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse ListHistoricTaskInstances (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// Get historic task instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> ListHistoricTaskInstancesWithHttpInfo (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Query for historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse QueryActivityInstances (HistoricActivityInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> QueryActivityInstancesWithHttpInfo (HistoricActivityInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic details
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse QueryHistoricDetail (HistoricDetailQueryRequest body = null);

//        /// <summary>
//        /// Query for historic details
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> QueryHistoricDetailWithHttpInfo (HistoricDetailQueryRequest body = null);
//        /// <summary>
//        /// Query for historic process instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse QueryHistoricProcessInstance (HistoricProcessInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic process instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> QueryHistoricProcessInstanceWithHttpInfo (HistoricProcessInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic task instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse QueryHistoricTaskInstance (HistoricTaskInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic task instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> QueryHistoricTaskInstanceWithHttpInfo (HistoricTaskInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        DataResponse QueryVariableInstances (HistoricVariableInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        ApiResponse<DataResponse> QueryVariableInstancesWithHttpInfo (HistoricVariableInstanceQueryRequest body = null);
//        #endregion Synchronous Operations
//        #region Asynchronous Operations
//        /// <summary>
//        /// Create a new comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of CommentResponse</returns>
//        System.Threading.Tasks.Task<CommentResponse> CreateCommentAsync (string , CommentResponse body = null);

//        /// <summary>
//        /// Create a new comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (CommentResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateCommentAsyncWithHttpInfo (string , CommentResponse body = null);
//        /// <summary>
//        /// Delete a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of void</returns>
//        System.Threading.Tasks.Task DeleteCommentAsync (string processInstanceId, string commentId);

//        /// <summary>
//        /// Delete a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of ApiResponse</returns>
//        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (string processInstanceId, string commentId);
//        /// <summary>
//        ///  Delete a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of void</returns>
//        System.Threading.Tasks.Task DeleteHitoricProcessInstanceAsync (string processInstanceId);

//        /// <summary>
//        ///  Delete a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse</returns>
//        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHitoricProcessInstanceAsyncWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Delete a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of void</returns>
//        System.Threading.Tasks.Task DeleteTaskInstanceAsync (string taskId);

//        /// <summary>
//        /// Delete a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse</returns>
//        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceAsyncWithHttpInfo (string taskId);
//        /// <summary>
//        /// Get a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of CommentResponse</returns>
//        System.Threading.Tasks.Task<CommentResponse> GetCommentAsync (string processInstanceId, string commentId);

//        /// <summary>
//        /// Get a comment on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of ApiResponse (CommentResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetCommentAsyncWithHttpInfo (string processInstanceId, string commentId);
//        /// <summary>
//        /// Get all comments on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>Task of List&lt;CommentResponse&gt;</returns>
//        System.Threading.Tasks.Task<List<CommentResponse>> GetCommentsAsync (string processInstanceId);

//        /// <summary>
//        /// Get all comments on a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>Task of ApiResponse (List&lt;CommentResponse&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<CommentResponse>>> GetCommentsAsyncWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> GetHistoricActivityInstancesAsync (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// Get historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricActivityInstancesAsyncWithHttpInfo (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Get historic detail
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> GetHistoricDetailInfoAsync (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null);

//        /// <summary>
//        /// Get historic detail
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricDetailInfoAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null);
//        /// <summary>
//        /// Get the binary data for a historic detail variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        System.Threading.Tasks.Task<List<byte[]>> GetHistoricDetailVariableDataAsync (string detailId);

//        /// <summary>
//        /// Get the binary data for a historic detail variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricDetailVariableDataAsyncWithHttpInfo (string detailId);
//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        System.Threading.Tasks.Task<List<byte[]>> GetHistoricInstanceVariableDataAsync (string varInstanceId);

//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricInstanceVariableDataAsyncWithHttpInfo (string varInstanceId);
//        /// <summary>
//        /// Get a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of HistoricProcessInstanceResponse</returns>
//        System.Threading.Tasks.Task<HistoricProcessInstanceResponse> GetHistoricProcessInstanceAsync (string processInstanceId);

//        /// <summary>
//        /// Get a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse (HistoricProcessInstanceResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<HistoricProcessInstanceResponse>> GetHistoricProcessInstanceAsyncWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get the binary data for a historic process instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        System.Threading.Tasks.Task<List<byte[]>> GetHistoricProcessInstanceVariableDataAsync (string processInstanceId, string variableName);

//        /// <summary>
//        /// Get the binary data for a historic process instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricProcessInstanceVariableDataAsyncWithHttpInfo (string processInstanceId, string variableName);
//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        System.Threading.Tasks.Task<List<byte[]>> GetHistoricTaskInstanceVariableDataAsync (string taskId, string variableName, string scope = null);

//        /// <summary>
//        /// Get the binary data for a historic task instance variable
//        /// </summary>
//        /// <remarks>
//        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricTaskInstanceVariableDataAsyncWithHttpInfo (string taskId, string variableName, string scope = null);
//        /// <summary>
//        /// List of historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> GetHistoricVariableInstancesAsync (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null);

//        /// <summary>
//        /// List of historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricVariableInstancesAsyncWithHttpInfo (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null);
//        /// <summary>
//        /// Get the identity links of a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        System.Threading.Tasks.Task<List<HistoricIdentityLinkResponse>> GetProcessIdentityLinksAsync (string processInstanceId);

//        /// <summary>
//        /// Get the identity links of a historic process instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkResponse&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<HistoricIdentityLinkResponse>>> GetProcessIdentityLinksAsyncWithHttpInfo (string processInstanceId);
//        /// <summary>
//        /// Get the identity links of a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        System.Threading.Tasks.Task<List<HistoricIdentityLinkResponse>> GetTaskIdentityLinksAsync (string taskId);

//        /// <summary>
//        /// Get the identity links of a historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkResponse&gt;)</returns>
//        System.Threading.Tasks.Task<ApiResponse<List<HistoricIdentityLinkResponse>>> GetTaskIdentityLinksAsyncWithHttpInfo (string taskId);
//        /// <summary>
//        /// Get a single historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of HistoricTaskInstanceResponse</returns>
//        System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync (string taskId);

//        /// <summary>
//        /// Get a single historic task instance
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse (HistoricTaskInstanceResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<HistoricTaskInstanceResponse>> GetTaskInstanceAsyncWithHttpInfo (string taskId);
//        /// <summary>
//        /// List of historic process instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> ListHistoricProcessInstancesAsync (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// List of historic process instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListHistoricProcessInstancesAsyncWithHttpInfo (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Get historic task instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> ListHistoricTaskInstancesAsync (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);

//        /// <summary>
//        /// Get historic task instances
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListHistoricTaskInstancesAsyncWithHttpInfo (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null);
//        /// <summary>
//        /// Query for historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> QueryActivityInstancesAsync (HistoricActivityInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic activity instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryActivityInstancesAsyncWithHttpInfo (HistoricActivityInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic details
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> QueryHistoricDetailAsync (HistoricDetailQueryRequest body = null);

//        /// <summary>
//        /// Query for historic details
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricDetailAsyncWithHttpInfo (HistoricDetailQueryRequest body = null);
//        /// <summary>
//        /// Query for historic process instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> QueryHistoricProcessInstanceAsync (HistoricProcessInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic process instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricProcessInstanceAsyncWithHttpInfo (HistoricProcessInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic task instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> QueryHistoricTaskInstanceAsync (HistoricTaskInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic task instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricTaskInstanceAsyncWithHttpInfo (HistoricTaskInstanceQueryRequest body = null);
//        /// <summary>
//        /// Query for historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        System.Threading.Tasks.Task<DataResponse> QueryVariableInstancesAsync (HistoricVariableInstanceQueryRequest body = null);

//        /// <summary>
//        /// Query for historic variable instances
//        /// </summary>
//        /// <remarks>
//        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </remarks>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryVariableInstancesAsyncWithHttpInfo (HistoricVariableInstanceQueryRequest body = null);
//        #endregion Asynchronous Operations
//    }

//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//    public partial class HistoryApi : IHistoryApi
//    {
//        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

//        /// <summary>
//        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
//        /// </summary>
//        /// <returns></returns>
//        public HistoryApi(String basePath)
//        {
//            this.Configuration = new Configuration { BasePath = basePath };

//            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
//        }

//        /// <summary>
//        /// Initializes a new instance of the <see cref="HistoryApi"/> class
//        /// using Configuration object
//        /// </summary>
//        /// <param name="configuration">An instance of Configuration</param>
//        /// <returns></returns>
//        public HistoryApi(Configuration configuration = null)
//        {
//            if (configuration == null) // use the default one in Configuration
//                this.Configuration = Configuration.Default;
//            else
//                this.Configuration = configuration;

//            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
//        }

//        /// <summary>
//        /// Gets the base path of the API client.
//        /// </summary>
//        /// <value>The base path</value>
//        public String GetBasePath()
//        {
//            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
//        }

//        /// <summary>
//        /// Sets the base path of the API client.
//        /// </summary>
//        /// <value>The base path</value>
//        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
//        public void SetBasePath(String basePath)
//        {
//            // do nothing
//        }

//        /// <summary>
//        /// Gets or sets the configuration object
//        /// </summary>
//        /// <value>An instance of the Configuration</value>
//        public Configuration Configuration {get; set;}

//        /// <summary>
//        /// Provides a factory method hook for the creation of exceptions.
//        /// </summary>
//        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
//        {
//            get
//            {
//                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
//                {
//                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
//                }
//                return _exceptionFactory;
//            }
//            set { _exceptionFactory = value; }
//        }

//        /// <summary>
//        /// Gets the default header.
//        /// </summary>
//        /// <returns>Dictionary of HTTP header</returns>
//        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
//        public IDictionary<String, String> DefaultHeader()
//        {
//            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
//        }

//        /// <summary>
//        /// Add default header.
//        /// </summary>
//        /// <param name="key">Header field name.</param>
//        /// <param name="value">Header field value.</param>
//        /// <returns></returns>
//        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
//        public void AddDefaultHeader(string key, string value)
//        {
//            this.Configuration.AddDefaultHeader(key, value);
//        }

//        /// <summary>
//        /// Create a new comment on a historic process instance Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>CommentResponse</returns>
//        public CommentResponse CreateComment (string , CommentResponse body = null)
//        {
//             ApiResponse<CommentResponse> localVarResponse = CreateCommentWithHttpInfo(, body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Create a new comment on a historic process instance Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of CommentResponse</returns>
//        public ApiResponse< CommentResponse > CreateCommentWithHttpInfo (string , CommentResponse body = null)
//        {
//            // verify the required parameter '' is set
//            if ( == null)
//                throw new ApiException(400, "Missing required parameter '' when calling HistoryApi->CreateComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if ( != null) localVarPathParams.Add("", Configuration.ApiClient.ParameterToString()); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<CommentResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
//        }

//        /// <summary>
//        /// Create a new comment on a historic process instance Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of CommentResponse</returns>
//        public async System.Threading.Tasks.Task<CommentResponse> CreateCommentAsync (string , CommentResponse body = null)
//        {
//             ApiResponse<CommentResponse> localVarResponse = await CreateCommentAsyncWithHttpInfo(, body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Create a new comment on a historic process instance Parameter saveProcessInstanceId is optional, if true save process instance id of task with comment.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="">processInstanceId</param>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (CommentResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateCommentAsyncWithHttpInfo (string , CommentResponse body = null)
//        {
//            // verify the required parameter '' is set
//            if ( == null)
//                throw new ApiException(400, "Missing required parameter '' when calling HistoryApi->CreateComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if ( != null) localVarPathParams.Add("", Configuration.ApiClient.ParameterToString()); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<CommentResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
//        }

//        /// <summary>
//        /// Delete a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns></returns>
//        public void DeleteComment (string processInstanceId, string commentId)
//        {
//             DeleteCommentWithHttpInfo(processInstanceId, commentId);
//        }

//        /// <summary>
//        /// Delete a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        public ApiResponse<Object> DeleteCommentWithHttpInfo (string processInstanceId, string commentId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->DeleteComment");
//            // verify the required parameter 'commentId' is set
//            if (commentId == null)
//                throw new ApiException(400, "Missing required parameter 'commentId' when calling HistoryApi->DeleteComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        /// Delete a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of void</returns>
//        public async System.Threading.Tasks.Task DeleteCommentAsync (string processInstanceId, string commentId)
//        {
//             await DeleteCommentAsyncWithHttpInfo(processInstanceId, commentId);

//        }

//        /// <summary>
//        /// Delete a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to delete the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of ApiResponse</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (string processInstanceId, string commentId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->DeleteComment");
//            // verify the required parameter 'commentId' is set
//            if (commentId == null)
//                throw new ApiException(400, "Missing required parameter 'commentId' when calling HistoryApi->DeleteComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        ///  Delete a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns></returns>
//        public void DeleteHitoricProcessInstance (string processInstanceId)
//        {
//             DeleteHitoricProcessInstanceWithHttpInfo(processInstanceId);
//        }

//        /// <summary>
//        ///  Delete a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        public ApiResponse<Object> DeleteHitoricProcessInstanceWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->DeleteHitoricProcessInstance");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteHitoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        ///  Delete a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of void</returns>
//        public async System.Threading.Tasks.Task DeleteHitoricProcessInstanceAsync (string processInstanceId)
//        {
//             await DeleteHitoricProcessInstanceAsyncWithHttpInfo(processInstanceId);

//        }

//        /// <summary>
//        ///  Delete a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHitoricProcessInstanceAsyncWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->DeleteHitoricProcessInstance");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteHitoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        /// Delete a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns></returns>
//        public void DeleteTaskInstance (string taskId)
//        {
//             DeleteTaskInstanceWithHttpInfo(taskId);
//        }

//        /// <summary>
//        /// Delete a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        public ApiResponse<Object> DeleteTaskInstanceWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->DeleteTaskInstance");

//            var localVarPath = "/history/historic-task-instances/{taskId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        /// Delete a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of void</returns>
//        public async System.Threading.Tasks.Task DeleteTaskInstanceAsync (string taskId)
//        {
//             await DeleteTaskInstanceAsyncWithHttpInfo(taskId);

//        }

//        /// <summary>
//        /// Delete a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceAsyncWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->DeleteTaskInstance");

//            var localVarPath = "/history/historic-task-instances/{taskId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("DeleteTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                null);
//        }

//        /// <summary>
//        /// Get a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>CommentResponse</returns>
//        public CommentResponse GetComment (string processInstanceId, string commentId)
//        {
//             ApiResponse<CommentResponse> localVarResponse = GetCommentWithHttpInfo(processInstanceId, commentId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>ApiResponse of CommentResponse</returns>
//        public ApiResponse< CommentResponse > GetCommentWithHttpInfo (string processInstanceId, string commentId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetComment");
//            // verify the required parameter 'commentId' is set
//            if (commentId == null)
//                throw new ApiException(400, "Missing required parameter 'commentId' when calling HistoryApi->GetComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<CommentResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
//        }

//        /// <summary>
//        /// Get a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of CommentResponse</returns>
//        public async System.Threading.Tasks.Task<CommentResponse> GetCommentAsync (string processInstanceId, string commentId)
//        {
//             ApiResponse<CommentResponse> localVarResponse = await GetCommentAsyncWithHttpInfo(processInstanceId, commentId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get a comment on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the historic process instance to get the comment for.</param>
//        /// <param name="commentId">The id of the comment.</param>
//        /// <returns>Task of ApiResponse (CommentResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetCommentAsyncWithHttpInfo (string processInstanceId, string commentId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetComment");
//            // verify the required parameter 'commentId' is set
//            if (commentId == null)
//                throw new ApiException(400, "Missing required parameter 'commentId' when calling HistoryApi->GetComment");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments/{commentId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetComment", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<CommentResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
//        }

//        /// <summary>
//        /// Get all comments on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>List&lt;CommentResponse&gt;</returns>
//        public List<CommentResponse> GetComments (string processInstanceId)
//        {
//             ApiResponse<List<CommentResponse>> localVarResponse = GetCommentsWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get all comments on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>ApiResponse of List&lt;CommentResponse&gt;</returns>
//        public ApiResponse< List<CommentResponse> > GetCommentsWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetComments");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetComments", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<CommentResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<CommentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommentResponse>)));
//        }

//        /// <summary>
//        /// Get all comments on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>Task of List&lt;CommentResponse&gt;</returns>
//        public async System.Threading.Tasks.Task<List<CommentResponse>> GetCommentsAsync (string processInstanceId)
//        {
//             ApiResponse<List<CommentResponse>> localVarResponse = await GetCommentsAsyncWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get all comments on a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The id of the process instance to get the comments for.</param>
//        /// <returns>Task of ApiResponse (List&lt;CommentResponse&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<CommentResponse>>> GetCommentsAsyncWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetComments");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/comments";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetComments", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<CommentResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<CommentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommentResponse>)));
//        }

//        /// <summary>
//        /// Get historic activity instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse GetHistoricActivityInstances (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = GetHistoricActivityInstancesWithHttpInfo(activityId, activityInstanceId, activityName, activityType, executionId, finished, taskAssignee, processInstanceId, processDefinitionId, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get historic activity instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > GetHistoricActivityInstancesWithHttpInfo (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-activity-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (activityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
//            if (activityInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityInstanceId", activityInstanceId)); // query parameter
//            if (activityName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityName", activityName)); // query parameter
//            if (activityType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityType", activityType)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (taskAssignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssignee", taskAssignee)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricActivityInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get historic activity instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> GetHistoricActivityInstancesAsync (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await GetHistoricActivityInstancesAsyncWithHttpInfo(activityId, activityInstanceId, activityName, activityType, executionId, finished, taskAssignee, processInstanceId, processDefinitionId, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get historic activity instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="activityId">An id of the activity instance. (optional)</param>
//        /// <param name="activityInstanceId">An id of the historic activity instance. (optional)</param>
//        /// <param name="activityName">The name of the historic activity instance. (optional)</param>
//        /// <param name="activityType">The element type of the historic activity instance. (optional)</param>
//        /// <param name="executionId">The execution id of the historic activity instance. (optional)</param>
//        /// <param name="finished">Indication if the historic activity instance is finished. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic activity instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic activity instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic activity instance. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricActivityInstancesAsyncWithHttpInfo (string activityId = null, string activityInstanceId = null, string activityName = null, string activityType = null, string executionId = null, bool? finished = null, string taskAssignee = null, string processInstanceId = null, string processDefinitionId = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-activity-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (activityId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityId", activityId)); // query parameter
//            if (activityInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityInstanceId", activityInstanceId)); // query parameter
//            if (activityName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityName", activityName)); // query parameter
//            if (activityType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityType", activityType)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (taskAssignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssignee", taskAssignee)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricActivityInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get historic detail 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse GetHistoricDetailInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = GetHistoricDetailInfoWithHttpInfo(id, processInstanceId, executionId, activityInstanceId, taskId, selectOnlyFormProperties, selectOnlyVariableUpdates);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get historic detail 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > GetHistoricDetailInfoWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null)
//        {

//            var localVarPath = "/history/historic-detail";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (activityInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityInstanceId", activityInstanceId)); // query parameter
//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (selectOnlyFormProperties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "selectOnlyFormProperties", selectOnlyFormProperties)); // query parameter
//            if (selectOnlyVariableUpdates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "selectOnlyVariableUpdates", selectOnlyVariableUpdates)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricDetailInfo", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get historic detail 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> GetHistoricDetailInfoAsync (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await GetHistoricDetailInfoAsyncWithHttpInfo(id, processInstanceId, executionId, activityInstanceId, taskId, selectOnlyFormProperties, selectOnlyVariableUpdates);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get historic detail 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">The id of the historic detail. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic detail. (optional)</param>
//        /// <param name="executionId">The execution id of the historic detail. (optional)</param>
//        /// <param name="activityInstanceId">The activity instance id of the historic detail. (optional)</param>
//        /// <param name="taskId">The task id of the historic detail. (optional)</param>
//        /// <param name="selectOnlyFormProperties">Indication to only return form properties in the result. (optional)</param>
//        /// <param name="selectOnlyVariableUpdates">Indication to only return variable updates in the result. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricDetailInfoAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string activityInstanceId = null, string taskId = null, bool? selectOnlyFormProperties = null, bool? selectOnlyVariableUpdates = null)
//        {

//            var localVarPath = "/history/historic-detail";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (activityInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "activityInstanceId", activityInstanceId)); // query parameter
//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (selectOnlyFormProperties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "selectOnlyFormProperties", selectOnlyFormProperties)); // query parameter
//            if (selectOnlyVariableUpdates != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "selectOnlyVariableUpdates", selectOnlyVariableUpdates)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricDetailInfo", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic detail variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        public List<byte[]> GetHistoricDetailVariableData (string detailId)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = GetHistoricDetailVariableDataWithHttpInfo(detailId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the binary data for a historic detail variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        public ApiResponse< List<byte[]> > GetHistoricDetailVariableDataWithHttpInfo (string detailId)
//        {
//            // verify the required parameter 'detailId' is set
//            if (detailId == null)
//                throw new ApiException(400, "Missing required parameter 'detailId' when calling HistoryApi->GetHistoricDetailVariableData");

//            var localVarPath = "/history/historic-detail/{detailId}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (detailId != null) localVarPathParams.Add("detailId", Configuration.ApiClient.ParameterToString(detailId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricDetailVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic detail variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        public async System.Threading.Tasks.Task<List<byte[]>> GetHistoricDetailVariableDataAsync (string detailId)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = await GetHistoricDetailVariableDataAsyncWithHttpInfo(detailId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the binary data for a historic detail variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="detailId"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricDetailVariableDataAsyncWithHttpInfo (string detailId)
//        {
//            // verify the required parameter 'detailId' is set
//            if (detailId == null)
//                throw new ApiException(400, "Missing required parameter 'detailId' when calling HistoryApi->GetHistoricDetailVariableData");

//            var localVarPath = "/history/historic-detail/{detailId}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (detailId != null) localVarPathParams.Add("detailId", Configuration.ApiClient.ParameterToString(detailId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricDetailVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        public List<byte[]> GetHistoricInstanceVariableData (string varInstanceId)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = GetHistoricInstanceVariableDataWithHttpInfo(varInstanceId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        public ApiResponse< List<byte[]> > GetHistoricInstanceVariableDataWithHttpInfo (string varInstanceId)
//        {
//            // verify the required parameter 'varInstanceId' is set
//            if (varInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'varInstanceId' when calling HistoryApi->GetHistoricInstanceVariableData");

//            var localVarPath = "/history/historic-variable-instances/{varInstanceId}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (varInstanceId != null) localVarPathParams.Add("varInstanceId", Configuration.ApiClient.ParameterToString(varInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        public async System.Threading.Tasks.Task<List<byte[]>> GetHistoricInstanceVariableDataAsync (string varInstanceId)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = await GetHistoricInstanceVariableDataAsyncWithHttpInfo(varInstanceId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="varInstanceId"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricInstanceVariableDataAsyncWithHttpInfo (string varInstanceId)
//        {
//            // verify the required parameter 'varInstanceId' is set
//            if (varInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'varInstanceId' when calling HistoryApi->GetHistoricInstanceVariableData");

//            var localVarPath = "/history/historic-variable-instances/{varInstanceId}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (varInstanceId != null) localVarPathParams.Add("varInstanceId", Configuration.ApiClient.ParameterToString(varInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>HistoricProcessInstanceResponse</returns>
//        public HistoricProcessInstanceResponse GetHistoricProcessInstance (string processInstanceId)
//        {
//             ApiResponse<HistoricProcessInstanceResponse> localVarResponse = GetHistoricProcessInstanceWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of HistoricProcessInstanceResponse</returns>
//        public ApiResponse< HistoricProcessInstanceResponse > GetHistoricProcessInstanceWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetHistoricProcessInstance");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<HistoricProcessInstanceResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (HistoricProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoricProcessInstanceResponse)));
//        }

//        /// <summary>
//        /// Get a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of HistoricProcessInstanceResponse</returns>
//        public async System.Threading.Tasks.Task<HistoricProcessInstanceResponse> GetHistoricProcessInstanceAsync (string processInstanceId)
//        {
//             ApiResponse<HistoricProcessInstanceResponse> localVarResponse = await GetHistoricProcessInstanceAsyncWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse (HistoricProcessInstanceResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<HistoricProcessInstanceResponse>> GetHistoricProcessInstanceAsyncWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetHistoricProcessInstance");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<HistoricProcessInstanceResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (HistoricProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoricProcessInstanceResponse)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic process instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        public List<byte[]> GetHistoricProcessInstanceVariableData (string processInstanceId, string variableName)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = GetHistoricProcessInstanceVariableDataWithHttpInfo(processInstanceId, variableName);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the binary data for a historic process instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        public ApiResponse< List<byte[]> > GetHistoricProcessInstanceVariableDataWithHttpInfo (string processInstanceId, string variableName)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetHistoricProcessInstanceVariableData");
//            // verify the required parameter 'variableName' is set
//            if (variableName == null)
//                throw new ApiException(400, "Missing required parameter 'variableName' when calling HistoryApi->GetHistoricProcessInstanceVariableData");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/variables/{variableName}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricProcessInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic process instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        public async System.Threading.Tasks.Task<List<byte[]>> GetHistoricProcessInstanceVariableDataAsync (string processInstanceId, string variableName)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = await GetHistoricProcessInstanceVariableDataAsyncWithHttpInfo(processInstanceId, variableName);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the binary data for a historic process instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <param name="variableName"></param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricProcessInstanceVariableDataAsyncWithHttpInfo (string processInstanceId, string variableName)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetHistoricProcessInstanceVariableData");
//            // verify the required parameter 'variableName' is set
//            if (variableName == null)
//                throw new ApiException(400, "Missing required parameter 'variableName' when calling HistoryApi->GetHistoricProcessInstanceVariableData");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/variables/{variableName}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
//            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricProcessInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>List&lt;byte[]&gt;</returns>
//        public List<byte[]> GetHistoricTaskInstanceVariableData (string taskId, string variableName, string scope = null)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = GetHistoricTaskInstanceVariableDataWithHttpInfo(taskId, variableName, scope);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
//        public ApiResponse< List<byte[]> > GetHistoricTaskInstanceVariableDataWithHttpInfo (string taskId, string variableName, string scope = null)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetHistoricTaskInstanceVariableData");
//            // verify the required parameter 'variableName' is set
//            if (variableName == null)
//                throw new ApiException(400, "Missing required parameter 'variableName' when calling HistoryApi->GetHistoricTaskInstanceVariableData");

//            var localVarPath = "/history/historic-task-instances/{taskId}/variables/{variableName}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
//            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
//            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricTaskInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>Task of List&lt;byte[]&gt;</returns>
//        public async System.Threading.Tasks.Task<List<byte[]>> GetHistoricTaskInstanceVariableDataAsync (string taskId, string variableName, string scope = null)
//        {
//             ApiResponse<List<byte[]>> localVarResponse = await GetHistoricTaskInstanceVariableDataAsyncWithHttpInfo(taskId, variableName, scope);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the binary data for a historic task instance variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <param name="variableName"></param>
//        /// <param name="scope"> (optional)</param>
//        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetHistoricTaskInstanceVariableDataAsyncWithHttpInfo (string taskId, string variableName, string scope = null)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetHistoricTaskInstanceVariableData");
//            // verify the required parameter 'variableName' is set
//            if (variableName == null)
//                throw new ApiException(400, "Missing required parameter 'variableName' when calling HistoryApi->GetHistoricTaskInstanceVariableData");

//            var localVarPath = "/history/historic-task-instances/{taskId}/variables/{variableName}/data";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
//            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
//            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricTaskInstanceVariableData", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<byte[]>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
//        }

//        /// <summary>
//        /// List of historic variable instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse GetHistoricVariableInstances (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = GetHistoricVariableInstancesWithHttpInfo(processInstanceId, taskId, excludeTaskVariables, variableName, variableNameLike);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// List of historic variable instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > GetHistoricVariableInstancesWithHttpInfo (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null)
//        {

//            var localVarPath = "/history/historic-variable-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (excludeTaskVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeTaskVariables", excludeTaskVariables)); // query parameter
//            if (variableName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "variableName", variableName)); // query parameter
//            if (variableNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNameLike", variableNameLike)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricVariableInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// List of historic variable instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> GetHistoricVariableInstancesAsync (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await GetHistoricVariableInstancesAsyncWithHttpInfo(processInstanceId, taskId, excludeTaskVariables, variableName, variableNameLike);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// List of historic variable instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">The process instance id of the historic variable instance. (optional)</param>
//        /// <param name="taskId">The task id of the historic variable instance. (optional)</param>
//        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result. (optional)</param>
//        /// <param name="variableName">The variable name of the historic variable instance. (optional)</param>
//        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetHistoricVariableInstancesAsyncWithHttpInfo (string processInstanceId = null, string taskId = null, bool? excludeTaskVariables = null, string variableName = null, string variableNameLike = null)
//        {

//            var localVarPath = "/history/historic-variable-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (excludeTaskVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeTaskVariables", excludeTaskVariables)); // query parameter
//            if (variableName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "variableName", variableName)); // query parameter
//            if (variableNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "variableNameLike", variableNameLike)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetHistoricVariableInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get the identity links of a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public List<HistoricIdentityLinkResponse> GetProcessIdentityLinks (string processInstanceId)
//        {
//             ApiResponse<List<HistoricIdentityLinkResponse>> localVarResponse = GetProcessIdentityLinksWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the identity links of a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public ApiResponse< List<HistoricIdentityLinkResponse> > GetProcessIdentityLinksWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetProcessIdentityLinks");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/identitylinks";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetProcessIdentityLinks", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<HistoricIdentityLinkResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<HistoricIdentityLinkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HistoricIdentityLinkResponse>)));
//        }

//        /// <summary>
//        /// Get the identity links of a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public async System.Threading.Tasks.Task<List<HistoricIdentityLinkResponse>> GetProcessIdentityLinksAsync (string processInstanceId)
//        {
//             ApiResponse<List<HistoricIdentityLinkResponse>> localVarResponse = await GetProcessIdentityLinksAsyncWithHttpInfo(processInstanceId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the identity links of a historic process instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId"></param>
//        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkResponse&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<HistoricIdentityLinkResponse>>> GetProcessIdentityLinksAsyncWithHttpInfo (string processInstanceId)
//        {
//            // verify the required parameter 'processInstanceId' is set
//            if (processInstanceId == null)
//                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling HistoryApi->GetProcessIdentityLinks");

//            var localVarPath = "/history/historic-process-instances/{processInstanceId}/identitylinks";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetProcessIdentityLinks", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<HistoricIdentityLinkResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<HistoricIdentityLinkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HistoricIdentityLinkResponse>)));
//        }

//        /// <summary>
//        /// Get the identity links of a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public List<HistoricIdentityLinkResponse> GetTaskIdentityLinks (string taskId)
//        {
//             ApiResponse<List<HistoricIdentityLinkResponse>> localVarResponse = GetTaskIdentityLinksWithHttpInfo(taskId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get the identity links of a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public ApiResponse< List<HistoricIdentityLinkResponse> > GetTaskIdentityLinksWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetTaskIdentityLinks");

//            var localVarPath = "/history/historic-task-instances/{taskId}/identitylinks";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetTaskIdentityLinks", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<HistoricIdentityLinkResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<HistoricIdentityLinkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HistoricIdentityLinkResponse>)));
//        }

//        /// <summary>
//        /// Get the identity links of a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of List&lt;HistoricIdentityLinkResponse&gt;</returns>
//        public async System.Threading.Tasks.Task<List<HistoricIdentityLinkResponse>> GetTaskIdentityLinksAsync (string taskId)
//        {
//             ApiResponse<List<HistoricIdentityLinkResponse>> localVarResponse = await GetTaskIdentityLinksAsyncWithHttpInfo(taskId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get the identity links of a historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse (List&lt;HistoricIdentityLinkResponse&gt;)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<List<HistoricIdentityLinkResponse>>> GetTaskIdentityLinksAsyncWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetTaskIdentityLinks");

//            var localVarPath = "/history/historic-task-instances/{taskId}/identitylinks";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetTaskIdentityLinks", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<List<HistoricIdentityLinkResponse>>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (List<HistoricIdentityLinkResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<HistoricIdentityLinkResponse>)));
//        }

//        /// <summary>
//        /// Get a single historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>HistoricTaskInstanceResponse</returns>
//        public HistoricTaskInstanceResponse GetTaskInstance (string taskId)
//        {
//             ApiResponse<HistoricTaskInstanceResponse> localVarResponse = GetTaskInstanceWithHttpInfo(taskId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get a single historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>ApiResponse of HistoricTaskInstanceResponse</returns>
//        public ApiResponse< HistoricTaskInstanceResponse > GetTaskInstanceWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetTaskInstance");

//            var localVarPath = "/history/historic-task-instances/{taskId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<HistoricTaskInstanceResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (HistoricTaskInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoricTaskInstanceResponse)));
//        }

//        /// <summary>
//        /// Get a single historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of HistoricTaskInstanceResponse</returns>
//        public async System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync (string taskId)
//        {
//             ApiResponse<HistoricTaskInstanceResponse> localVarResponse = await GetTaskInstanceAsyncWithHttpInfo(taskId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get a single historic task instance 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId"></param>
//        /// <returns>Task of ApiResponse (HistoricTaskInstanceResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<HistoricTaskInstanceResponse>> GetTaskInstanceAsyncWithHttpInfo (string taskId)
//        {
//            // verify the required parameter 'taskId' is set
//            if (taskId == null)
//                throw new ApiException(400, "Missing required parameter 'taskId' when calling HistoryApi->GetTaskInstance");

//            var localVarPath = "/history/historic-task-instances/{taskId}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<HistoricTaskInstanceResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (HistoricTaskInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoricTaskInstanceResponse)));
//        }

//        /// <summary>
//        /// List of historic process instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse ListHistoricProcessInstances (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = ListHistoricProcessInstancesWithHttpInfo(processInstanceId, processDefinitionKey, processDefinitionId, businessKey, involvedUser, finished, superProcessInstanceId, excludeSubprocesses, finishedAfter, finishedBefore, startedAfter, startedBefore, startedBy, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// List of historic process instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > ListHistoricProcessInstancesWithHttpInfo (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-process-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (businessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessKey", businessKey)); // query parameter
//            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (superProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "superProcessInstanceId", superProcessInstanceId)); // query parameter
//            if (excludeSubprocesses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubprocesses", excludeSubprocesses)); // query parameter
//            if (finishedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finishedAfter", finishedAfter)); // query parameter
//            if (finishedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finishedBefore", finishedBefore)); // query parameter
//            if (startedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedAfter", startedAfter)); // query parameter
//            if (startedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedBefore", startedBefore)); // query parameter
//            if (startedBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedBy", startedBy)); // query parameter
//            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ListHistoricProcessInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// List of historic process instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> ListHistoricProcessInstancesAsync (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await ListHistoricProcessInstancesAsyncWithHttpInfo(processInstanceId, processDefinitionKey, processDefinitionId, businessKey, involvedUser, finished, superProcessInstanceId, excludeSubprocesses, finishedAfter, finishedBefore, startedAfter, startedBefore, startedBy, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// List of historic process instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="processInstanceId">An id of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic process instance. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic process instance. (optional)</param>
//        /// <param name="businessKey">The business key of the historic process instance. (optional)</param>
//        /// <param name="involvedUser">An involved user of the historic process instance. (optional)</param>
//        /// <param name="finished">Indication if the historic process instance is finished. (optional)</param>
//        /// <param name="superProcessInstanceId">An optional parent process id of the historic process instance. (optional)</param>
//        /// <param name="excludeSubprocesses">Return only historic process instances which aren�t sub processes. (optional)</param>
//        /// <param name="finishedAfter">Return only historic process instances that were finished after this date. (optional)</param>
//        /// <param name="finishedBefore">Return only historic process instances that were finished before this date. (optional)</param>
//        /// <param name="startedAfter">Return only historic process instances that were started after this date. (optional)</param>
//        /// <param name="startedBefore">Return only historic process instances that were started before this date. (optional)</param>
//        /// <param name="startedBy">Return only historic process instances that were started by this user. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic process instance variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.  (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListHistoricProcessInstancesAsyncWithHttpInfo (string processInstanceId = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? finished = null, string superProcessInstanceId = null, bool? excludeSubprocesses = null, string finishedAfter = null, string finishedBefore = null, string startedAfter = null, string startedBefore = null, string startedBy = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-process-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (businessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessKey", businessKey)); // query parameter
//            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (superProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "superProcessInstanceId", superProcessInstanceId)); // query parameter
//            if (excludeSubprocesses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubprocesses", excludeSubprocesses)); // query parameter
//            if (finishedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finishedAfter", finishedAfter)); // query parameter
//            if (finishedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finishedBefore", finishedBefore)); // query parameter
//            if (startedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedAfter", startedAfter)); // query parameter
//            if (startedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedBefore", startedBefore)); // query parameter
//            if (startedBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startedBy", startedBy)); // query parameter
//            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ListHistoricProcessInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get historic task instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse ListHistoricTaskInstances (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = ListHistoricTaskInstancesWithHttpInfo(taskId, processInstanceId, processDefinitionKey, processDefinitionKeyLike, processDefinitionId, processDefinitionName, processDefinitionNameLike, processBusinessKey, processBusinessKeyLike, executionId, taskDefinitionKey, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskCategory, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskInvolvedUser, taskPriority, finished, processFinished, parentTaskId, dueDate, dueDateAfter, dueDateBefore, withoutDueDate, taskCompletedOn, taskCompletedAfter, taskCompletedBefore, taskCreatedOn, taskCreatedBefore, taskCreatedAfter, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Get historic task instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > ListHistoricTaskInstancesWithHttpInfo (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-task-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
//            if (processDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKeyLike", processDefinitionKeyLike)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (processDefinitionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionName", processDefinitionName)); // query parameter
//            if (processDefinitionNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionNameLike", processDefinitionNameLike)); // query parameter
//            if (processBusinessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processBusinessKey", processBusinessKey)); // query parameter
//            if (processBusinessKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processBusinessKeyLike", processBusinessKeyLike)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (taskDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKey", taskDefinitionKey)); // query parameter
//            if (taskName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskName", taskName)); // query parameter
//            if (taskNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskNameLike", taskNameLike)); // query parameter
//            if (taskDescription != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDescription", taskDescription)); // query parameter
//            if (taskDescriptionLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDescriptionLike", taskDescriptionLike)); // query parameter
//            if (taskCategory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCategory", taskCategory)); // query parameter
//            if (taskDeleteReason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDeleteReason", taskDeleteReason)); // query parameter
//            if (taskDeleteReasonLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDeleteReasonLike", taskDeleteReasonLike)); // query parameter
//            if (taskAssignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssignee", taskAssignee)); // query parameter
//            if (taskAssigneeLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssigneeLike", taskAssigneeLike)); // query parameter
//            if (taskOwner != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskOwner", taskOwner)); // query parameter
//            if (taskOwnerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskOwnerLike", taskOwnerLike)); // query parameter
//            if (taskInvolvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskInvolvedUser", taskInvolvedUser)); // query parameter
//            if (taskPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskPriority", taskPriority)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (processFinished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processFinished", processFinished)); // query parameter
//            if (parentTaskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentTaskId", parentTaskId)); // query parameter
//            if (dueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDate", dueDate)); // query parameter
//            if (dueDateAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDateAfter", dueDateAfter)); // query parameter
//            if (dueDateBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDateBefore", dueDateBefore)); // query parameter
//            if (withoutDueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutDueDate", withoutDueDate)); // query parameter
//            if (taskCompletedOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedOn", taskCompletedOn)); // query parameter
//            if (taskCompletedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedAfter", taskCompletedAfter)); // query parameter
//            if (taskCompletedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedBefore", taskCompletedBefore)); // query parameter
//            if (taskCreatedOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedOn", taskCreatedOn)); // query parameter
//            if (taskCreatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedBefore", taskCreatedBefore)); // query parameter
//            if (taskCreatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedAfter", taskCreatedAfter)); // query parameter
//            if (includeTaskLocalVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTaskLocalVariables", includeTaskLocalVariables)); // query parameter
//            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ListHistoricTaskInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Get historic task instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> ListHistoricTaskInstancesAsync (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await ListHistoricTaskInstancesAsyncWithHttpInfo(taskId, processInstanceId, processDefinitionKey, processDefinitionKeyLike, processDefinitionId, processDefinitionName, processDefinitionNameLike, processBusinessKey, processBusinessKeyLike, executionId, taskDefinitionKey, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskCategory, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskInvolvedUser, taskPriority, finished, processFinished, parentTaskId, dueDate, dueDateAfter, dueDateBefore, withoutDueDate, taskCompletedOn, taskCompletedAfter, taskCompletedBefore, taskCreatedOn, taskCreatedBefore, taskCreatedAfter, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Get historic task instances 
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="taskId">An id of the historic task instance. (optional)</param>
//        /// <param name="processInstanceId">The process instance id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKey">The process definition key of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionKeyLike">The process definition key of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processDefinitionId">The process definition id of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionName">The process definition name of the historic task instance. (optional)</param>
//        /// <param name="processDefinitionNameLike">The process definition name of the historic task instance, which matches the given value. (optional)</param>
//        /// <param name="processBusinessKey">The process instance business key of the historic task instance. (optional)</param>
//        /// <param name="processBusinessKeyLike">The process instance business key of the historic task instance that matches the given value. (optional)</param>
//        /// <param name="executionId">The execution id of the historic task instance. (optional)</param>
//        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process (optional)</param>
//        /// <param name="taskName">The task name of the historic task instance. (optional)</param>
//        /// <param name="taskNameLike">The task name with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskDescription">The task description of the historic task instance. (optional)</param>
//        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)</param>
//        /// <param name="taskDeleteReason">The task delete reason of the historic task instance. (optional)</param>
//        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskAssignee">The assignee of the historic task instance. (optional)</param>
//        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskOwner">The owner of the historic task instance. (optional)</param>
//        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance. (optional)</param>
//        /// <param name="taskInvolvedUser">An involved user of the historic task instance (optional)</param>
//        /// <param name="taskPriority">The priority of the historic task instance. (optional)</param>
//        /// <param name="finished">Indication if the historic task instance is finished. (optional)</param>
//        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished. (optional)</param>
//        /// <param name="parentTaskId">An optional parent task id of the historic task instance. (optional)</param>
//        /// <param name="dueDate">Return only historic task instances that have a due date equal this date. (optional)</param>
//        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date. (optional)</param>
//        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date. (optional)</param>
//        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)</param>
//        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date. (optional)</param>
//        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date. (optional)</param>
//        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date. (optional)</param>
//        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date. (optional)</param>
//        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date. (optional)</param>
//        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date. (optional)</param>
//        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well. (optional)</param>
//        /// <param name="includeProcessVariables">An indication if the historic task instance global variables should be returned as well. (optional)</param>
//        /// <param name="tenantId">Only return historic task instances with the given tenantId. (optional)</param>
//        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value. (optional)</param>
//        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListHistoricTaskInstancesAsyncWithHttpInfo (string taskId = null, string processInstanceId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionId = null, string processDefinitionName = null, string processDefinitionNameLike = null, string processBusinessKey = null, string processBusinessKeyLike = null, string executionId = null, string taskDefinitionKey = null, string taskName = null, string taskNameLike = null, string taskDescription = null, string taskDescriptionLike = null, string taskCategory = null, string taskDeleteReason = null, string taskDeleteReasonLike = null, string taskAssignee = null, string taskAssigneeLike = null, string taskOwner = null, string taskOwnerLike = null, string taskInvolvedUser = null, string taskPriority = null, bool? finished = null, bool? processFinished = null, string parentTaskId = null, string dueDate = null, string dueDateAfter = null, string dueDateBefore = null, bool? withoutDueDate = null, string taskCompletedOn = null, string taskCompletedAfter = null, string taskCompletedBefore = null, string taskCreatedOn = null, string taskCreatedBefore = null, string taskCreatedAfter = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null)
//        {

//            var localVarPath = "/history/historic-task-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (taskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskId", taskId)); // query parameter
//            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
//            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
//            if (processDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKeyLike", processDefinitionKeyLike)); // query parameter
//            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
//            if (processDefinitionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionName", processDefinitionName)); // query parameter
//            if (processDefinitionNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionNameLike", processDefinitionNameLike)); // query parameter
//            if (processBusinessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processBusinessKey", processBusinessKey)); // query parameter
//            if (processBusinessKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processBusinessKeyLike", processBusinessKeyLike)); // query parameter
//            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
//            if (taskDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKey", taskDefinitionKey)); // query parameter
//            if (taskName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskName", taskName)); // query parameter
//            if (taskNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskNameLike", taskNameLike)); // query parameter
//            if (taskDescription != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDescription", taskDescription)); // query parameter
//            if (taskDescriptionLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDescriptionLike", taskDescriptionLike)); // query parameter
//            if (taskCategory != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCategory", taskCategory)); // query parameter
//            if (taskDeleteReason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDeleteReason", taskDeleteReason)); // query parameter
//            if (taskDeleteReasonLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDeleteReasonLike", taskDeleteReasonLike)); // query parameter
//            if (taskAssignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssignee", taskAssignee)); // query parameter
//            if (taskAssigneeLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskAssigneeLike", taskAssigneeLike)); // query parameter
//            if (taskOwner != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskOwner", taskOwner)); // query parameter
//            if (taskOwnerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskOwnerLike", taskOwnerLike)); // query parameter
//            if (taskInvolvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskInvolvedUser", taskInvolvedUser)); // query parameter
//            if (taskPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskPriority", taskPriority)); // query parameter
//            if (finished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "finished", finished)); // query parameter
//            if (processFinished != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processFinished", processFinished)); // query parameter
//            if (parentTaskId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentTaskId", parentTaskId)); // query parameter
//            if (dueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDate", dueDate)); // query parameter
//            if (dueDateAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDateAfter", dueDateAfter)); // query parameter
//            if (dueDateBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueDateBefore", dueDateBefore)); // query parameter
//            if (withoutDueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutDueDate", withoutDueDate)); // query parameter
//            if (taskCompletedOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedOn", taskCompletedOn)); // query parameter
//            if (taskCompletedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedAfter", taskCompletedAfter)); // query parameter
//            if (taskCompletedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCompletedBefore", taskCompletedBefore)); // query parameter
//            if (taskCreatedOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedOn", taskCreatedOn)); // query parameter
//            if (taskCreatedBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedBefore", taskCreatedBefore)); // query parameter
//            if (taskCreatedAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskCreatedAfter", taskCreatedAfter)); // query parameter
//            if (includeTaskLocalVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTaskLocalVariables", includeTaskLocalVariables)); // query parameter
//            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
//            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
//            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
//            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ListHistoricTaskInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic activity instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse QueryActivityInstances (HistoricActivityInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = QueryActivityInstancesWithHttpInfo(body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Query for historic activity instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > QueryActivityInstancesWithHttpInfo (HistoricActivityInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-activity-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryActivityInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic activity instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> QueryActivityInstancesAsync (HistoricActivityInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await QueryActivityInstancesAsyncWithHttpInfo(body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Query for historic activity instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryActivityInstancesAsyncWithHttpInfo (HistoricActivityInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-activity-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryActivityInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic details All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse QueryHistoricDetail (HistoricDetailQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = QueryHistoricDetailWithHttpInfo(body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Query for historic details All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > QueryHistoricDetailWithHttpInfo (HistoricDetailQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-detail";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricDetail", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic details All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> QueryHistoricDetailAsync (HistoricDetailQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await QueryHistoricDetailAsyncWithHttpInfo(body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Query for historic details All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricDetailAsyncWithHttpInfo (HistoricDetailQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-detail";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricDetail", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic process instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse QueryHistoricProcessInstance (HistoricProcessInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = QueryHistoricProcessInstanceWithHttpInfo(body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Query for historic process instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > QueryHistoricProcessInstanceWithHttpInfo (HistoricProcessInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-process-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic process instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> QueryHistoricProcessInstanceAsync (HistoricProcessInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await QueryHistoricProcessInstanceAsyncWithHttpInfo(body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Query for historic process instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricProcessInstanceAsyncWithHttpInfo (HistoricProcessInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-process-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricProcessInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic task instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse QueryHistoricTaskInstance (HistoricTaskInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = QueryHistoricTaskInstanceWithHttpInfo(body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Query for historic task instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > QueryHistoricTaskInstanceWithHttpInfo (HistoricTaskInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-task-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic task instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> QueryHistoricTaskInstanceAsync (HistoricTaskInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await QueryHistoricTaskInstanceAsyncWithHttpInfo(body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Query for historic task instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic task instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The taskVariables and processVariables properties are JSON-arrays containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryHistoricTaskInstanceAsyncWithHttpInfo (HistoricTaskInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-task-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryHistoricTaskInstance", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic variable instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>DataResponse</returns>
//        public DataResponse QueryVariableInstances (HistoricVariableInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = QueryVariableInstancesWithHttpInfo(body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Query for historic variable instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>ApiResponse of DataResponse</returns>
//        public ApiResponse< DataResponse > QueryVariableInstancesWithHttpInfo (HistoricVariableInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-variable-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryVariableInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//        /// <summary>
//        /// Query for historic variable instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of DataResponse</returns>
//        public async System.Threading.Tasks.Task<DataResponse> QueryVariableInstancesAsync (HistoricVariableInstanceQueryRequest body = null)
//        {
//             ApiResponse<DataResponse> localVarResponse = await QueryVariableInstancesAsyncWithHttpInfo(body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Query for historic variable instances All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of historic process instances, but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on process variables. The variables property is a JSON-array containing objects with the format as described here.
//        /// </summary>
//        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="body"> (optional)</param>
//        /// <returns>Task of ApiResponse (DataResponse)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryVariableInstancesAsyncWithHttpInfo (HistoricVariableInstanceQueryRequest body = null)
//        {

//            var localVarPath = "/query/historic-variable-instances";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // authentication (basicAuth) required
//            // http basic authentication required
//            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
//            {
//                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("QueryVariableInstances", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<DataResponse>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
//                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
//        }

//    }
//}
