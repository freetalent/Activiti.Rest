/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ModelResponse</returns>
        ModelResponse CreateModel (ModelRequest body = null);

        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        ApiResponse<ModelResponse> CreateModelWithHttpInfo (ModelRequest body = null);
        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns></returns>
        void DeleteModel (string modelId);

        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelWithHttpInfo (string modelId);
        /// <summary>
        /// Get a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>ModelResponse</returns>
        ModelResponse GetModel (string modelId);

        /// <summary>
        /// Get a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        ApiResponse<ModelResponse> GetModelWithHttpInfo (string modelId);
        /// <summary>
        /// Get a list of models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetModels (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// Get a list of models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetModelsWithHttpInfo (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ModelResponse</returns>
        ModelResponse UpdateModel (string modelId, ModelRequest body = null);

        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        ApiResponse<ModelResponse> UpdateModelWithHttpInfo (string modelId, ModelRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ModelResponse</returns>
        System.Threading.Tasks.Task<ModelResponse> CreateModelAsync (ModelRequest body = null);

        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponse>> CreateModelAsyncWithHttpInfo (ModelRequest body = null);
        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelAsync (string modelId);

        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelAsyncWithHttpInfo (string modelId);
        /// <summary>
        /// Get a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>Task of ModelResponse</returns>
        System.Threading.Tasks.Task<ModelResponse> GetModelAsync (string modelId);

        /// <summary>
        /// Get a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponse>> GetModelAsyncWithHttpInfo (string modelId);
        /// <summary>
        /// Get a list of models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetModelsAsync (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// Get a list of models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetModelsAsyncWithHttpInfo (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ModelResponse</returns>
        System.Threading.Tasks.Task<ModelResponse> UpdateModelAsync (string modelId, ModelRequest body = null);

        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelResponse>> UpdateModelAsyncWithHttpInfo (string modelId, ModelRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelsApi : IModelsApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ModelResponse</returns>
        public ModelResponse CreateModel (ModelRequest body = null)
        {
             ApiResponse<ModelResponse> localVarResponse = CreateModelWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        public ApiResponse< ModelResponse > CreateModelWithHttpInfo (ModelRequest body = null)
        {

            var localVarPath = "/repository/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

        /// <summary>
        /// Create a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ModelResponse</returns>
        public async System.Threading.Tasks.Task<ModelResponse> CreateModelAsync (ModelRequest body = null)
        {
             ApiResponse<ModelResponse> localVarResponse = await CreateModelAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelResponse>> CreateModelAsyncWithHttpInfo (ModelRequest body = null)
        {

            var localVarPath = "/repository/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

        /// <summary>
        /// Delete a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns></returns>
        public void DeleteModel (string modelId)
        {
             DeleteModelWithHttpInfo(modelId);
        }

        /// <summary>
        /// Delete a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelWithHttpInfo (string modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->DeleteModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelAsync (string modelId)
        {
             await DeleteModelAsyncWithHttpInfo(modelId);

        }

        /// <summary>
        /// Delete a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelAsyncWithHttpInfo (string modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->DeleteModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>ModelResponse</returns>
        public ModelResponse GetModel (string modelId)
        {
             ApiResponse<ModelResponse> localVarResponse = GetModelWithHttpInfo(modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        public ApiResponse< ModelResponse > GetModelWithHttpInfo (string modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->GetModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

        /// <summary>
        /// Get a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>Task of ModelResponse</returns>
        public async System.Threading.Tasks.Task<ModelResponse> GetModelAsync (string modelId)
        {
             ApiResponse<ModelResponse> localVarResponse = await GetModelAsyncWithHttpInfo(modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a model 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The id of the model to get.</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelResponse>> GetModelAsyncWithHttpInfo (string modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->GetModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

        /// <summary>
        /// Get a list of models 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetModels (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetModelsWithHttpInfo(id, category, categoryLike, categoryNotEquals, name, nameLike, key, deploymentId, version, latestVersion, deployed, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of models 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetModelsWithHttpInfo (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/repository/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (deployed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deployed", deployed)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of models 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetModelsAsync (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetModelsAsyncWithHttpInfo(id, category, categoryLike, categoryNotEquals, name, nameLike, key, deploymentId, version, latestVersion, deployed, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of models 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="category">Only return models with the given category. (optional)</param>
        /// <param name="categoryLike">Only return models with a category like the given name. (optional)</param>
        /// <param name="categoryNotEquals">Only return models which don�t have the given category. (optional)</param>
        /// <param name="name">Only return models with the given name. (optional)</param>
        /// <param name="nameLike">Only return models with a name like the given name. (optional)</param>
        /// <param name="key">Only return models with the given key. (optional)</param>
        /// <param name="deploymentId">Only return models with the given category. (optional)</param>
        /// <param name="version">Only return models with the given version. (optional)</param>
        /// <param name="latestVersion">If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned. (optional)</param>
        /// <param name="deployed">If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null). (optional)</param>
        /// <param name="tenantId">Only return models with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return models with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetModelsAsyncWithHttpInfo (string id = null, string category = null, string categoryLike = null, string categoryNotEquals = null, string name = null, string nameLike = null, string key = null, string deploymentId = null, int? version = null, bool? latestVersion = null, bool? deployed = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/repository/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (categoryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryLike", categoryLike)); // query parameter
            if (categoryNotEquals != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryNotEquals", categoryNotEquals)); // query parameter
            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (key != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (deploymentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deploymentId", deploymentId)); // query parameter
            if (version != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (latestVersion != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "latestVersion", latestVersion)); // query parameter
            if (deployed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deployed", deployed)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Update a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ModelResponse</returns>
        public ModelResponse UpdateModel (string modelId, ModelRequest body = null)
        {
             ApiResponse<ModelResponse> localVarResponse = UpdateModelWithHttpInfo(modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ModelResponse</returns>
        public ApiResponse< ModelResponse > UpdateModelWithHttpInfo (string modelId, ModelRequest body = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->UpdateModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

        /// <summary>
        /// Update a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ModelResponse</returns>
        public async System.Threading.Tasks.Task<ModelResponse> UpdateModelAsync (string modelId, ModelRequest body = null)
        {
             ApiResponse<ModelResponse> localVarResponse = await UpdateModelAsyncWithHttpInfo(modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: &#x60;&#x60;&#x60;JSON  {\&quot;metaInfo\&quot; : null}&#x60;&#x60;&#x60; will clear the metaInfo of the model).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ModelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelResponse>> UpdateModelAsyncWithHttpInfo (string modelId, ModelRequest body = null)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelsApi->UpdateModel");

            var localVarPath = "/repository/models/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelResponse)));
        }

    }
}
