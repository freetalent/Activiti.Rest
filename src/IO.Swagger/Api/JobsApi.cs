/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        void DeleteDeadLetterJob (string jobId);

        /// <summary>
        /// Delete a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeadLetterJobWithHttpInfo (string jobId);
        /// <summary>
        /// Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns></returns>
        void DeleteJob (string jobId);

        /// <summary>
        /// Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobWithHttpInfo (string jobId);
        /// <summary>
        /// Delete a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        void DeleteTimerJob (string jobId);

        /// <summary>
        /// Delete a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTimerJobWithHttpInfo (string jobId);
        /// <summary>
        /// Execute a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns></returns>
        void ExecuteJobAction (string jobId, RestActionRequest actionRequest = null);

        /// <summary>
        /// Execute a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteJobActionWithHttpInfo (string jobId, RestActionRequest actionRequest = null);
        /// <summary>
        /// Get the exception stacktrace for a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        string GetDeadLetterJobStacktrace (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetDeadLetterJobStacktraceWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        JobResponse GetDeadletterJob (string jobId);

        /// <summary>
        /// Get a single deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        ApiResponse<JobResponse> GetDeadletterJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>JobResponse</returns>
        JobResponse GetJob (string jobId);

        /// <summary>
        /// Get a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>ApiResponse of JobResponse</returns>
        ApiResponse<JobResponse> GetJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>string</returns>
        string GetJobStacktrace (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetJobStacktraceWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        JobResponse GetSuspendedJob (string jobId);

        /// <summary>
        /// Get a single suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        ApiResponse<JobResponse> GetSuspendedJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        string GetSuspendedJobStacktrace (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSuspendedJobStacktraceWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        JobResponse GetTimerJob (string jobId);

        /// <summary>
        /// Get a single timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        ApiResponse<JobResponse> GetTimerJobWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        string GetTimerJobStacktrace (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetTimerJobStacktraceWithHttpInfo (string jobId);
        /// <summary>
        /// Get a list of deadletter jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse ListDeadLetterJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of deadletter jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> ListDeadLetterJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse ListJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> ListJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of suspended jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse ListSuspendedJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of suspended jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> ListSuspendedJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of timer jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse ListTimerJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of timer jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> ListTimerJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeadLetterJobAsync (string jobId);

        /// <summary>
        /// Delete a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeadLetterJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobAsync (string jobId);

        /// <summary>
        /// Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Delete a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTimerJobAsync (string jobId);

        /// <summary>
        /// Delete a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTimerJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Execute a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteJobActionAsync (string jobId, RestActionRequest actionRequest = null);

        /// <summary>
        /// Execute a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteJobActionAsyncWithHttpInfo (string jobId, RestActionRequest actionRequest = null);
        /// <summary>
        /// Get the exception stacktrace for a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetDeadLetterJobStacktraceAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync (string jobId);

        /// <summary>
        /// Get a single deadletter job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetDeadletterJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>Task of JobResponse</returns>
        System.Threading.Tasks.Task<JobResponse> GetJobAsync (string jobId);

        /// <summary>
        /// Get a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetJobStacktraceAsync (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetJobStacktraceAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync (string jobId);

        /// <summary>
        /// Get a single suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetSuspendedJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a suspended job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSuspendedJobStacktraceAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a single timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync (string jobId);

        /// <summary>
        /// Get a single timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetTimerJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get the exception stacktrace for a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync (string jobId);

        /// <summary>
        /// Get the exception stacktrace for a timer job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetTimerJobStacktraceAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a list of deadletter jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> ListDeadLetterJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of deadletter jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListDeadLetterJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> ListJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of suspended jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> ListSuspendedJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of suspended jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListSuspendedJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        /// <summary>
        /// Get a list of timer jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> ListTimerJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);

        /// <summary>
        /// Get a list of timer jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListTimerJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public void DeleteDeadLetterJob (string jobId)
        {
             DeleteDeadLetterJobWithHttpInfo(jobId);
        }

        /// <summary>
        /// Delete a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeadLetterJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteDeadLetterJob");

            var localVarPath = "/management/deadletter-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeadLetterJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeadLetterJobAsync (string jobId)
        {
             await DeleteDeadLetterJobAsyncWithHttpInfo(jobId);

        }

        /// <summary>
        /// Delete a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeadLetterJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteDeadLetterJob");

            var localVarPath = "/management/deadletter-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeadLetterJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns></returns>
        public void DeleteJob (string jobId)
        {
             DeleteJobWithHttpInfo(jobId);
        }

        /// <summary>
        /// Delete a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteJob");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobAsync (string jobId)
        {
             await DeleteJobAsyncWithHttpInfo(jobId);

        }

        /// <summary>
        /// Delete a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteJob");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public void DeleteTimerJob (string jobId)
        {
             DeleteTimerJobWithHttpInfo(jobId);
        }

        /// <summary>
        /// Delete a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTimerJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteTimerJob");

            var localVarPath = "/management/timer-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTimerJobAsync (string jobId)
        {
             await DeleteTimerJobAsyncWithHttpInfo(jobId);

        }

        /// <summary>
        /// Delete a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTimerJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DeleteTimerJob");

            var localVarPath = "/management/timer-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTimerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Execute a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns></returns>
        public void ExecuteJobAction (string jobId, RestActionRequest actionRequest = null)
        {
             ExecuteJobActionWithHttpInfo(jobId, actionRequest);
        }

        /// <summary>
        /// Execute a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteJobActionWithHttpInfo (string jobId, RestActionRequest actionRequest = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ExecuteJobAction");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (actionRequest != null && actionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(actionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = actionRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteJobAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Execute a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteJobActionAsync (string jobId, RestActionRequest actionRequest = null)
        {
             await ExecuteJobActionAsyncWithHttpInfo(jobId, actionRequest);

        }

        /// <summary>
        /// Execute a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="actionRequest">Action to perform. Only execute is supported. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteJobActionAsyncWithHttpInfo (string jobId, RestActionRequest actionRequest = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->ExecuteJobAction");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (actionRequest != null && actionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(actionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = actionRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteJobAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the exception stacktrace for a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        public string GetDeadLetterJobStacktrace (string jobId)
        {
             ApiResponse<string> localVarResponse = GetDeadLetterJobStacktraceWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the exception stacktrace for a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetDeadLetterJobStacktraceWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetDeadLetterJobStacktrace");

            var localVarPath = "/management/deadletter-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeadLetterJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the exception stacktrace for a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync (string jobId)
        {
             ApiResponse<string> localVarResponse = await GetDeadLetterJobStacktraceAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the exception stacktrace for a deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetDeadLetterJobStacktraceAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetDeadLetterJobStacktrace");

            var localVarPath = "/management/deadletter-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeadLetterJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        public JobResponse GetDeadletterJob (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = GetDeadletterJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        public ApiResponse< JobResponse > GetDeadletterJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetDeadletterJob");

            var localVarPath = "/management/deadletter-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeadletterJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get a single deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        public async System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = await GetDeadletterJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single deadletter job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetDeadletterJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetDeadletterJob");

            var localVarPath = "/management/deadletter-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeadletterJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>JobResponse</returns>
        public JobResponse GetJob (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = GetJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>ApiResponse of JobResponse</returns>
        public ApiResponse< JobResponse > GetJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJob");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>Task of JobResponse</returns>
        public async System.Threading.Tasks.Task<JobResponse> GetJobAsync (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = await GetJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">The id of the job to get.</param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJob");

            var localVarPath = "/management/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get the exception stacktrace for a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>string</returns>
        public string GetJobStacktrace (string jobId)
        {
             ApiResponse<string> localVarResponse = GetJobStacktraceWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the exception stacktrace for a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetJobStacktraceWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJobStacktrace");

            var localVarPath = "/management/jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the exception stacktrace for a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetJobStacktraceAsync (string jobId)
        {
             ApiResponse<string> localVarResponse = await GetJobStacktraceAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the exception stacktrace for a job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Id of the job to get the stacktrace for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetJobStacktraceAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJobStacktrace");

            var localVarPath = "/management/jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        public JobResponse GetSuspendedJob (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = GetSuspendedJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        public ApiResponse< JobResponse > GetSuspendedJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetSuspendedJob");

            var localVarPath = "/management/suspended-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuspendedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get a single suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        public async System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = await GetSuspendedJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetSuspendedJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetSuspendedJob");

            var localVarPath = "/management/suspended-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuspendedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get the exception stacktrace for a suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        public string GetSuspendedJobStacktrace (string jobId)
        {
             ApiResponse<string> localVarResponse = GetSuspendedJobStacktraceWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the exception stacktrace for a suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetSuspendedJobStacktraceWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetSuspendedJobStacktrace");

            var localVarPath = "/management/suspended-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuspendedJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the exception stacktrace for a suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync (string jobId)
        {
             ApiResponse<string> localVarResponse = await GetSuspendedJobStacktraceAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the exception stacktrace for a suspended job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSuspendedJobStacktraceAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetSuspendedJobStacktrace");

            var localVarPath = "/management/suspended-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuspendedJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a single timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>JobResponse</returns>
        public JobResponse GetTimerJob (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = GetTimerJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of JobResponse</returns>
        public ApiResponse< JobResponse > GetTimerJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTimerJob");

            var localVarPath = "/management/timer-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get a single timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of JobResponse</returns>
        public async System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync (string jobId)
        {
             ApiResponse<JobResponse> localVarResponse = await GetTimerJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (JobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobResponse>> GetTimerJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTimerJob");

            var localVarPath = "/management/timer-jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobResponse)));
        }

        /// <summary>
        /// Get the exception stacktrace for a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>string</returns>
        public string GetTimerJobStacktrace (string jobId)
        {
             ApiResponse<string> localVarResponse = GetTimerJobStacktraceWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the exception stacktrace for a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetTimerJobStacktraceWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTimerJobStacktrace");

            var localVarPath = "/management/timer-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimerJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the exception stacktrace for a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync (string jobId)
        {
             ApiResponse<string> localVarResponse = await GetTimerJobStacktraceAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the exception stacktrace for a timer job 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetTimerJobStacktraceAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetTimerJobStacktrace");

            var localVarPath = "/management/timer-jobs/{jobId}/exception-stacktrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimerJobStacktrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of deadletter jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse ListDeadLetterJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = ListDeadLetterJobsWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of deadletter jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > ListDeadLetterJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/deadletter-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeadLetterJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of deadletter jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> ListDeadLetterJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await ListDeadLetterJobsAsyncWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of deadletter jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListDeadLetterJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/deadletter-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeadLetterJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse ListJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = ListJobsWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > ListJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> ListJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await ListJobsAsyncWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of suspended jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse ListSuspendedJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = ListSuspendedJobsWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of suspended jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > ListSuspendedJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/suspended-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSuspendedJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of suspended jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> ListSuspendedJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await ListSuspendedJobsAsyncWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of suspended jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListSuspendedJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/suspended-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSuspendedJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of timer jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse ListTimerJobs (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = ListTimerJobsWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of timer jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > ListTimerJobsWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/timer-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get a list of timer jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> ListTimerJobsAsync (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await ListTimerJobsAsyncWithHttpInfo(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of timer jobs 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return job with the given id (optional)</param>
        /// <param name="processInstanceId">Only return jobs part of a process with the given id (optional)</param>
        /// <param name="executionId">Only return jobs part of an execution with the given id (optional)</param>
        /// <param name="processDefinitionId">Only return jobs with the given process definition id (optional)</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message (optional)</param>
        /// <param name="tenantId">Only return jobs with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> ListTimerJobsAsyncWithHttpInfo (string id = null, string processInstanceId = null, string executionId = null, string processDefinitionId = null, bool? timersOnly = null, bool? messagesOnly = null, bool? withException = null, string dueBefore = null, string dueAfter = null, string exceptionMessage = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, bool? locked = null, bool? unlocked = null, string sort = null)
        {

            var localVarPath = "/management/timer-jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (timersOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timersOnly", timersOnly)); // query parameter
            if (messagesOnly != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "messagesOnly", messagesOnly)); // query parameter
            if (withException != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withException", withException)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (exceptionMessage != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exceptionMessage", exceptionMessage)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (locked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "locked", locked)); // query parameter
            if (unlocked != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unlocked", unlocked)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTimerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

    }
}
