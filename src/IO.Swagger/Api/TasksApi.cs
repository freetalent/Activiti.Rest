/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file
        /// </summary>
        /// <remarks>
        /// ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse CreateAttachment (string taskId);

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file
        /// </summary>
        /// <remarks>
        /// ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> CreateAttachmentWithHttpInfo (string taskId);
        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskResponse</returns>
        TaskResponse CreateTask (TaskRequest body = null);

        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        ApiResponse<TaskResponse> CreateTaskWithHttpInfo (TaskRequest body = null);
        /// <summary>
        /// Create a new comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse CreateTaskComments (string taskId, CommentRequest body = null);

        /// <summary>
        /// Create a new comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> CreateTaskCommentsWithHttpInfo (string taskId, CommentRequest body = null);
        /// <summary>
        /// Create an identity link on a task
        /// </summary>
        /// <remarks>
        /// ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink CreateTaskInstanceIdentityLinks (string taskId, RestIdentityLink body = null);

        /// <summary>
        /// Create an identity link on a task
        /// </summary>
        /// <remarks>
        /// ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> CreateTaskInstanceIdentityLinksWithHttpInfo (string taskId, RestIdentityLink body = null);
        /// <summary>
        /// Create new variables on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Object</returns>
        Object CreateTaskVariable (string taskId);

        /// <summary>
        /// Create new variables on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTaskVariableWithHttpInfo (string taskId);
        /// <summary>
        /// Delete all local variables on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns></returns>
        void DeleteAllLocalTaskVariables (string taskId);

        /// <summary>
        /// Delete all local variables on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllLocalTaskVariablesWithHttpInfo (string taskId);
        /// <summary>
        /// Delete an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns></returns>
        void DeleteAttachment (string taskId, string attachmentId);

        /// <summary>
        /// Delete an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Delete an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns></returns>
        void DeleteEvent (string taskId, string eventId);

        /// <summary>
        /// Delete an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventWithHttpInfo (string taskId, string eventId);
        /// <summary>
        /// Delete a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns></returns>
        void DeleteTask (string taskId);

        /// <summary>
        /// Delete a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Delete a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns></returns>
        void DeleteTaskComment (string taskId, string commentId);

        /// <summary>
        /// Delete a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskCommentWithHttpInfo (string taskId, string commentId);
        /// <summary>
        /// Delete an identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns></returns>
        void DeleteTaskInstanceIdentityLinks (string taskId, string family, string identityId, string type);

        /// <summary>
        /// Delete an identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskInstanceIdentityLinksWithHttpInfo (string taskId, string family, string identityId, string type);
        /// <summary>
        /// Delete a variable on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns></returns>
        void DeleteTaskInstanceVariable (string taskId, string variableName);

        /// <summary>
        /// Delete a variable on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskInstanceVariableWithHttpInfo (string taskId, string variableName);
        /// <summary>
        /// Tasks actions
        /// </summary>
        /// <remarks>
        /// ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ExecuteTaskAction (string taskId, TaskActionRequest body = null);

        /// <summary>
        /// Tasks actions
        /// </summary>
        /// <remarks>
        /// ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExecuteTaskActionWithHttpInfo (string taskId, TaskActionRequest body = null);
        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GeTaskVariableData (string taskId, string variableName);

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GeTaskVariableDataWithHttpInfo (string taskId, string variableName);
        /// <summary>
        /// Get an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse GetAttachment (string taskId, string attachmentId);

        /// <summary>
        /// Get an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> GetAttachmentWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Get the content for an attachment
        /// </summary>
        /// <remarks>
        /// The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetAttachmentContent (string taskId, string attachmentId);

        /// <summary>
        /// Get the content for an attachment
        /// </summary>
        /// <remarks>
        /// The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetAttachmentContentWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Get all attachments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>List&lt;AttachmentResponse&gt;</returns>
        List<AttachmentResponse> GetAttachments (string taskId);

        /// <summary>
        /// Get all attachments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentResponse&gt;</returns>
        ApiResponse<List<AttachmentResponse>> GetAttachmentsWithHttpInfo (string taskId);
        /// <summary>
        /// Get an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>EventResponse</returns>
        EventResponse GetEvent (string taskId, string eventId);

        /// <summary>
        /// Get an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>ApiResponse of EventResponse</returns>
        ApiResponse<EventResponse> GetEventWithHttpInfo (string taskId, string eventId);
        /// <summary>
        /// Get all events for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>List&lt;EventResponse&gt;</returns>
        List<EventResponse> GetEvents (string taskId);

        /// <summary>
        /// Get all events for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>ApiResponse of List&lt;EventResponse&gt;</returns>
        ApiResponse<List<EventResponse>> GetEventsWithHttpInfo (string taskId);
        /// <summary>
        /// Get all identitylinks for a task for either groups or users
        /// </summary>
        /// <remarks>
        /// ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        List<RestIdentityLink> GetIdentityLinksForFamily (string taskId, string family);

        /// <summary>
        /// Get all identitylinks for a task for either groups or users
        /// </summary>
        /// <remarks>
        /// ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        ApiResponse<List<RestIdentityLink>> GetIdentityLinksForFamilyWithHttpInfo (string taskId, string family);
        /// <summary>
        /// Query for tasks
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetQueryResult (TaskQueryRequest body = null);

        /// <summary>
        /// Query for tasks
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetQueryResultWithHttpInfo (TaskQueryRequest body = null);
        /// <summary>
        /// Get list of sub tasks for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>List&lt;TaskResponse&gt;</returns>
        List<TaskResponse> GetSubTasks (string taskId);

        /// <summary>
        /// Get list of sub tasks for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of List&lt;TaskResponse&gt;</returns>
        ApiResponse<List<TaskResponse>> GetSubTasksWithHttpInfo (string taskId);
        /// <summary>
        /// Get a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>TaskResponse</returns>
        TaskResponse GetTask (string taskId);

        /// <summary>
        /// Get a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        ApiResponse<TaskResponse> GetTaskWithHttpInfo (string taskId);
        /// <summary>
        ///  Get a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>CommentResponse</returns>
        CommentResponse GetTaskComment (string taskId, string commentId);

        /// <summary>
        ///  Get a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> GetTaskCommentWithHttpInfo (string taskId, string commentId);
        /// <summary>
        /// Get a single identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink GetTaskInstanceIdentityLinks (string taskId, string family, string identityId, string type);

        /// <summary>
        /// Get a single identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> GetTaskInstanceIdentityLinksWithHttpInfo (string taskId, string family, string identityId, string type);
        /// <summary>
        /// Get a variable from a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>RestVariable</returns>
        RestVariable GetTaskInstanceVariable (string taskId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable from a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> GetTaskInstanceVariableWithHttpInfo (string taskId, string variableName, string scope = null);
        /// <summary>
        /// List of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetTasks (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null);

        /// <summary>
        /// List of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetTasksWithHttpInfo (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null);
        /// <summary>
        /// Get all comments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>List&lt;CommentResponse&gt;</returns>
        List<CommentResponse> ListTaskComments (string taskId);

        /// <summary>
        /// Get all comments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>ApiResponse of List&lt;CommentResponse&gt;</returns>
        ApiResponse<List<CommentResponse>> ListTaskCommentsWithHttpInfo (string taskId);
        /// <summary>
        /// Get all variables for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        List<RestVariable> ListTaskVariables (string taskId);

        /// <summary>
        /// Get all variables for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        ApiResponse<List<RestVariable>> ListTaskVariablesWithHttpInfo (string taskId);
        /// <summary>
        /// Get all identity links for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        List<RestIdentityLink> ListTasksInstanceIdentityLinks (string taskId);

        /// <summary>
        /// Get all identity links for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        ApiResponse<List<RestIdentityLink>> ListTasksInstanceIdentityLinksWithHttpInfo (string taskId);
        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskResponse</returns>
        TaskResponse UpdateTask (string taskId, TaskRequest body = null);

        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        ApiResponse<TaskResponse> UpdateTaskWithHttpInfo (string taskId, TaskRequest body = null);
        /// <summary>
        /// Update an existing variable on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>RestVariable</returns>
        RestVariable UpdateTaskInstanceVariable (string taskId, string variableName);

        /// <summary>
        /// Update an existing variable on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> UpdateTaskInstanceVariableWithHttpInfo (string taskId, string variableName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file
        /// </summary>
        /// <remarks>
        /// ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> CreateAttachmentAsync (string taskId);

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file
        /// </summary>
        /// <remarks>
        /// ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CreateAttachmentAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync (TaskRequest body = null);

        /// <summary>
        /// Create Task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskResponse>> CreateTaskAsyncWithHttpInfo (TaskRequest body = null);
        /// <summary>
        /// Create a new comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> CreateTaskCommentsAsync (string taskId, CommentRequest body = null);

        /// <summary>
        /// Create a new comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateTaskCommentsAsyncWithHttpInfo (string taskId, CommentRequest body = null);
        /// <summary>
        /// Create an identity link on a task
        /// </summary>
        /// <remarks>
        /// ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync (string taskId, RestIdentityLink body = null);

        /// <summary>
        /// Create an identity link on a task
        /// </summary>
        /// <remarks>
        /// ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, RestIdentityLink body = null);
        /// <summary>
        /// Create new variables on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTaskVariableAsync (string taskId);

        /// <summary>
        /// Create new variables on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTaskVariableAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Delete all local variables on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync (string taskId);

        /// <summary>
        /// Delete all local variables on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllLocalTaskVariablesAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Delete an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentAsync (string taskId, string attachmentId);

        /// <summary>
        /// Delete an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Delete an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventAsync (string taskId, string eventId);

        /// <summary>
        /// Delete an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventAsyncWithHttpInfo (string taskId, string eventId);
        /// <summary>
        /// Delete a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync (string taskId);

        /// <summary>
        /// Delete a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Delete a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskCommentAsync (string taskId, string commentId);

        /// <summary>
        /// Delete a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskCommentAsyncWithHttpInfo (string taskId, string commentId);
        /// <summary>
        /// Delete an identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync (string taskId, string family, string identityId, string type);

        /// <summary>
        /// Delete an identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, string family, string identityId, string type);
        /// <summary>
        /// Delete a variable on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync (string taskId, string variableName);

        /// <summary>
        /// Delete a variable on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName);
        /// <summary>
        /// Tasks actions
        /// </summary>
        /// <remarks>
        /// ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExecuteTaskActionAsync (string taskId, TaskActionRequest body = null);

        /// <summary>
        /// Tasks actions
        /// </summary>
        /// <remarks>
        /// ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteTaskActionAsyncWithHttpInfo (string taskId, TaskActionRequest body = null);
        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GeTaskVariableDataAsync (string taskId, string variableName);

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GeTaskVariableDataAsyncWithHttpInfo (string taskId, string variableName);
        /// <summary>
        /// Get an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> GetAttachmentAsync (string taskId, string attachmentId);

        /// <summary>
        /// Get an attachment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetAttachmentAsyncWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Get the content for an attachment
        /// </summary>
        /// <remarks>
        /// The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetAttachmentContentAsync (string taskId, string attachmentId);

        /// <summary>
        /// Get the content for an attachment
        /// </summary>
        /// <remarks>
        /// The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetAttachmentContentAsyncWithHttpInfo (string taskId, string attachmentId);
        /// <summary>
        /// Get all attachments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>Task of List&lt;AttachmentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AttachmentResponse>> GetAttachmentsAsync (string taskId);

        /// <summary>
        /// Get all attachments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AttachmentResponse>>> GetAttachmentsAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Get an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>Task of EventResponse</returns>
        System.Threading.Tasks.Task<EventResponse> GetEventAsync (string taskId, string eventId);

        /// <summary>
        /// Get an event on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo (string taskId, string eventId);
        /// <summary>
        /// Get all events for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>Task of List&lt;EventResponse&gt;</returns>
        System.Threading.Tasks.Task<List<EventResponse>> GetEventsAsync (string taskId);

        /// <summary>
        /// Get all events for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>Task of ApiResponse (List&lt;EventResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventResponse>>> GetEventsAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Get all identitylinks for a task for either groups or users
        /// </summary>
        /// <remarks>
        /// ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        System.Threading.Tasks.Task<List<RestIdentityLink>> GetIdentityLinksForFamilyAsync (string taskId, string family);

        /// <summary>
        /// Get all identitylinks for a task for either groups or users
        /// </summary>
        /// <remarks>
        /// ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> GetIdentityLinksForFamilyAsyncWithHttpInfo (string taskId, string family);
        /// <summary>
        /// Query for tasks
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetQueryResultAsync (TaskQueryRequest body = null);

        /// <summary>
        /// Query for tasks
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetQueryResultAsyncWithHttpInfo (TaskQueryRequest body = null);
        /// <summary>
        /// Get list of sub tasks for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of List&lt;TaskResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TaskResponse>> GetSubTasksAsync (string taskId);

        /// <summary>
        /// Get list of sub tasks for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskResponse>>> GetSubTasksAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Get a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>Task of TaskResponse</returns>
        System.Threading.Tasks.Task<TaskResponse> GetTaskAsync (string taskId);

        /// <summary>
        /// Get a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskResponse>> GetTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        ///  Get a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> GetTaskCommentAsync (string taskId, string commentId);

        /// <summary>
        ///  Get a comment on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetTaskCommentAsyncWithHttpInfo (string taskId, string commentId);
        /// <summary>
        /// Get a single identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync (string taskId, string family, string identityId, string type);

        /// <summary>
        /// Get a single identity link on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, string family, string identityId, string type);
        /// <summary>
        /// Get a variable from a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync (string taskId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable from a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName, string scope = null);
        /// <summary>
        /// List of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetTasksAsync (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null);

        /// <summary>
        /// List of tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetTasksAsyncWithHttpInfo (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null);
        /// <summary>
        /// Get all comments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>Task of List&lt;CommentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CommentResponse>> ListTaskCommentsAsync (string taskId);

        /// <summary>
        /// Get all comments on a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>Task of ApiResponse (List&lt;CommentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CommentResponse>>> ListTaskCommentsAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Get all variables for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        System.Threading.Tasks.Task<List<RestVariable>> ListTaskVariablesAsync (string taskId);

        /// <summary>
        /// Get all variables for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> ListTaskVariablesAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Get all identity links for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        System.Threading.Tasks.Task<List<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync (string taskId);

        /// <summary>
        /// Get all identity links for a task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> ListTasksInstanceIdentityLinksAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync (string taskId, TaskRequest body = null);

        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskResponse>> UpdateTaskAsyncWithHttpInfo (string taskId, TaskRequest body = null);
        /// <summary>
        /// Update an existing variable on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync (string taskId, string variableName);

        /// <summary>
        /// Update an existing variable on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse CreateAttachment (string taskId)
        {
             ApiResponse<AttachmentResponse> localVarResponse = CreateAttachmentWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > CreateAttachmentWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> CreateAttachmentAsync (string taskId)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await CreateAttachmentAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external resource or an attached file ## Create a new attachment on a task, containing a link to an external resource   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot;:\&quot;Simple attachment\&quot;,   \&quot;description\&quot;:\&quot;Simple attachment description\&quot;,   \&quot;type\&quot;:\&quot;simpleType\&quot;,   \&quot;externalUrl\&quot;:\&quot;http://activiti.org\&quot; } &#x60;&#x60;&#x60;   Only the attachment name is required to create a new attachment.    ## Create a new attachment on a task, with an attached file  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *description*: Description of the attachment, optional.  - *type*: Type of attachment, optional. Supports any arbitrary string or a valid HTTP content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the attachment for.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CreateAttachmentAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Create Task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskResponse</returns>
        public TaskResponse CreateTask (TaskRequest body = null)
        {
             ApiResponse<TaskResponse> localVarResponse = CreateTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        public ApiResponse< TaskResponse > CreateTaskWithHttpInfo (TaskRequest body = null)
        {

            var localVarPath = "/runtime/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Create Task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        public async System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync (TaskRequest body = null)
        {
             ApiResponse<TaskResponse> localVarResponse = await CreateTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskResponse>> CreateTaskAsyncWithHttpInfo (TaskRequest body = null)
        {

            var localVarPath = "/runtime/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Create a new comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse CreateTaskComments (string taskId, CommentRequest body = null)
        {
             ApiResponse<CommentResponse> localVarResponse = CreateTaskCommentsWithHttpInfo(taskId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > CreateTaskCommentsWithHttpInfo (string taskId, CommentRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskComments");

            var localVarPath = "/runtime/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Create a new comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> CreateTaskCommentsAsync (string taskId, CommentRequest body = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await CreateTaskCommentsAsyncWithHttpInfo(taskId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the comment for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateTaskCommentsAsyncWithHttpInfo (string taskId, CommentRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskComments");

            var localVarPath = "/runtime/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Create an identity link on a task ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink CreateTaskInstanceIdentityLinks (string taskId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = CreateTaskInstanceIdentityLinksWithHttpInfo(taskId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an identity link on a task ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > CreateTaskInstanceIdentityLinksWithHttpInfo (string taskId, RestIdentityLink body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Create an identity link on a task ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync (string taskId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await CreateTaskInstanceIdentityLinksAsyncWithHttpInfo(taskId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an identity link on a task ## Request body (user)   &#x60;&#x60;&#x60;JSON {   \&quot;userId\&quot; : \&quot;kermit\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   ## Request body (group)   &#x60;&#x60;&#x60;JSON {   \&quot;groupId\&quot; : \&quot;sales\&quot;,   \&quot;type\&quot; : \&quot;candidate\&quot;, } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, RestIdentityLink body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Create new variables on a task ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Object</returns>
        public Object CreateTaskVariable (string taskId)
        {
             ApiResponse<Object> localVarResponse = CreateTaskVariableWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new variables on a task ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTaskVariableWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create new variables on a task ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTaskVariableAsync (string taskId)
        {
             ApiResponse<Object> localVarResponse = await CreateTaskVariableAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new variables on a task ## Request body for creating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON [   {     \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,     \&quot;scope\&quot; : \&quot;local\&quot;,     \&quot;type\&quot; : \&quot;string\&quot;,     \&quot;value\&quot; : \&quot;Hello my friend\&quot;   },   {    } ] &#x60;&#x60;&#x60;   The request body should be an array containing one or more JSON-objects representing the variables that should be created.  - *name*: Required name of the variable  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.  More information about the variable format can be found in the REST variables section.   ## Request body for Creating a new binary variable  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  scope: Scope of variable that is created. If omitted, local is assumed.  - *type*: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTaskVariableAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->CreateTaskVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete all local variables on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns></returns>
        public void DeleteAllLocalTaskVariables (string taskId)
        {
             DeleteAllLocalTaskVariablesWithHttpInfo(taskId);
        }

        /// <summary>
        /// Delete all local variables on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllLocalTaskVariablesWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteAllLocalTaskVariables");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllLocalTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all local variables on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync (string taskId)
        {
             await DeleteAllLocalTaskVariablesAsyncWithHttpInfo(taskId);

        }

        /// <summary>
        /// Delete all local variables on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllLocalTaskVariablesAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteAllLocalTaskVariables");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllLocalTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns></returns>
        public void DeleteAttachment (string taskId, string attachmentId)
        {
             DeleteAttachmentWithHttpInfo(taskId, attachmentId);
        }

        /// <summary>
        /// Delete an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAttachmentWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->DeleteAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentAsync (string taskId, string attachmentId)
        {
             await DeleteAttachmentAsyncWithHttpInfo(taskId, attachmentId);

        }

        /// <summary>
        /// Delete an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->DeleteAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns></returns>
        public void DeleteEvent (string taskId, string eventId)
        {
             DeleteEventWithHttpInfo(taskId, eventId);
        }

        /// <summary>
        /// Delete an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEventWithHttpInfo (string taskId, string eventId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling TasksApi->DeleteEvent");

            var localVarPath = "/runtime/tasks/{taskId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventAsync (string taskId, string eventId)
        {
             await DeleteEventAsyncWithHttpInfo(taskId, eventId);

        }

        /// <summary>
        /// Delete an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventAsyncWithHttpInfo (string taskId, string eventId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling TasksApi->DeleteEvent");

            var localVarPath = "/runtime/tasks/{taskId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns></returns>
        public void DeleteTask (string taskId)
        {
             DeleteTaskWithHttpInfo(taskId);
        }

        /// <summary>
        /// Delete a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync (string taskId)
        {
             await DeleteTaskAsyncWithHttpInfo(taskId);

        }

        /// <summary>
        /// Delete a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns></returns>
        public void DeleteTaskComment (string taskId, string commentId)
        {
             DeleteTaskCommentWithHttpInfo(taskId, commentId);
        }

        /// <summary>
        /// Delete a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskCommentWithHttpInfo (string taskId, string commentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskComment");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling TasksApi->DeleteTaskComment");

            var localVarPath = "/runtime/tasks/{taskId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskCommentAsync (string taskId, string commentId)
        {
             await DeleteTaskCommentAsyncWithHttpInfo(taskId, commentId);

        }

        /// <summary>
        /// Delete a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to delete the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskCommentAsyncWithHttpInfo (string taskId, string commentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskComment");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling TasksApi->DeleteTaskComment");

            var localVarPath = "/runtime/tasks/{taskId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns></returns>
        public void DeleteTaskInstanceIdentityLinks (string taskId, string family, string identityId, string type)
        {
             DeleteTaskInstanceIdentityLinksWithHttpInfo(taskId, family, identityId, type);
        }

        /// <summary>
        /// Delete an identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskInstanceIdentityLinksWithHttpInfo (string taskId, string family, string identityId, string type)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TasksApi->DeleteTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync (string taskId, string family, string identityId, string type)
        {
             await DeleteTaskInstanceIdentityLinksAsyncWithHttpInfo(taskId, family, identityId, type);

        }

        /// <summary>
        /// Delete an identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task.</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, string family, string identityId, string type)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling TasksApi->DeleteTaskInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TasksApi->DeleteTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns></returns>
        public void DeleteTaskInstanceVariable (string taskId, string variableName)
        {
             DeleteTaskInstanceVariableWithHttpInfo(taskId, variableName);
        }

        /// <summary>
        /// Delete a variable on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskInstanceVariableWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->DeleteTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync (string taskId, string variableName)
        {
             await DeleteTaskInstanceVariableAsyncWithHttpInfo(taskId, variableName);

        }

        /// <summary>
        /// Delete a variable on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task the variable to delete belongs to.</param>
        /// <param name="variableName">The name of the variable to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DeleteTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->DeleteTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Tasks actions ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ExecuteTaskAction (string taskId, TaskActionRequest body = null)
        {
             ExecuteTaskActionWithHttpInfo(taskId, body);
        }

        /// <summary>
        /// Tasks actions ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExecuteTaskActionWithHttpInfo (string taskId, TaskActionRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ExecuteTaskAction");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteTaskAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Tasks actions ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExecuteTaskActionAsync (string taskId, TaskActionRequest body = null)
        {
             await ExecuteTaskActionAsyncWithHttpInfo(taskId, body);

        }

        /// <summary>
        /// Tasks actions ## Complete a task - Request Body   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;complete\&quot;,   \&quot;variables\&quot; : [] } &#x60;&#x60;&#x60;Completes the task. Optional variable array can be passed in using the variables property. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the TaskService.completeTask(taskId, variables) invocation.  Note that also a transientVariables property is accepted as part of this json, that follows the same structure as the variables property.   ## Claim a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;claim\&quot;,   \&quot;assignee\&quot; : \&quot;userWhoClaims\&quot; } &#x60;&#x60;&#x60;   Claims the task by the given assignee. If the assignee is null, the task is assigned to no-one, claimable again.   ## Delegate a task - Request Body    &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;delegate\&quot;,   \&quot;assignee\&quot; : \&quot;userToDelegateTo\&quot; } &#x60;&#x60;&#x60;   Delegates the task to the given assignee. The assignee is required.   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;resolve\&quot; } &#x60;&#x60;&#x60;   Resolves the task delegation. The task is assigned back to the task owner (if any).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExecuteTaskActionAsyncWithHttpInfo (string taskId, TaskActionRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ExecuteTaskAction");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteTaskAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the binary data for a variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GeTaskVariableData (string taskId, string variableName)
        {
             ApiResponse<List<byte[]>> localVarResponse = GeTaskVariableDataWithHttpInfo(taskId, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the binary data for a variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GeTaskVariableDataWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GeTaskVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->GeTaskVariableData");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeTaskVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get the binary data for a variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GeTaskVariableDataAsync (string taskId, string variableName)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GeTaskVariableDataAsyncWithHttpInfo(taskId, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the binary data for a variable The response body contains the binary value of the variable. When the variable is of type binary, the content-type of the response is set to application/octet-stream, regardless of the content of the variable or the request accept-type header. In case of serializable, application/x-java-serialized-object is used as content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="variableName">The name of the variable to get data for. Only variables of type binary and serializable can be used. If any other type of variable is used, a 404 is returned.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GeTaskVariableDataAsyncWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GeTaskVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->GeTaskVariableData");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GeTaskVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse GetAttachment (string taskId, string attachmentId)
        {
             ApiResponse<AttachmentResponse> localVarResponse = GetAttachmentWithHttpInfo(taskId, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > GetAttachmentWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->GetAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> GetAttachmentAsync (string taskId, string attachmentId)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await GetAttachmentAsyncWithHttpInfo(taskId, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an attachment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachment for.</param>
        /// <param name="attachmentId">The id of the attachment.</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetAttachmentAsyncWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->GetAttachment");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get the content for an attachment The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetAttachmentContent (string taskId, string attachmentId)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetAttachmentContentWithHttpInfo(taskId, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the content for an attachment The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetAttachmentContentWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachmentContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->GetAttachmentContent");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get the content for an attachment The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetAttachmentContentAsync (string taskId, string attachmentId)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetAttachmentContentAsyncWithHttpInfo(taskId, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the content for an attachment The response body contains the binary content. By default, the content-type of the response is set to application/octet-stream unless the attachment type contains a valid Content-type.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable data for.</param>
        /// <param name="attachmentId">The id of the attachment, a 404 is returned when the attachment points to an external URL rather than content attached in Activiti.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetAttachmentContentAsyncWithHttpInfo (string taskId, string attachmentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachmentContent");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling TasksApi->GetAttachmentContent");

            var localVarPath = "/runtime/tasks/{taskId}/attachments/{attachmentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachmentId", Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get all attachments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>List&lt;AttachmentResponse&gt;</returns>
        public List<AttachmentResponse> GetAttachments (string taskId)
        {
             ApiResponse<List<AttachmentResponse>> localVarResponse = GetAttachmentsWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all attachments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>ApiResponse of List&lt;AttachmentResponse&gt;</returns>
        public ApiResponse< List<AttachmentResponse> > GetAttachmentsWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachments");

            var localVarPath = "/runtime/tasks/{taskId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentResponse>)));
        }

        /// <summary>
        /// Get all attachments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>Task of List&lt;AttachmentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AttachmentResponse>> GetAttachmentsAsync (string taskId)
        {
             ApiResponse<List<AttachmentResponse>> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all attachments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the attachments for.</param>
        /// <returns>Task of ApiResponse (List&lt;AttachmentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AttachmentResponse>>> GetAttachmentsAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetAttachments");

            var localVarPath = "/runtime/tasks/{taskId}/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AttachmentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AttachmentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AttachmentResponse>)));
        }

        /// <summary>
        /// Get an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>EventResponse</returns>
        public EventResponse GetEvent (string taskId, string eventId)
        {
             ApiResponse<EventResponse> localVarResponse = GetEventWithHttpInfo(taskId, eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>ApiResponse of EventResponse</returns>
        public ApiResponse< EventResponse > GetEventWithHttpInfo (string taskId, string eventId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling TasksApi->GetEvent");

            var localVarPath = "/runtime/tasks/{taskId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        /// Get an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>Task of EventResponse</returns>
        public async System.Threading.Tasks.Task<EventResponse> GetEventAsync (string taskId, string eventId)
        {
             ApiResponse<EventResponse> localVarResponse = await GetEventAsyncWithHttpInfo(taskId, eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an event on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the event for.</param>
        /// <param name="eventId">The id of the event.</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo (string taskId, string eventId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling TasksApi->GetEvent");

            var localVarPath = "/runtime/tasks/{taskId}/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        /// Get all events for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>List&lt;EventResponse&gt;</returns>
        public List<EventResponse> GetEvents (string taskId)
        {
             ApiResponse<List<EventResponse>> localVarResponse = GetEventsWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all events for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>ApiResponse of List&lt;EventResponse&gt;</returns>
        public ApiResponse< List<EventResponse> > GetEventsWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetEvents");

            var localVarPath = "/runtime/tasks/{taskId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EventResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventResponse>)));
        }

        /// <summary>
        /// Get all events for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>Task of List&lt;EventResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventResponse>> GetEventsAsync (string taskId)
        {
             ApiResponse<List<EventResponse>> localVarResponse = await GetEventsAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all events for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the events for.</param>
        /// <returns>Task of ApiResponse (List&lt;EventResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventResponse>>> GetEventsAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetEvents");

            var localVarPath = "/runtime/tasks/{taskId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EventResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventResponse>)));
        }

        /// <summary>
        /// Get all identitylinks for a task for either groups or users ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        public List<RestIdentityLink> GetIdentityLinksForFamily (string taskId, string family)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = GetIdentityLinksForFamilyWithHttpInfo(taskId, family);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all identitylinks for a task for either groups or users ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        public ApiResponse< List<RestIdentityLink> > GetIdentityLinksForFamilyWithHttpInfo (string taskId, string family)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetIdentityLinksForFamily");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->GetIdentityLinksForFamily");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLinksForFamily", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Get all identitylinks for a task for either groups or users ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestIdentityLink>> GetIdentityLinksForFamilyAsync (string taskId, string family)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = await GetIdentityLinksForFamilyAsyncWithHttpInfo(taskId, family);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all identitylinks for a task for either groups or users ## Get all identitylinks for a task URL   &#x60;&#x60;&#x60;  GET runtime/tasks/{taskId}/identitylinks/users GET runtime/tasks/{taskId}/identitylinks/groups  &#x60;&#x60;&#x60;   Returns only identity links targetting either users or groups. Response body and status-codes are exactly the same as when getting the full list of identity links for a task.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="family"></param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> GetIdentityLinksForFamilyAsyncWithHttpInfo (string taskId, string family)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetIdentityLinksForFamily");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->GetIdentityLinksForFamily");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityLinksForFamily", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Query for tasks All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetQueryResult (TaskQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetQueryResultWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query for tasks All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetQueryResultWithHttpInfo (TaskQueryRequest body = null)
        {

            var localVarPath = "/query/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Query for tasks All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetQueryResultAsync (TaskQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetQueryResultAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query for tasks All supported JSON parameter fields allowed are exactly the same as the parameters found for getting a collection of tasks (except for candidateGroupIn which is only available in this POST task query REST service), but passed in as JSON-body arguments rather than URL-parameters to allow for more advanced querying and preventing errors with request-uri�s that are too long. On top of that, the query allows for filtering based on task and process variables. The taskVariables and processInstanceVariables are both JSON-arrays containing objects with the format as described here.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetQueryResultAsyncWithHttpInfo (TaskQueryRequest body = null)
        {

            var localVarPath = "/query/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get list of sub tasks for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>List&lt;TaskResponse&gt;</returns>
        public List<TaskResponse> GetSubTasks (string taskId)
        {
             ApiResponse<List<TaskResponse>> localVarResponse = GetSubTasksWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of sub tasks for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>ApiResponse of List&lt;TaskResponse&gt;</returns>
        public ApiResponse< List<TaskResponse> > GetSubTasksWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetSubTasks");

            var localVarPath = "/runtime/tasks/{taskId}/subtasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskResponse>)));
        }

        /// <summary>
        /// Get list of sub tasks for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of List&lt;TaskResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskResponse>> GetSubTasksAsync (string taskId)
        {
             ApiResponse<List<TaskResponse>> localVarResponse = await GetSubTasksAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of sub tasks for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <returns>Task of ApiResponse (List&lt;TaskResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TaskResponse>>> GetSubTasksAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetSubTasks");

            var localVarPath = "/runtime/tasks/{taskId}/subtasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TaskResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TaskResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TaskResponse>)));
        }

        /// <summary>
        /// Get a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>TaskResponse</returns>
        public TaskResponse GetTask (string taskId)
        {
             ApiResponse<TaskResponse> localVarResponse = GetTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        public ApiResponse< TaskResponse > GetTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Get a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>Task of TaskResponse</returns>
        public async System.Threading.Tasks.Task<TaskResponse> GetTaskAsync (string taskId)
        {
             ApiResponse<TaskResponse> localVarResponse = await GetTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get.</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskResponse>> GetTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        ///  Get a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse GetTaskComment (string taskId, string commentId)
        {
             ApiResponse<CommentResponse> localVarResponse = GetTaskCommentWithHttpInfo(taskId, commentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > GetTaskCommentWithHttpInfo (string taskId, string commentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskComment");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling TasksApi->GetTaskComment");

            var localVarPath = "/runtime/tasks/{taskId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        ///  Get a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> GetTaskCommentAsync (string taskId, string commentId)
        {
             ApiResponse<CommentResponse> localVarResponse = await GetTaskCommentAsyncWithHttpInfo(taskId, commentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a comment on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comment for.</param>
        /// <param name="commentId">The id of the comment.</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetTaskCommentAsyncWithHttpInfo (string taskId, string commentId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskComment");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling TasksApi->GetTaskComment");

            var localVarPath = "/runtime/tasks/{taskId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", Configuration.ApiClient.ParameterToString(commentId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
        }

        /// <summary>
        /// Get a single identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink GetTaskInstanceIdentityLinks (string taskId, string family, string identityId, string type)
        {
             ApiResponse<RestIdentityLink> localVarResponse = GetTaskInstanceIdentityLinksWithHttpInfo(taskId, family, identityId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > GetTaskInstanceIdentityLinksWithHttpInfo (string taskId, string family, string identityId, string type)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TasksApi->GetTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get a single identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync (string taskId, string family, string identityId, string type)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await GetTaskInstanceIdentityLinksAsyncWithHttpInfo(taskId, family, identityId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single identity link on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task .</param>
        /// <param name="family">Either groups or users, depending on what kind of identity is targeted.</param>
        /// <param name="identityId">The id of the identity.</param>
        /// <param name="type">The type of identity link.</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetTaskInstanceIdentityLinksAsyncWithHttpInfo (string taskId, string family, string identityId, string type)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'family' is set
            if (family == null)
                throw new ApiException(400, "Missing required parameter 'family' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling TasksApi->GetTaskInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TasksApi->GetTaskInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (family != null) localVarPathParams.Add("family", Configuration.ApiClient.ParameterToString(family)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get a variable from a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>RestVariable</returns>
        public RestVariable GetTaskInstanceVariable (string taskId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = GetTaskInstanceVariableWithHttpInfo(taskId, variableName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a variable from a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > GetTaskInstanceVariableWithHttpInfo (string taskId, string variableName, string scope = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->GetTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Get a variable from a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync (string taskId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = await GetTaskInstanceVariableAsyncWithHttpInfo(taskId, variableName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a variable from a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get a variable for.</param>
        /// <param name="variableName">The name of the variable to get.</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task�s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable. (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName, string scope = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->GetTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->GetTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// List of tasks 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetTasks (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetTasksWithHttpInfo(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyLike, processDefinitionId, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, executionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of tasks 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetTasksWithHttpInfo (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null)
        {

            var localVarPath = "/runtime/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (description != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (minimumPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumPriority", minimumPriority)); // query parameter
            if (maximumPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maximumPriority", maximumPriority)); // query parameter
            if (assignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assignee", assignee)); // query parameter
            if (assigneeLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assigneeLike", assigneeLike)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner", owner)); // query parameter
            if (ownerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerLike", ownerLike)); // query parameter
            if (unassigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unassigned", unassigned)); // query parameter
            if (delegationState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "delegationState", delegationState)); // query parameter
            if (candidateUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateUser", candidateUser)); // query parameter
            if (candidateGroup != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateGroup", candidateGroup)); // query parameter
            if (candidateGroups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateGroups", candidateGroups)); // query parameter
            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
            if (taskDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKey", taskDefinitionKey)); // query parameter
            if (taskDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKeyLike", taskDefinitionKeyLike)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceBusinessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceBusinessKey", processInstanceBusinessKey)); // query parameter
            if (processInstanceBusinessKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKeyLike", processDefinitionKeyLike)); // query parameter
            if (processDefinitionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionName", processDefinitionName)); // query parameter
            if (processDefinitionNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionNameLike", processDefinitionNameLike)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (createdOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdOn", createdOn)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (dueOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueOn", dueOn)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (withoutDueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutDueDate", withoutDueDate)); // query parameter
            if (excludeSubTasks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubTasks", excludeSubTasks)); // query parameter
            if (active != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (includeTaskLocalVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTaskLocalVariables", includeTaskLocalVariables)); // query parameter
            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (candidateOrAssigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateOrAssigned", candidateOrAssigned)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of tasks 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetTasksAsync (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetTasksAsyncWithHttpInfo(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyLike, processDefinitionId, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, executionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of tasks 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Only return models with the given version. (optional)</param>
        /// <param name="nameLike">Only return tasks with a name like the given name. (optional)</param>
        /// <param name="description">Only return tasks with the given description. (optional)</param>
        /// <param name="priority">Only return tasks with the given priority. (optional)</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value. (optional)</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value. (optional)</param>
        /// <param name="assignee">Only return tasks assigned to the given user. (optional)</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value. (optional)</param>
        /// <param name="owner">Only return tasks owned by the given user. (optional)</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value. (optional)</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored. (optional)</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved. (optional)</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of. (optional)</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group. (optional)</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma. (optional)</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved. (optional)</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id. (optional)</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value. (optional)</param>
        /// <param name="processInstanceId">Only return tasks which are part of the process instance with the given id. (optional)</param>
        /// <param name="processInstanceBusinessKey">Only return tasks which are part of the process instance with the given business key. (optional)</param>
        /// <param name="processInstanceBusinessKeyLike">Only return tasks which are part of the process instance which has a business key like the given value. (optional)</param>
        /// <param name="processDefinitionId">Only return tasks which are part of a process instance which has a process definition with the given id. (optional)</param>
        /// <param name="processDefinitionKey">Only return tasks which are part of a process instance which has a process definition with the given key. (optional)</param>
        /// <param name="processDefinitionKeyLike">Only return tasks which are part of a process instance which has a process definition with a key like the given value. (optional)</param>
        /// <param name="processDefinitionName">Only return tasks which are part of a process instance which has a process definition with the given name. (optional)</param>
        /// <param name="processDefinitionNameLike">Only return tasks which are part of a process instance which has a process definition with a name like the given value. (optional)</param>
        /// <param name="executionId">Only return tasks which are part of the execution with the given id. (optional)</param>
        /// <param name="createdOn">Only return tasks which are created on the given date. (optional)</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date. (optional)</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date. (optional)</param>
        /// <param name="dueOn">Only return tasks which are due on the given date. (optional)</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date. (optional)</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date. (optional)</param>
        /// <param name="withoutDueDate">Only return tasks which don�t have a due date. The property is ignored if the value is false. (optional)</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task. (optional)</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned. (optional)</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return tasks with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups). (optional)</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).  (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetTasksAsyncWithHttpInfo (string name = null, string nameLike = null, string description = null, string priority = null, string minimumPriority = null, string maximumPriority = null, string assignee = null, string assigneeLike = null, string owner = null, string ownerLike = null, string unassigned = null, string delegationState = null, string candidateUser = null, string candidateGroup = null, string candidateGroups = null, string involvedUser = null, string taskDefinitionKey = null, string taskDefinitionKeyLike = null, string processInstanceId = null, string processInstanceBusinessKey = null, string processInstanceBusinessKeyLike = null, string processDefinitionId = null, string processDefinitionKey = null, string processDefinitionKeyLike = null, string processDefinitionName = null, string processDefinitionNameLike = null, string executionId = null, string createdOn = null, string createdBefore = null, string createdAfter = null, string dueOn = null, string dueBefore = null, string dueAfter = null, bool? withoutDueDate = null, bool? excludeSubTasks = null, bool? active = null, bool? includeTaskLocalVariables = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string candidateOrAssigned = null, string category = null)
        {

            var localVarPath = "/runtime/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "nameLike", nameLike)); // query parameter
            if (description != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (minimumPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "minimumPriority", minimumPriority)); // query parameter
            if (maximumPriority != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "maximumPriority", maximumPriority)); // query parameter
            if (assignee != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assignee", assignee)); // query parameter
            if (assigneeLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assigneeLike", assigneeLike)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner", owner)); // query parameter
            if (ownerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerLike", ownerLike)); // query parameter
            if (unassigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unassigned", unassigned)); // query parameter
            if (delegationState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "delegationState", delegationState)); // query parameter
            if (candidateUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateUser", candidateUser)); // query parameter
            if (candidateGroup != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateGroup", candidateGroup)); // query parameter
            if (candidateGroups != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateGroups", candidateGroups)); // query parameter
            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
            if (taskDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKey", taskDefinitionKey)); // query parameter
            if (taskDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "taskDefinitionKeyLike", taskDefinitionKeyLike)); // query parameter
            if (processInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceId", processInstanceId)); // query parameter
            if (processInstanceBusinessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceBusinessKey", processInstanceBusinessKey)); // query parameter
            if (processInstanceBusinessKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processInstanceBusinessKeyLike", processInstanceBusinessKeyLike)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionKeyLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKeyLike", processDefinitionKeyLike)); // query parameter
            if (processDefinitionName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionName", processDefinitionName)); // query parameter
            if (processDefinitionNameLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionNameLike", processDefinitionNameLike)); // query parameter
            if (executionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "executionId", executionId)); // query parameter
            if (createdOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdOn", createdOn)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (dueOn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueOn", dueOn)); // query parameter
            if (dueBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueBefore", dueBefore)); // query parameter
            if (dueAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dueAfter", dueAfter)); // query parameter
            if (withoutDueDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutDueDate", withoutDueDate)); // query parameter
            if (excludeSubTasks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubTasks", excludeSubTasks)); // query parameter
            if (active != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (includeTaskLocalVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTaskLocalVariables", includeTaskLocalVariables)); // query parameter
            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (candidateOrAssigned != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "candidateOrAssigned", candidateOrAssigned)); // query parameter
            if (category != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get all comments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>List&lt;CommentResponse&gt;</returns>
        public List<CommentResponse> ListTaskComments (string taskId)
        {
             ApiResponse<List<CommentResponse>> localVarResponse = ListTaskCommentsWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all comments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>ApiResponse of List&lt;CommentResponse&gt;</returns>
        public ApiResponse< List<CommentResponse> > ListTaskCommentsWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTaskComments");

            var localVarPath = "/runtime/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CommentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CommentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommentResponse>)));
        }

        /// <summary>
        /// Get all comments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>Task of List&lt;CommentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CommentResponse>> ListTaskCommentsAsync (string taskId)
        {
             ApiResponse<List<CommentResponse>> localVarResponse = await ListTaskCommentsAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all comments on a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the comments for.</param>
        /// <returns>Task of ApiResponse (List&lt;CommentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CommentResponse>>> ListTaskCommentsAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTaskComments");

            var localVarPath = "/runtime/tasks/{taskId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTaskComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CommentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CommentResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CommentResponse>)));
        }

        /// <summary>
        /// Get all variables for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        public List<RestVariable> ListTaskVariables (string taskId)
        {
             ApiResponse<List<RestVariable>> localVarResponse = ListTaskVariablesWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all variables for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        public ApiResponse< List<RestVariable> > ListTaskVariablesWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTaskVariables");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// Get all variables for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestVariable>> ListTaskVariablesAsync (string taskId)
        {
             ApiResponse<List<RestVariable>> localVarResponse = await ListTaskVariablesAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all variables for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get variables for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> ListTaskVariablesAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTaskVariables");

            var localVarPath = "/runtime/tasks/{taskId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTaskVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// Get all identity links for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        public List<RestIdentityLink> ListTasksInstanceIdentityLinks (string taskId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = ListTasksInstanceIdentityLinksWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all identity links for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        public ApiResponse< List<RestIdentityLink> > ListTasksInstanceIdentityLinksWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTasksInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTasksInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Get all identity links for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync (string taskId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = await ListTasksInstanceIdentityLinksAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all identity links for a task 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to get the identity links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> ListTasksInstanceIdentityLinksAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ListTasksInstanceIdentityLinks");

            var localVarPath = "/runtime/tasks/{taskId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTasksInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Update a task All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>TaskResponse</returns>
        public TaskResponse UpdateTask (string taskId, TaskRequest body = null)
        {
             ApiResponse<TaskResponse> localVarResponse = UpdateTaskWithHttpInfo(taskId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a task All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TaskResponse</returns>
        public ApiResponse< TaskResponse > UpdateTaskWithHttpInfo (string taskId, TaskRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Update a task All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TaskResponse</returns>
        public async System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync (string taskId, TaskRequest body = null)
        {
             ApiResponse<TaskResponse> localVarResponse = await UpdateTaskAsyncWithHttpInfo(taskId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a task All request values are optional. For example, you can only include the assignee attribute in the request body JSON-object, only updating the assignee of the task, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the task-value will be updated to null. Example: {\&quot;dueDate\&quot; : null} will clear the duedate of the task).
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskResponse>> UpdateTaskAsyncWithHttpInfo (string taskId, TaskRequest body = null)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTask");

            var localVarPath = "/runtime/tasks/{taskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskResponse)));
        }

        /// <summary>
        /// Update an existing variable on a task ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>RestVariable</returns>
        public RestVariable UpdateTaskInstanceVariable (string taskId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = UpdateTaskInstanceVariableWithHttpInfo(taskId, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing variable on a task ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > UpdateTaskInstanceVariableWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->UpdateTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Update an existing variable on a task ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync (string taskId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = await UpdateTaskInstanceVariableAsyncWithHttpInfo(taskId, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing variable on a task ## Request body for updating simple (non-binary) variables   &#x60;&#x60;&#x60;JSON {   \&quot;name\&quot; : \&quot;myTaskVariable\&quot;,   \&quot;scope\&quot; : \&quot;local\&quot;,   \&quot;type\&quot; : \&quot;string\&quot;,   \&quot;value\&quot; : \&quot;Hello my friend\&quot; } &#x60;&#x60;&#x60;   - *name*: Required name of the variable  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double).  - *value*: Variable value.   ## Request body for updating simple (non-binary) variables  The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  - *name*: Required name of the variable.  - *scope*: Scope of variable that is updated. If omitted, local is assumed.  - *type*: Type of variable that is updated. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">The id of the task to update the variable for.</param>
        /// <param name="variableName">The name of the variable to update.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateTaskInstanceVariableAsyncWithHttpInfo (string taskId, string variableName)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTaskInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling TasksApi->UpdateTaskInstanceVariable");

            var localVarPath = "/runtime/tasks/{taskId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskId != null) localVarPathParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

    }
}
