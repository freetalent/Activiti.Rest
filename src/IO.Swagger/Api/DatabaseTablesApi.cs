/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatabaseTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>TableResponse</returns>
        TableResponse GetTable (string tableName);

        /// <summary>
        /// Get a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>ApiResponse of TableResponse</returns>
        ApiResponse<TableResponse> GetTableWithHttpInfo (string tableName);
        /// <summary>
        /// Get row data for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetTableData (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null);

        /// <summary>
        /// Get row data for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetTableDataWithHttpInfo (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null);
        /// <summary>
        /// Get column info for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>TableMetaData</returns>
        TableMetaData GetTableMetaData (string tableName);

        /// <summary>
        /// Get column info for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>ApiResponse of TableMetaData</returns>
        ApiResponse<TableMetaData> GetTableMetaDataWithHttpInfo (string tableName);
        /// <summary>
        ///  List of tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TableResponse&gt;</returns>
        List<TableResponse> GetTables ();

        /// <summary>
        ///  List of tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TableResponse&gt;</returns>
        ApiResponse<List<TableResponse>> GetTablesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of TableResponse</returns>
        System.Threading.Tasks.Task<TableResponse> GetTableAsync (string tableName);

        /// <summary>
        /// Get a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of ApiResponse (TableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableResponse>> GetTableAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Get row data for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetTableDataAsync (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null);

        /// <summary>
        /// Get row data for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetTableDataAsyncWithHttpInfo (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null);
        /// <summary>
        /// Get column info for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of TableMetaData</returns>
        System.Threading.Tasks.Task<TableMetaData> GetTableMetaDataAsync (string tableName);

        /// <summary>
        /// Get column info for a single table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of ApiResponse (TableMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableMetaData>> GetTableMetaDataAsyncWithHttpInfo (string tableName);
        /// <summary>
        ///  List of tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TableResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TableResponse>> GetTablesAsync ();

        /// <summary>
        ///  List of tables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TableResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TableResponse>>> GetTablesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatabaseTablesApi : IDatabaseTablesApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatabaseTablesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatabaseTablesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>TableResponse</returns>
        public TableResponse GetTable (string tableName)
        {
             ApiResponse<TableResponse> localVarResponse = GetTableWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>ApiResponse of TableResponse</returns>
        public ApiResponse< TableResponse > GetTableWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTable");

            var localVarPath = "/management/tables/{tableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableResponse)));
        }

        /// <summary>
        /// Get a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of TableResponse</returns>
        public async System.Threading.Tasks.Task<TableResponse> GetTableAsync (string tableName)
        {
             ApiResponse<TableResponse> localVarResponse = await GetTableAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of ApiResponse (TableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableResponse>> GetTableAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTable");

            var localVarPath = "/management/tables/{tableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableResponse)));
        }

        /// <summary>
        /// Get row data for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetTableData (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetTableDataWithHttpInfo(tableName, start, size, orderAscendingColumn, orderDescendingColumn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get row data for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetTableDataWithHttpInfo (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTableData");

            var localVarPath = "/management/tables/{tableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (orderAscendingColumn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderAscendingColumn", orderAscendingColumn)); // query parameter
            if (orderDescendingColumn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderDescendingColumn", orderDescendingColumn)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get row data for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetTableDataAsync (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetTableDataAsyncWithHttpInfo(tableName, start, size, orderAscendingColumn, orderDescendingColumn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get row data for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <param name="start">Index of the first row to fetch. Defaults to 0. (optional)</param>
        /// <param name="size">Number of rows to fetch, starting from start. Defaults to 10. (optional)</param>
        /// <param name="orderAscendingColumn">Name of the column to sort the resulting rows on, ascending. (optional)</param>
        /// <param name="orderDescendingColumn">Name of the column to sort the resulting rows on, descending. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetTableDataAsyncWithHttpInfo (string tableName, int? start = null, int? size = null, string orderAscendingColumn = null, string orderDescendingColumn = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTableData");

            var localVarPath = "/management/tables/{tableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (orderAscendingColumn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderAscendingColumn", orderAscendingColumn)); // query parameter
            if (orderDescendingColumn != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderDescendingColumn", orderDescendingColumn)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Get column info for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>TableMetaData</returns>
        public TableMetaData GetTableMetaData (string tableName)
        {
             ApiResponse<TableMetaData> localVarResponse = GetTableMetaDataWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get column info for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>ApiResponse of TableMetaData</returns>
        public ApiResponse< TableMetaData > GetTableMetaDataWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTableMetaData");

            var localVarPath = "/management/tables/{tableName}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableMetaData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableMetaData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableMetaData)));
        }

        /// <summary>
        /// Get column info for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of TableMetaData</returns>
        public async System.Threading.Tasks.Task<TableMetaData> GetTableMetaDataAsync (string tableName)
        {
             ApiResponse<TableMetaData> localVarResponse = await GetTableMetaDataAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get column info for a single table 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">The name of the table to get.</param>
        /// <returns>Task of ApiResponse (TableMetaData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableMetaData>> GetTableMetaDataAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling DatabaseTablesApi->GetTableMetaData");

            var localVarPath = "/management/tables/{tableName}/columns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("tableName", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableMetaData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableMetaData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableMetaData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableMetaData)));
        }

        /// <summary>
        ///  List of tables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TableResponse&gt;</returns>
        public List<TableResponse> GetTables ()
        {
             ApiResponse<List<TableResponse>> localVarResponse = GetTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  List of tables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TableResponse&gt;</returns>
        public ApiResponse< List<TableResponse> > GetTablesWithHttpInfo ()
        {

            var localVarPath = "/management/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TableResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TableResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TableResponse>)));
        }

        /// <summary>
        ///  List of tables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;TableResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TableResponse>> GetTablesAsync ()
        {
             ApiResponse<List<TableResponse>> localVarResponse = await GetTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  List of tables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;TableResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TableResponse>>> GetTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/management/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TableResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TableResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TableResponse>)));
        }

    }
}
