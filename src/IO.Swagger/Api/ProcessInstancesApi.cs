/* 
 * Activiti REST API
 *
 * # activiti     - Activiti is battle-tested Business Process Management. Organizations across the world depend on the open source platform in a huge range of demanding situations. It supports open standards with BPMN and DMN so you can create processes that suit you.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Activiti.Rest.Client;
using Activiti.Rest.Model;

namespace Activiti.Rest.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessInstancesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Object</returns>
        Object CreateOrUpdateProcessVariable (string processInstanceId);

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateOrUpdateProcessVariableWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Start a process instance
        /// </summary>
        /// <remarks>
        /// ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessInstanceResponse</returns>
        ProcessInstanceResponse CreateProcessInstance (ProcessInstanceCreateRequest body = null);

        /// <summary>
        /// Start a process instance
        /// </summary>
        /// <remarks>
        /// ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        ApiResponse<ProcessInstanceResponse> CreateProcessInstanceWithHttpInfo (ProcessInstanceCreateRequest body = null);
        /// <summary>
        /// Add an involved user to a process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink CreateProcessInstanceIdentityLinks (string processInstanceId, RestIdentityLink body = null);

        /// <summary>
        /// Add an involved user to a process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> CreateProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, RestIdentityLink body = null);
        /// <summary>
        /// Create variables or new binary variable on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Object</returns>
        Object CreateProcessInstanceVariable (string processInstanceId);

        /// <summary>
        /// Create variables or new binary variable on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateProcessInstanceVariableWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Delete all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns></returns>
        void DeleteLocalProcessVariable (string processInstanceId);

        /// <summary>
        /// Delete all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocalProcessVariableWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Delete a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns></returns>
        void DeleteProcessInstance (string processInstanceId, string deleteReason = null);

        /// <summary>
        /// Delete a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessInstanceWithHttpInfo (string processInstanceId, string deleteReason = null);
        /// <summary>
        /// Remove an involved user to from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns></returns>
        void DeleteProcessInstanceIdentityLinks (string processInstanceId, string identityId, string type);

        /// <summary>
        /// Remove an involved user to from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, string identityId, string type);
        /// <summary>
        /// Delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        void DeleteProcessInstanceVariable (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// Get a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>ProcessInstanceResponse</returns>
        ProcessInstanceResponse GetProcessInstance (string processInstanceId);

        /// <summary>
        /// Get a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        ApiResponse<ProcessInstanceResponse> GetProcessInstanceWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Get diagram for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetProcessInstanceDiagram (string processInstanceId);

        /// <summary>
        /// Get diagram for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetProcessInstanceDiagramWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Get a specific involved people from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>RestIdentityLink</returns>
        RestIdentityLink GetProcessInstanceIdentityLinks (string processInstanceId, string identityId, string type);

        /// <summary>
        /// Get a specific involved people from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        ApiResponse<RestIdentityLink> GetProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, string identityId, string type);
        /// <summary>
        /// Get a variable for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>RestVariable</returns>
        RestVariable GetProcessInstanceVariable (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> GetProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> GetProcessInstanceVariableData (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> GetProcessInstanceVariableDataWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// List of process instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse GetProcessInstances (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of process instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> GetProcessInstancesWithHttpInfo (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// List of variables for a process instance
        /// </summary>
        /// <remarks>
        /// In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        List<RestVariable> GetVariables (string processInstanceId, string scope = null);

        /// <summary>
        /// List of variables for a process instance
        /// </summary>
        /// <remarks>
        /// In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        ApiResponse<List<RestVariable>> GetVariablesWithHttpInfo (string processInstanceId, string scope = null);
        /// <summary>
        /// Get involved people for process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        List<RestIdentityLink> ListProcessInstanceIdentityLinks (string processInstanceId);

        /// <summary>
        /// Get involved people for process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        ApiResponse<List<RestIdentityLink>> ListProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Activate or suspend a process instance
        /// </summary>
        /// <remarks>
        /// ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessInstanceResponse</returns>
        ProcessInstanceResponse PerformProcessInstanceAction (string processInstanceId, ProcessInstanceActionRequest body = null);

        /// <summary>
        /// Activate or suspend a process instance
        /// </summary>
        /// <remarks>
        /// ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        ApiResponse<ProcessInstanceResponse> PerformProcessInstanceActionWithHttpInfo (string processInstanceId, ProcessInstanceActionRequest body = null);
        /// <summary>
        /// Query process instances
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        DataResponse QueryProcessInstances (ProcessInstanceQueryRequest body = null);

        /// <summary>
        /// Query process instances
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        ApiResponse<DataResponse> QueryProcessInstancesWithHttpInfo (ProcessInstanceQueryRequest body = null);
        /// <summary>
        /// Update a single variable on a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>RestVariable</returns>
        RestVariable UpdateProcessInstanceVariable (string processInstanceId, string variableName);

        /// <summary>
        /// Update a single variable on a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        ApiResponse<RestVariable> UpdateProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateOrUpdateProcessVariableAsync (string processInstanceId);

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateProcessVariableAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Start a process instance
        /// </summary>
        /// <remarks>
        /// ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        System.Threading.Tasks.Task<ProcessInstanceResponse> CreateProcessInstanceAsync (ProcessInstanceCreateRequest body = null);

        /// <summary>
        /// Start a process instance
        /// </summary>
        /// <remarks>
        /// ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> CreateProcessInstanceAsyncWithHttpInfo (ProcessInstanceCreateRequest body = null);
        /// <summary>
        /// Add an involved user to a process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> CreateProcessInstanceIdentityLinksAsync (string processInstanceId, RestIdentityLink body = null);

        /// <summary>
        /// Add an involved user to a process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, RestIdentityLink body = null);
        /// <summary>
        /// Create variables or new binary variable on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateProcessInstanceVariableAsync (string processInstanceId);

        /// <summary>
        /// Create variables or new binary variable on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Delete all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocalProcessVariableAsync (string processInstanceId);

        /// <summary>
        /// Delete all variables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocalProcessVariableAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Delete a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessInstanceAsync (string processInstanceId, string deleteReason = null);

        /// <summary>
        /// Delete a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceAsyncWithHttpInfo (string processInstanceId, string deleteReason = null);
        /// <summary>
        /// Remove an involved user to from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessInstanceIdentityLinksAsync (string processInstanceId, string identityId, string type);

        /// <summary>
        /// Remove an involved user to from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, string identityId, string type);
        /// <summary>
        /// Delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessInstanceVariableAsync (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Delete a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// Get a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        System.Threading.Tasks.Task<ProcessInstanceResponse> GetProcessInstanceAsync (string processInstanceId);

        /// <summary>
        /// Get a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> GetProcessInstanceAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Get diagram for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetProcessInstanceDiagramAsync (string processInstanceId);

        /// <summary>
        /// Get diagram for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessInstanceDiagramAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Get a specific involved people from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>Task of RestIdentityLink</returns>
        System.Threading.Tasks.Task<RestIdentityLink> GetProcessInstanceIdentityLinksAsync (string processInstanceId, string identityId, string type);

        /// <summary>
        /// Get a specific involved people from process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, string identityId, string type);
        /// <summary>
        /// Get a variable for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> GetProcessInstanceVariableAsync (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Get a variable for a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> GetProcessInstanceVariableDataAsync (string processInstanceId, string variableName, string scope = null);

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessInstanceVariableDataAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null);
        /// <summary>
        /// List of process instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> GetProcessInstancesAsync (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);

        /// <summary>
        /// List of process instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetProcessInstancesAsyncWithHttpInfo (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null);
        /// <summary>
        /// List of variables for a process instance
        /// </summary>
        /// <remarks>
        /// In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        System.Threading.Tasks.Task<List<RestVariable>> GetVariablesAsync (string processInstanceId, string scope = null);

        /// <summary>
        /// List of variables for a process instance
        /// </summary>
        /// <remarks>
        /// In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> GetVariablesAsyncWithHttpInfo (string processInstanceId, string scope = null);
        /// <summary>
        /// Get involved people for process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        System.Threading.Tasks.Task<List<RestIdentityLink>> ListProcessInstanceIdentityLinksAsync (string processInstanceId);

        /// <summary>
        /// Get involved people for process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> ListProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId);
        /// <summary>
        /// Activate or suspend a process instance
        /// </summary>
        /// <remarks>
        /// ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        System.Threading.Tasks.Task<ProcessInstanceResponse> PerformProcessInstanceActionAsync (string processInstanceId, ProcessInstanceActionRequest body = null);

        /// <summary>
        /// Activate or suspend a process instance
        /// </summary>
        /// <remarks>
        /// ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> PerformProcessInstanceActionAsyncWithHttpInfo (string processInstanceId, ProcessInstanceActionRequest body = null);
        /// <summary>
        /// Query process instances
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        System.Threading.Tasks.Task<DataResponse> QueryProcessInstancesAsync (ProcessInstanceQueryRequest body = null);

        /// <summary>
        /// Query process instances
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryProcessInstancesAsyncWithHttpInfo (ProcessInstanceQueryRequest body = null);
        /// <summary>
        /// Update a single variable on a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>Task of RestVariable</returns>
        System.Threading.Tasks.Task<RestVariable> UpdateProcessInstanceVariableAsync (string processInstanceId, string variableName);

        /// <summary>
        /// Update a single variable on a process instance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessInstancesApi : IProcessInstancesApi
    {
        private Activiti.Rest.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessInstancesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstancesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessInstancesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Activiti.Rest.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Activiti.Rest.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Object</returns>
        public Object CreateOrUpdateProcessVariable (string processInstanceId)
        {
             ApiResponse<Object> localVarResponse = CreateOrUpdateProcessVariableWithHttpInfo(processInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateOrUpdateProcessVariableWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateOrUpdateProcessVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateOrUpdateProcessVariableAsync (string processInstanceId)
        {
             ApiResponse<Object> localVarResponse = await CreateOrUpdateProcessVariableAsyncWithHttpInfo(processInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a single or binary variable or multiple variables on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   ## Update a single variable  &#x60;&#x60;&#x60;JSON  {     \&quot;name\&quot;:\&quot;intProcVar\&quot;     \&quot;type\&quot;:\&quot;integer\&quot;     \&quot;value\&quot;:123  } &#x60;&#x60;&#x60;   ##  Update an existing binary variable     The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdateProcessVariableAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateOrUpdateProcessVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Start a process instance ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessInstanceResponse</returns>
        public ProcessInstanceResponse CreateProcessInstance (ProcessInstanceCreateRequest body = null)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = CreateProcessInstanceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a process instance ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        public ApiResponse< ProcessInstanceResponse > CreateProcessInstanceWithHttpInfo (ProcessInstanceCreateRequest body = null)
        {

            var localVarPath = "/runtime/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Start a process instance ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceResponse> CreateProcessInstanceAsync (ProcessInstanceCreateRequest body = null)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = await CreateProcessInstanceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a process instance ## Request body (start by process definition id)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionId\&quot;:\&quot;oneTaskProcess:1:158\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by process definition key)  &#x60;&#x60;&#x60;JSON  {    \&quot;processDefinitionKey\&quot;:\&quot;oneTaskProcess\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  ## Request body (start by message)  &#x60;&#x60;&#x60;JSON {    \&quot;message\&quot;:\&quot;newOrderMessage\&quot;,    \&quot;businessKey\&quot;:\&quot;myBusinessKey\&quot;,    \&quot;tenantId\&quot;: \&quot;tenant1\&quot;,    \&quot;variables\&quot;: [       {         \&quot;name\&quot;:\&quot;myVar\&quot;,         \&quot;value\&quot;:\&quot;This is a variable\&quot;,       }    ] }&#x60;&#x60;&#x60;  Note that also a *transientVariables* property is accepted as part of this json, that follows the same structure as the *variables* property.  Only one of *processDefinitionId*, *processDefinitionKey* or *message* can be used in the request body. Parameters *businessKey*, *variables* and *tenantId* are optional. If tenantId is omitted, the default tenant will be used. More information about the variable format can be found in the REST variables section. Note that the variable-scope that is supplied is ignored, process-variables are always local.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> CreateProcessInstanceAsyncWithHttpInfo (ProcessInstanceCreateRequest body = null)
        {

            var localVarPath = "/runtime/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Add an involved user to a process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink CreateProcessInstanceIdentityLinks (string processInstanceId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = CreateProcessInstanceIdentityLinksWithHttpInfo(processInstanceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an involved user to a process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > CreateProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, RestIdentityLink body = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Add an involved user to a process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateProcessInstanceIdentityLinksAsync (string processInstanceId, RestIdentityLink body = null)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await CreateProcessInstanceIdentityLinksAsyncWithHttpInfo(processInstanceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an involved user to a process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> CreateProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, RestIdentityLink body = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Create variables or new binary variable on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Object</returns>
        public Object CreateProcessInstanceVariable (string processInstanceId)
        {
             ApiResponse<Object> localVarResponse = CreateProcessInstanceVariableWithHttpInfo(processInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create variables or new binary variable on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateProcessInstanceVariableWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create variables or new binary variable on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateProcessInstanceVariableAsync (string processInstanceId)
        {
             ApiResponse<Object> localVarResponse = await CreateProcessInstanceVariableAsyncWithHttpInfo(processInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create variables or new binary variable on a process instance ## Update multiples variables   &#x60;&#x60;&#x60;JSON [    {       \&quot;name\&quot;:\&quot;intProcVar\&quot;       \&quot;type\&quot;:\&quot;integer\&quot;       \&quot;value\&quot;:123    },     ... ] &#x60;&#x60;&#x60;    Any number of variables can be passed into the request body array. More information about the variable format can be found in the REST variables section. Note that scope is ignored, only local variables can be set in a process instance.   The request should be of type multipart/form-data. There should be a single file-part included with the binary value of the variable. On top of that, the following additional form-fields can be present:  name: Required name of the variable.  type: Type of variable that is created. If omitted, binary is assumed and the binary data in the request will be stored as an array of bytes.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to create the new variable for</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->CreateProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete all variables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns></returns>
        public void DeleteLocalProcessVariable (string processInstanceId)
        {
             DeleteLocalProcessVariableWithHttpInfo(processInstanceId);
        }

        /// <summary>
        /// Delete all variables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLocalProcessVariableWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteLocalProcessVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocalProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all variables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocalProcessVariableAsync (string processInstanceId)
        {
             await DeleteLocalProcessVariableAsyncWithHttpInfo(processInstanceId);

        }

        /// <summary>
        /// Delete all variables 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocalProcessVariableAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteLocalProcessVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLocalProcessVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns></returns>
        public void DeleteProcessInstance (string processInstanceId, string deleteReason = null)
        {
             DeleteProcessInstanceWithHttpInfo(processInstanceId, deleteReason);
        }

        /// <summary>
        /// Delete a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessInstanceWithHttpInfo (string processInstanceId, string deleteReason = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstance");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (deleteReason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteReason", deleteReason)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessInstanceAsync (string processInstanceId, string deleteReason = null)
        {
             await DeleteProcessInstanceAsyncWithHttpInfo(processInstanceId, deleteReason);

        }

        /// <summary>
        /// Delete a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to delete.</param>
        /// <param name="deleteReason"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceAsyncWithHttpInfo (string processInstanceId, string deleteReason = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstance");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (deleteReason != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "deleteReason", deleteReason)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an involved user to from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns></returns>
        public void DeleteProcessInstanceIdentityLinks (string processInstanceId, string identityId, string type)
        {
             DeleteProcessInstanceIdentityLinksWithHttpInfo(processInstanceId, identityId, type);
        }

        /// <summary>
        /// Remove an involved user to from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, string identityId, string type)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an involved user to from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessInstanceIdentityLinksAsync (string processInstanceId, string identityId, string type)
        {
             await DeleteProcessInstanceIdentityLinksAsyncWithHttpInfo(processInstanceId, identityId, type);

        }

        /// <summary>
        /// Remove an involved user to from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance.</param>
        /// <param name="identityId">The id of the user to delete link for.</param>
        /// <param name="type">Type of link to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, string identityId, string type)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ProcessInstancesApi->DeleteProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns></returns>
        public void DeleteProcessInstanceVariable (string processInstanceId, string variableName, string scope = null)
        {
             DeleteProcessInstanceVariableWithHttpInfo(processInstanceId, variableName, scope);
        }

        /// <summary>
        /// Delete a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->DeleteProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessInstanceVariableAsync (string processInstanceId, string variableName, string scope = null)
        {
             await DeleteProcessInstanceVariableAsyncWithHttpInfo(processInstanceId, variableName, scope);

        }

        /// <summary>
        /// Delete a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->DeleteProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->DeleteProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>ProcessInstanceResponse</returns>
        public ProcessInstanceResponse GetProcessInstance (string processInstanceId)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = GetProcessInstanceWithHttpInfo(processInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        public ApiResponse< ProcessInstanceResponse > GetProcessInstanceWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstance");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Get a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceResponse> GetProcessInstanceAsync (string processInstanceId)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = await GetProcessInstanceAsyncWithHttpInfo(processInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> GetProcessInstanceAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstance");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Get diagram for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetProcessInstanceDiagram (string processInstanceId)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetProcessInstanceDiagramWithHttpInfo(processInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get diagram for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetProcessInstanceDiagramWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceDiagram");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get diagram for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetProcessInstanceDiagramAsync (string processInstanceId)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetProcessInstanceDiagramAsyncWithHttpInfo(processInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get diagram for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get the diagram for.</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessInstanceDiagramAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceDiagram");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/diagram";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceDiagram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get a specific involved people from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>RestIdentityLink</returns>
        public RestIdentityLink GetProcessInstanceIdentityLinks (string processInstanceId, string identityId, string type)
        {
             ApiResponse<RestIdentityLink> localVarResponse = GetProcessInstanceIdentityLinksWithHttpInfo(processInstanceId, identityId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific involved people from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of RestIdentityLink</returns>
        public ApiResponse< RestIdentityLink > GetProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId, string identityId, string type)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get a specific involved people from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>Task of RestIdentityLink</returns>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetProcessInstanceIdentityLinksAsync (string processInstanceId, string identityId, string type)
        {
             ApiResponse<RestIdentityLink> localVarResponse = await GetProcessInstanceIdentityLinksAsyncWithHttpInfo(processInstanceId, identityId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific involved people from process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to get.</param>
        /// <param name="identityId"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (RestIdentityLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestIdentityLink>> GetProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId, string identityId, string type)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");
            // verify the required parameter 'identityId' is set
            if (identityId == null)
                throw new ApiException(400, "Missing required parameter 'identityId' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ProcessInstancesApi->GetProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (identityId != null) localVarPathParams.Add("identityId", Configuration.ApiClient.ParameterToString(identityId)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestIdentityLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestIdentityLink) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestIdentityLink)));
        }

        /// <summary>
        /// Get a variable for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>RestVariable</returns>
        public RestVariable GetProcessInstanceVariable (string processInstanceId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = GetProcessInstanceVariableWithHttpInfo(processInstanceId, variableName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a variable for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > GetProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->GetProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Get a variable for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> GetProcessInstanceVariableAsync (string processInstanceId, string variableName, string scope = null)
        {
             ApiResponse<RestVariable> localVarResponse = await GetProcessInstanceVariableAsyncWithHttpInfo(processInstanceId, variableName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a variable for a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> GetProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->GetProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Get the binary data for a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> GetProcessInstanceVariableData (string processInstanceId, string variableName, string scope = null)
        {
             ApiResponse<List<byte[]>> localVarResponse = GetProcessInstanceVariableDataWithHttpInfo(processInstanceId, variableName, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the binary data for a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > GetProcessInstanceVariableDataWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->GetProcessInstanceVariableData");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Get the binary data for a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> GetProcessInstanceVariableDataAsync (string processInstanceId, string variableName, string scope = null)
        {
             ApiResponse<List<byte[]>> localVarResponse = await GetProcessInstanceVariableDataAsyncWithHttpInfo(processInstanceId, variableName, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the binary data for a variable 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId"></param>
        /// <param name="variableName"></param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> GetProcessInstanceVariableDataAsyncWithHttpInfo (string processInstanceId, string variableName, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetProcessInstanceVariableData");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->GetProcessInstanceVariableData");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstanceVariableData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<byte[]>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// List of process instances 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse GetProcessInstances (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = GetProcessInstancesWithHttpInfo(id, processDefinitionKey, processDefinitionId, businessKey, involvedUser, suspended, superProcessInstanceId, subProcessInstanceId, excludeSubprocesses, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of process instances 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > GetProcessInstancesWithHttpInfo (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/runtime/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (businessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessKey", businessKey)); // query parameter
            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (superProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "superProcessInstanceId", superProcessInstanceId)); // query parameter
            if (subProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subProcessInstanceId", subProcessInstanceId)); // query parameter
            if (excludeSubprocesses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubprocesses", excludeSubprocesses)); // query parameter
            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of process instances 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> GetProcessInstancesAsync (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {
             ApiResponse<DataResponse> localVarResponse = await GetProcessInstancesAsyncWithHttpInfo(id, processDefinitionKey, processDefinitionId, businessKey, involvedUser, suspended, superProcessInstanceId, subProcessInstanceId, excludeSubprocesses, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of process instances 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Only return models with the given version. (optional)</param>
        /// <param name="processDefinitionKey">Only return process instances with the given process definition key. (optional)</param>
        /// <param name="processDefinitionId">Only return process instances with the given process definition id. (optional)</param>
        /// <param name="businessKey">Only return process instances with the given businessKey. (optional)</param>
        /// <param name="involvedUser">Only return process instances in which the given user is involved. (optional)</param>
        /// <param name="suspended">If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)</param>
        /// <param name="superProcessInstanceId">Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)</param>
        /// <param name="subProcessInstanceId">Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)</param>
        /// <param name="excludeSubprocesses">Return only process instances which aren�t sub processes. (optional)</param>
        /// <param name="includeProcessVariables">Indication to include process variables in the result. (optional)</param>
        /// <param name="tenantId">Only return process instances with the given tenantId. (optional)</param>
        /// <param name="tenantIdLike">Only return process instances with a tenantId like the given value. (optional)</param>
        /// <param name="withoutTenantId">If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)</param>
        /// <param name="sort">Property to sort on, to be used together with the order. (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> GetProcessInstancesAsyncWithHttpInfo (string id = null, string processDefinitionKey = null, string processDefinitionId = null, string businessKey = null, string involvedUser = null, bool? suspended = null, string superProcessInstanceId = null, string subProcessInstanceId = null, bool? excludeSubprocesses = null, bool? includeProcessVariables = null, string tenantId = null, string tenantIdLike = null, bool? withoutTenantId = null, string sort = null)
        {

            var localVarPath = "/runtime/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (processDefinitionKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionKey", processDefinitionKey)); // query parameter
            if (processDefinitionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "processDefinitionId", processDefinitionId)); // query parameter
            if (businessKey != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "businessKey", businessKey)); // query parameter
            if (involvedUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "involvedUser", involvedUser)); // query parameter
            if (suspended != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "suspended", suspended)); // query parameter
            if (superProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "superProcessInstanceId", superProcessInstanceId)); // query parameter
            if (subProcessInstanceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subProcessInstanceId", subProcessInstanceId)); // query parameter
            if (excludeSubprocesses != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeSubprocesses", excludeSubprocesses)); // query parameter
            if (includeProcessVariables != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeProcessVariables", includeProcessVariables)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantId", tenantId)); // query parameter
            if (tenantIdLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tenantIdLike", tenantIdLike)); // query parameter
            if (withoutTenantId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "withoutTenantId", withoutTenantId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// List of variables for a process instance In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>List&lt;RestVariable&gt;</returns>
        public List<RestVariable> GetVariables (string processInstanceId, string scope = null)
        {
             ApiResponse<List<RestVariable>> localVarResponse = GetVariablesWithHttpInfo(processInstanceId, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of variables for a process instance In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RestVariable&gt;</returns>
        public ApiResponse< List<RestVariable> > GetVariablesWithHttpInfo (string processInstanceId, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetVariables");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// List of variables for a process instance In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of List&lt;RestVariable&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestVariable>> GetVariablesAsync (string processInstanceId, string scope = null)
        {
             ApiResponse<List<RestVariable>> localVarResponse = await GetVariablesAsyncWithHttpInfo(processInstanceId, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of variables for a process instance In case the variable is a binary variable or serializable, the valueUrl points to an URL to fetch the raw value. If it�s a plain variable, the value is present in the response. Note that only local scoped variables are returned, as there is no global scope for process-instance variables.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="scope"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestVariable&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestVariable>>> GetVariablesAsyncWithHttpInfo (string processInstanceId, string scope = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->GetVariables");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestVariable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestVariable>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestVariable>)));
        }

        /// <summary>
        /// Get involved people for process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>List&lt;RestIdentityLink&gt;</returns>
        public List<RestIdentityLink> ListProcessInstanceIdentityLinks (string processInstanceId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = ListProcessInstanceIdentityLinksWithHttpInfo(processInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get involved people for process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>ApiResponse of List&lt;RestIdentityLink&gt;</returns>
        public ApiResponse< List<RestIdentityLink> > ListProcessInstanceIdentityLinksWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->ListProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Get involved people for process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>Task of List&lt;RestIdentityLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestIdentityLink>> ListProcessInstanceIdentityLinksAsync (string processInstanceId)
        {
             ApiResponse<List<RestIdentityLink>> localVarResponse = await ListProcessInstanceIdentityLinksAsyncWithHttpInfo(processInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get involved people for process instance Note that the groupId in Response Body will always be null, as it�s only possible to involve users with a process-instance.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the links for.</param>
        /// <returns>Task of ApiResponse (List&lt;RestIdentityLink&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestIdentityLink>>> ListProcessInstanceIdentityLinksAsyncWithHttpInfo (string processInstanceId)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->ListProcessInstanceIdentityLinks");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/identitylinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProcessInstanceIdentityLinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestIdentityLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestIdentityLink>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestIdentityLink>)));
        }

        /// <summary>
        /// Activate or suspend a process instance ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ProcessInstanceResponse</returns>
        public ProcessInstanceResponse PerformProcessInstanceAction (string processInstanceId, ProcessInstanceActionRequest body = null)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = PerformProcessInstanceActionWithHttpInfo(processInstanceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate or suspend a process instance ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ProcessInstanceResponse</returns>
        public ApiResponse< ProcessInstanceResponse > PerformProcessInstanceActionWithHttpInfo (string processInstanceId, ProcessInstanceActionRequest body = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->PerformProcessInstanceAction");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformProcessInstanceAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Activate or suspend a process instance ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ProcessInstanceResponse</returns>
        public async System.Threading.Tasks.Task<ProcessInstanceResponse> PerformProcessInstanceActionAsync (string processInstanceId, ProcessInstanceActionRequest body = null)
        {
             ApiResponse<ProcessInstanceResponse> localVarResponse = await PerformProcessInstanceActionAsyncWithHttpInfo(processInstanceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate or suspend a process instance ## Activate a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;suspend\&quot; } &#x60;&#x60;&#x60;   ## Suspend a process instance   &#x60;&#x60;&#x60;JSON {   \&quot;action\&quot; : \&quot;activate\&quot; } &#x60;&#x60;&#x60;   
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to activate/suspend.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ProcessInstanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessInstanceResponse>> PerformProcessInstanceActionAsyncWithHttpInfo (string processInstanceId, ProcessInstanceActionRequest body = null)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->PerformProcessInstanceAction");

            var localVarPath = "/runtime/process-instances/{processInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PerformProcessInstanceAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessInstanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessInstanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessInstanceResponse)));
        }

        /// <summary>
        /// Query process instances The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>DataResponse</returns>
        public DataResponse QueryProcessInstances (ProcessInstanceQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = QueryProcessInstancesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query process instances The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DataResponse</returns>
        public ApiResponse< DataResponse > QueryProcessInstancesWithHttpInfo (ProcessInstanceQueryRequest body = null)
        {

            var localVarPath = "/query/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryProcessInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Query process instances The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DataResponse</returns>
        public async System.Threading.Tasks.Task<DataResponse> QueryProcessInstancesAsync (ProcessInstanceQueryRequest body = null)
        {
             ApiResponse<DataResponse> localVarResponse = await QueryProcessInstancesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query process instances The request body can contain all possible filters that can be used in the List process instances URL query. On top of these, it�s possible to provide an array of variables to include in the query, with their format described here.  The general paging and sorting query-parameters can be used for this URL.
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataResponse>> QueryProcessInstancesAsyncWithHttpInfo (ProcessInstanceQueryRequest body = null)
        {

            var localVarPath = "/query/process-instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryProcessInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataResponse)));
        }

        /// <summary>
        /// Update a single variable on a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>RestVariable</returns>
        public RestVariable UpdateProcessInstanceVariable (string processInstanceId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = UpdateProcessInstanceVariableWithHttpInfo(processInstanceId, variableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single variable on a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>ApiResponse of RestVariable</returns>
        public ApiResponse< RestVariable > UpdateProcessInstanceVariableWithHttpInfo (string processInstanceId, string variableName)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->UpdateProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->UpdateProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

        /// <summary>
        /// Update a single variable on a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>Task of RestVariable</returns>
        public async System.Threading.Tasks.Task<RestVariable> UpdateProcessInstanceVariableAsync (string processInstanceId, string variableName)
        {
             ApiResponse<RestVariable> localVarResponse = await UpdateProcessInstanceVariableAsyncWithHttpInfo(processInstanceId, variableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a single variable on a process instance 
        /// </summary>
        /// <exception cref="Activiti.Rest.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processInstanceId">The id of the process instance to the variables for.</param>
        /// <param name="variableName">Name of the variable to get.</param>
        /// <returns>Task of ApiResponse (RestVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestVariable>> UpdateProcessInstanceVariableAsyncWithHttpInfo (string processInstanceId, string variableName)
        {
            // verify the required parameter 'processInstanceId' is set
            if (processInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'processInstanceId' when calling ProcessInstancesApi->UpdateProcessInstanceVariable");
            // verify the required parameter 'variableName' is set
            if (variableName == null)
                throw new ApiException(400, "Missing required parameter 'variableName' when calling ProcessInstancesApi->UpdateProcessInstanceVariable");

            var localVarPath = "/runtime/process-instances/{processInstanceId}/variables/{variableName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processInstanceId != null) localVarPathParams.Add("processInstanceId", Configuration.ApiClient.ParameterToString(processInstanceId)); // path parameter
            if (variableName != null) localVarPathParams.Add("variableName", Configuration.ApiClient.ParameterToString(variableName)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcessInstanceVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestVariable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestVariable)));
        }

    }
}
